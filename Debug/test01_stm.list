
test01_stm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ebcc  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  0800edb0  0800edb0  0001edb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f29c  0800f29c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800f29c  0800f29c  0001f29c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f2a4  0800f2a4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f2a4  0800f2a4  0001f2a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f2a8  0800f2a8  0001f2a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800f2ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b34  200001e0  0800f48c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  20000d14  0800f48c  00020d14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fd0b  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040c0  00000000  00000000  0003ff1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001778  00000000  00000000  00043fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015b0  00000000  00000000  00045758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000284a6  00000000  00000000  00046d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e361  00000000  00000000  0006f1ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0bb3  00000000  00000000  0008d50f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017e0c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000072d8  00000000  00000000  0017e118  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ed94 	.word	0x0800ed94

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e4 	.word	0x200001e4
 800021c:	0800ed94 	.word	0x0800ed94

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b96e 	b.w	8000f8c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468c      	mov	ip, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8083 	bne.w	8000dde <__udivmoddi4+0x116>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4617      	mov	r7, r2
 8000cdc:	d947      	bls.n	8000d6e <__udivmoddi4+0xa6>
 8000cde:	fab2 f282 	clz	r2, r2
 8000ce2:	b142      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	f1c2 0020 	rsb	r0, r2, #32
 8000ce8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cec:	4091      	lsls	r1, r2
 8000cee:	4097      	lsls	r7, r2
 8000cf0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbbc f6f8 	udiv	r6, ip, r8
 8000d00:	fa1f fe87 	uxth.w	lr, r7
 8000d04:	fb08 c116 	mls	r1, r8, r6, ip
 8000d08:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18fb      	adds	r3, r7, r3
 8000d16:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1a:	f080 8119 	bcs.w	8000f50 <__udivmoddi4+0x288>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8116 	bls.w	8000f50 <__udivmoddi4+0x288>
 8000d24:	3e02      	subs	r6, #2
 8000d26:	443b      	add	r3, r7
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d30:	fb08 3310 	mls	r3, r8, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d3c:	45a6      	cmp	lr, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	193c      	adds	r4, r7, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d46:	f080 8105 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d4a:	45a6      	cmp	lr, r4
 8000d4c:	f240 8102 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d50:	3802      	subs	r0, #2
 8000d52:	443c      	add	r4, r7
 8000d54:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d58:	eba4 040e 	sub.w	r4, r4, lr
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	b11d      	cbz	r5, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c5 4300 	strd	r4, r3, [r5]
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	b902      	cbnz	r2, 8000d72 <__udivmoddi4+0xaa>
 8000d70:	deff      	udf	#255	; 0xff
 8000d72:	fab2 f282 	clz	r2, r2
 8000d76:	2a00      	cmp	r2, #0
 8000d78:	d150      	bne.n	8000e1c <__udivmoddi4+0x154>
 8000d7a:	1bcb      	subs	r3, r1, r7
 8000d7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d80:	fa1f f887 	uxth.w	r8, r7
 8000d84:	2601      	movs	r6, #1
 8000d86:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d8a:	0c21      	lsrs	r1, r4, #16
 8000d8c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb08 f30c 	mul.w	r3, r8, ip
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0xe2>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	f200 80e9 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1ac9      	subs	r1, r1, r3
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000db8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x10c>
 8000dc4:	193c      	adds	r4, r7, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x10a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80d9 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e7bf      	b.n	8000d5e <__udivmoddi4+0x96>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0x12e>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80b1 	beq.w	8000f4a <__udivmoddi4+0x282>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x1cc>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0x140>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80b8 	bhi.w	8000f78 <__udivmoddi4+0x2b0>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	468c      	mov	ip, r1
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0a8      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000e16:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e1a:	e7a5      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f603 	lsr.w	r6, r0, r3
 8000e24:	4097      	lsls	r7, r2
 8000e26:	fa01 f002 	lsl.w	r0, r1, r2
 8000e2a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e2e:	40d9      	lsrs	r1, r3
 8000e30:	4330      	orrs	r0, r6
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e38:	fa1f f887 	uxth.w	r8, r7
 8000e3c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e44:	fb06 f108 	mul.w	r1, r6, r8
 8000e48:	4299      	cmp	r1, r3
 8000e4a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e4e:	d909      	bls.n	8000e64 <__udivmoddi4+0x19c>
 8000e50:	18fb      	adds	r3, r7, r3
 8000e52:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e56:	f080 808d 	bcs.w	8000f74 <__udivmoddi4+0x2ac>
 8000e5a:	4299      	cmp	r1, r3
 8000e5c:	f240 808a 	bls.w	8000f74 <__udivmoddi4+0x2ac>
 8000e60:	3e02      	subs	r6, #2
 8000e62:	443b      	add	r3, r7
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b281      	uxth	r1, r0
 8000e68:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e6c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e74:	fb00 f308 	mul.w	r3, r0, r8
 8000e78:	428b      	cmp	r3, r1
 8000e7a:	d907      	bls.n	8000e8c <__udivmoddi4+0x1c4>
 8000e7c:	1879      	adds	r1, r7, r1
 8000e7e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e82:	d273      	bcs.n	8000f6c <__udivmoddi4+0x2a4>
 8000e84:	428b      	cmp	r3, r1
 8000e86:	d971      	bls.n	8000f6c <__udivmoddi4+0x2a4>
 8000e88:	3802      	subs	r0, #2
 8000e8a:	4439      	add	r1, r7
 8000e8c:	1acb      	subs	r3, r1, r3
 8000e8e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e92:	e778      	b.n	8000d86 <__udivmoddi4+0xbe>
 8000e94:	f1c6 0c20 	rsb	ip, r6, #32
 8000e98:	fa03 f406 	lsl.w	r4, r3, r6
 8000e9c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ea0:	431c      	orrs	r4, r3
 8000ea2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000eae:	fa21 f10c 	lsr.w	r1, r1, ip
 8000eb2:	431f      	orrs	r7, r3
 8000eb4:	0c3b      	lsrs	r3, r7, #16
 8000eb6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eba:	fa1f f884 	uxth.w	r8, r4
 8000ebe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ec2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ec6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eca:	458a      	cmp	sl, r1
 8000ecc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x220>
 8000ed6:	1861      	adds	r1, r4, r1
 8000ed8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000edc:	d248      	bcs.n	8000f70 <__udivmoddi4+0x2a8>
 8000ede:	458a      	cmp	sl, r1
 8000ee0:	d946      	bls.n	8000f70 <__udivmoddi4+0x2a8>
 8000ee2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ee6:	4421      	add	r1, r4
 8000ee8:	eba1 010a 	sub.w	r1, r1, sl
 8000eec:	b2bf      	uxth	r7, r7
 8000eee:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ef2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ef6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000efa:	fb00 f808 	mul.w	r8, r0, r8
 8000efe:	45b8      	cmp	r8, r7
 8000f00:	d907      	bls.n	8000f12 <__udivmoddi4+0x24a>
 8000f02:	19e7      	adds	r7, r4, r7
 8000f04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f08:	d22e      	bcs.n	8000f68 <__udivmoddi4+0x2a0>
 8000f0a:	45b8      	cmp	r8, r7
 8000f0c:	d92c      	bls.n	8000f68 <__udivmoddi4+0x2a0>
 8000f0e:	3802      	subs	r0, #2
 8000f10:	4427      	add	r7, r4
 8000f12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f16:	eba7 0708 	sub.w	r7, r7, r8
 8000f1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f1e:	454f      	cmp	r7, r9
 8000f20:	46c6      	mov	lr, r8
 8000f22:	4649      	mov	r1, r9
 8000f24:	d31a      	bcc.n	8000f5c <__udivmoddi4+0x294>
 8000f26:	d017      	beq.n	8000f58 <__udivmoddi4+0x290>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x27a>
 8000f2a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f2e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f32:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f36:	40f2      	lsrs	r2, r6
 8000f38:	ea4c 0202 	orr.w	r2, ip, r2
 8000f3c:	40f7      	lsrs	r7, r6
 8000f3e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f42:	2600      	movs	r6, #0
 8000f44:	4631      	mov	r1, r6
 8000f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e70b      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6fd      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f58:	4543      	cmp	r3, r8
 8000f5a:	d2e5      	bcs.n	8000f28 <__udivmoddi4+0x260>
 8000f5c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f60:	eb69 0104 	sbc.w	r1, r9, r4
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7df      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e7d2      	b.n	8000f12 <__udivmoddi4+0x24a>
 8000f6c:	4660      	mov	r0, ip
 8000f6e:	e78d      	b.n	8000e8c <__udivmoddi4+0x1c4>
 8000f70:	4681      	mov	r9, r0
 8000f72:	e7b9      	b.n	8000ee8 <__udivmoddi4+0x220>
 8000f74:	4666      	mov	r6, ip
 8000f76:	e775      	b.n	8000e64 <__udivmoddi4+0x19c>
 8000f78:	4630      	mov	r0, r6
 8000f7a:	e74a      	b.n	8000e12 <__udivmoddi4+0x14a>
 8000f7c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f80:	4439      	add	r1, r7
 8000f82:	e713      	b.n	8000dac <__udivmoddi4+0xe4>
 8000f84:	3802      	subs	r0, #2
 8000f86:	443c      	add	r4, r7
 8000f88:	e724      	b.n	8000dd4 <__udivmoddi4+0x10c>
 8000f8a:	bf00      	nop

08000f8c <__aeabi_idiv0>:
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <HAL_TIM_PeriodElapsedCallback>:
#include "PID_regulators.h"



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 if(htim->Instance == TIM3)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a07      	ldr	r2, [pc, #28]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d101      	bne.n	8000fa6 <HAL_TIM_PeriodElapsedCallback+0x16>
 {
	 PID_MotorRegulator();
 8000fa2:	f000 f8b9 	bl	8001118 <PID_MotorRegulator>
 }
 if(htim->Instance == TIM4)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a05      	ldr	r2, [pc, #20]	; (8000fc0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d101      	bne.n	8000fb4 <HAL_TIM_PeriodElapsedCallback+0x24>
 {
	 PID_MainRegulator();
 8000fb0:	f000 f808 	bl	8000fc4 <PID_MainRegulator>
	 //lama++;
 }
}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40000400 	.word	0x40000400
 8000fc0:	40000800 	.word	0x40000800

08000fc4 <PID_MainRegulator>:



void PID_MainRegulator(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
	uint16_t pid_act_velocity=pid_basic_velocity;
 8000fca:	4b4b      	ldr	r3, [pc, #300]	; (80010f8 <PID_MainRegulator+0x134>)
 8000fcc:	881b      	ldrh	r3, [r3, #0]
 8000fce:	81fb      	strh	r3, [r7, #14]
	int16_t pid_u=0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	81bb      	strh	r3, [r7, #12]
	int16_t pid_e=0;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	817b      	strh	r3, [r7, #10]
	static int16_t pid_prev_e=0;
	uint16_t pid_e_straight=0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	813b      	strh	r3, [r7, #8]
	uint16_t pid_straight_threshold=10000;
 8000fdc:	f242 7310 	movw	r3, #10000	; 0x2710
 8000fe0:	80fb      	strh	r3, [r7, #6]
	uint16_t pid_straight_velocity=3;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	80bb      	strh	r3, [r7, #4]
	static uint16_t pid_straight_counter=0;



	// uchyb ----------------
	pid_e = KTIR_ControlError();
 8000fe6:	f000 ff1b 	bl	8001e20 <KTIR_ControlError>
 8000fea:	4603      	mov	r3, r0
 8000fec:	817b      	strh	r3, [r7, #10]

	// sterowanie -----------
	if((pid_e>-pid_e_straight)&&(pid_e<pid_e_straight)) 		// jazda prosto - przyspieszenie
 8000fee:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000ff2:	893b      	ldrh	r3, [r7, #8]
 8000ff4:	425b      	negs	r3, r3
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	dd13      	ble.n	8001022 <PID_MainRegulator+0x5e>
 8000ffa:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000ffe:	893b      	ldrh	r3, [r7, #8]
 8001000:	429a      	cmp	r2, r3
 8001002:	da0e      	bge.n	8001022 <PID_MainRegulator+0x5e>
	{
		if(pid_straight_counter<=pid_straight_threshold)
 8001004:	4b3d      	ldr	r3, [pc, #244]	; (80010fc <PID_MainRegulator+0x138>)
 8001006:	881b      	ldrh	r3, [r3, #0]
 8001008:	88fa      	ldrh	r2, [r7, #6]
 800100a:	429a      	cmp	r2, r3
 800100c:	d306      	bcc.n	800101c <PID_MainRegulator+0x58>
		{
			pid_straight_counter++;
 800100e:	4b3b      	ldr	r3, [pc, #236]	; (80010fc <PID_MainRegulator+0x138>)
 8001010:	881b      	ldrh	r3, [r3, #0]
 8001012:	3301      	adds	r3, #1
 8001014:	b29a      	uxth	r2, r3
 8001016:	4b39      	ldr	r3, [pc, #228]	; (80010fc <PID_MainRegulator+0x138>)
 8001018:	801a      	strh	r2, [r3, #0]
		if(pid_straight_counter<=pid_straight_threshold)
 800101a:	e005      	b.n	8001028 <PID_MainRegulator+0x64>
		}
		else
		{
			pid_act_velocity = pid_straight_velocity;
 800101c:	88bb      	ldrh	r3, [r7, #4]
 800101e:	81fb      	strh	r3, [r7, #14]
		if(pid_straight_counter<=pid_straight_threshold)
 8001020:	e002      	b.n	8001028 <PID_MainRegulator+0x64>
		}
	}
	else
	{
		pid_act_velocity = pid_basic_velocity;
 8001022:	4b35      	ldr	r3, [pc, #212]	; (80010f8 <PID_MainRegulator+0x134>)
 8001024:	881b      	ldrh	r3, [r3, #0]
 8001026:	81fb      	strh	r3, [r7, #14]
	}

	if(pid_e==32000) 						// zgubienie trasy
 8001028:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800102c:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8001030:	d123      	bne.n	800107a <PID_MainRegulator+0xb6>
	{
		if(pid_prev_e<0)
 8001032:	4b33      	ldr	r3, [pc, #204]	; (8001100 <PID_MainRegulator+0x13c>)
 8001034:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001038:	2b00      	cmp	r3, #0
 800103a:	da04      	bge.n	8001046 <PID_MainRegulator+0x82>
			pid_u=-pid_u_track_lost;
 800103c:	4b31      	ldr	r3, [pc, #196]	; (8001104 <PID_MainRegulator+0x140>)
 800103e:	881b      	ldrh	r3, [r3, #0]
 8001040:	425b      	negs	r3, r3
 8001042:	b29b      	uxth	r3, r3
 8001044:	81bb      	strh	r3, [r7, #12]
		if(pid_prev_e>0)
 8001046:	4b2e      	ldr	r3, [pc, #184]	; (8001100 <PID_MainRegulator+0x13c>)
 8001048:	f9b3 3000 	ldrsh.w	r3, [r3]
 800104c:	2b00      	cmp	r3, #0
 800104e:	dd02      	ble.n	8001056 <PID_MainRegulator+0x92>
			pid_u=pid_u_track_lost;
 8001050:	4b2c      	ldr	r3, [pc, #176]	; (8001104 <PID_MainRegulator+0x140>)
 8001052:	881b      	ldrh	r3, [r3, #0]
 8001054:	81bb      	strh	r3, [r7, #12]

		pid_target_l=pid_act_velocity+pid_u;
 8001056:	89ba      	ldrh	r2, [r7, #12]
 8001058:	89fb      	ldrh	r3, [r7, #14]
 800105a:	4413      	add	r3, r2
 800105c:	b29b      	uxth	r3, r3
 800105e:	b21a      	sxth	r2, r3
 8001060:	4b29      	ldr	r3, [pc, #164]	; (8001108 <PID_MainRegulator+0x144>)
 8001062:	801a      	strh	r2, [r3, #0]
		pid_target_r=pid_act_velocity-pid_u;
 8001064:	89bb      	ldrh	r3, [r7, #12]
 8001066:	89fa      	ldrh	r2, [r7, #14]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	b29b      	uxth	r3, r3
 800106c:	b21a      	sxth	r2, r3
 800106e:	4b27      	ldr	r3, [pc, #156]	; (800110c <PID_MainRegulator+0x148>)
 8001070:	801a      	strh	r2, [r3, #0]
		pid_straight_counter=0;
 8001072:	4b22      	ldr	r3, [pc, #136]	; (80010fc <PID_MainRegulator+0x138>)
 8001074:	2200      	movs	r2, #0
 8001076:	801a      	strh	r2, [r3, #0]
		pid_target_r=pid_act_velocity-pid_u;

		pid_prev_e=pid_e;
		pid_straight_counter=0;
	}
}
 8001078:	e039      	b.n	80010ee <PID_MainRegulator+0x12a>
		pid_u=(pid_k_coefficient)*pid_e+(pid_k_coefficient*pid_Td_coefficient*(pid_e-pid_prev_e));
 800107a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800107e:	ee07 3a90 	vmov	s15, r3
 8001082:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001086:	4b22      	ldr	r3, [pc, #136]	; (8001110 <PID_MainRegulator+0x14c>)
 8001088:	edd3 7a00 	vldr	s15, [r3]
 800108c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001090:	4b1f      	ldr	r3, [pc, #124]	; (8001110 <PID_MainRegulator+0x14c>)
 8001092:	edd3 6a00 	vldr	s13, [r3]
 8001096:	4b1f      	ldr	r3, [pc, #124]	; (8001114 <PID_MainRegulator+0x150>)
 8001098:	edd3 7a00 	vldr	s15, [r3]
 800109c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80010a0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80010a4:	4a16      	ldr	r2, [pc, #88]	; (8001100 <PID_MainRegulator+0x13c>)
 80010a6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80010aa:	1a9b      	subs	r3, r3, r2
 80010ac:	ee07 3a90 	vmov	s15, r3
 80010b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010c0:	ee17 3a90 	vmov	r3, s15
 80010c4:	81bb      	strh	r3, [r7, #12]
		pid_target_l=pid_act_velocity+pid_u;
 80010c6:	89ba      	ldrh	r2, [r7, #12]
 80010c8:	89fb      	ldrh	r3, [r7, #14]
 80010ca:	4413      	add	r3, r2
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	b21a      	sxth	r2, r3
 80010d0:	4b0d      	ldr	r3, [pc, #52]	; (8001108 <PID_MainRegulator+0x144>)
 80010d2:	801a      	strh	r2, [r3, #0]
		pid_target_r=pid_act_velocity-pid_u;
 80010d4:	89bb      	ldrh	r3, [r7, #12]
 80010d6:	89fa      	ldrh	r2, [r7, #14]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	b29b      	uxth	r3, r3
 80010dc:	b21a      	sxth	r2, r3
 80010de:	4b0b      	ldr	r3, [pc, #44]	; (800110c <PID_MainRegulator+0x148>)
 80010e0:	801a      	strh	r2, [r3, #0]
		pid_prev_e=pid_e;
 80010e2:	4a07      	ldr	r2, [pc, #28]	; (8001100 <PID_MainRegulator+0x13c>)
 80010e4:	897b      	ldrh	r3, [r7, #10]
 80010e6:	8013      	strh	r3, [r2, #0]
		pid_straight_counter=0;
 80010e8:	4b04      	ldr	r3, [pc, #16]	; (80010fc <PID_MainRegulator+0x138>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	801a      	strh	r2, [r3, #0]
}
 80010ee:	bf00      	nop
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000312 	.word	0x20000312
 80010fc:	200001fc 	.word	0x200001fc
 8001100:	200001fe 	.word	0x200001fe
 8001104:	20000378 	.word	0x20000378
 8001108:	2000037e 	.word	0x2000037e
 800110c:	2000048a 	.word	0x2000048a
 8001110:	20000258 	.word	0x20000258
 8001114:	200004b0 	.word	0x200004b0

08001118 <PID_MotorRegulator>:



void PID_MotorRegulator(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
	//static int16_t prev_ui_l=0;
	static float prev_ui_r=0;
	static int16_t pid_lmotor_prev_e=0;
	static int16_t pid_rmotor_prev_e=0;
	//int16_t pid_lmotor_e=0;
	int16_t pid_rmotor_e=0;
 800111e:	2300      	movs	r3, #0
 8001120:	81fb      	strh	r3, [r7, #14]

	float up=0.0;
 8001122:	f04f 0300 	mov.w	r3, #0
 8001126:	60bb      	str	r3, [r7, #8]
	float ui=0.0;
 8001128:	f04f 0300 	mov.w	r3, #0
 800112c:	607b      	str	r3, [r7, #4]
	float ud=0.0;
 800112e:	f04f 0300 	mov.w	r3, #0
 8001132:	603b      	str	r3, [r7, #0]


	// odczytanie wartosci kata absolutnego ------------------------------------------------------------

	enc_langle = (ENCReading(&hspi1, SPI1_CS_GPIO_Port, SPI1_CS_Pin, 0xFFFF)) << 2;
 8001134:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001138:	2204      	movs	r2, #4
 800113a:	49c2      	ldr	r1, [pc, #776]	; (8001444 <PID_MotorRegulator+0x32c>)
 800113c:	48c2      	ldr	r0, [pc, #776]	; (8001448 <PID_MotorRegulator+0x330>)
 800113e:	f000 fa91 	bl	8001664 <ENCReading>
 8001142:	4603      	mov	r3, r0
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	b21a      	sxth	r2, r3
 8001148:	4bc0      	ldr	r3, [pc, #768]	; (800144c <PID_MotorRegulator+0x334>)
 800114a:	801a      	strh	r2, [r3, #0]
	enc_rangle = (ENCReading(&hspi2, SPI2_CS_GPIO_Port, SPI2_CS_Pin, 0xFFFF)) << 2;
 800114c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001150:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001154:	49bb      	ldr	r1, [pc, #748]	; (8001444 <PID_MotorRegulator+0x32c>)
 8001156:	48be      	ldr	r0, [pc, #760]	; (8001450 <PID_MotorRegulator+0x338>)
 8001158:	f000 fa84 	bl	8001664 <ENCReading>
 800115c:	4603      	mov	r3, r0
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	b21a      	sxth	r2, r3
 8001162:	4bbc      	ldr	r3, [pc, #752]	; (8001454 <PID_MotorRegulator+0x33c>)
 8001164:	801a      	strh	r2, [r3, #0]

	enc_ldiff_raw = (enc_langle - enc_langle_old);
 8001166:	4bb9      	ldr	r3, [pc, #740]	; (800144c <PID_MotorRegulator+0x334>)
 8001168:	f9b3 3000 	ldrsh.w	r3, [r3]
 800116c:	b29a      	uxth	r2, r3
 800116e:	4bba      	ldr	r3, [pc, #744]	; (8001458 <PID_MotorRegulator+0x340>)
 8001170:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001174:	b29b      	uxth	r3, r3
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	b29b      	uxth	r3, r3
 800117a:	b21a      	sxth	r2, r3
 800117c:	4bb7      	ldr	r3, [pc, #732]	; (800145c <PID_MotorRegulator+0x344>)
 800117e:	801a      	strh	r2, [r3, #0]
	enc_langle_old = enc_langle;
 8001180:	4bb2      	ldr	r3, [pc, #712]	; (800144c <PID_MotorRegulator+0x334>)
 8001182:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001186:	4bb4      	ldr	r3, [pc, #720]	; (8001458 <PID_MotorRegulator+0x340>)
 8001188:	801a      	strh	r2, [r3, #0]
	enc_rdiff_raw = (enc_rangle - enc_rangle_old);
 800118a:	4bb2      	ldr	r3, [pc, #712]	; (8001454 <PID_MotorRegulator+0x33c>)
 800118c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001190:	b29a      	uxth	r2, r3
 8001192:	4bb3      	ldr	r3, [pc, #716]	; (8001460 <PID_MotorRegulator+0x348>)
 8001194:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001198:	b29b      	uxth	r3, r3
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	b29b      	uxth	r3, r3
 800119e:	b21a      	sxth	r2, r3
 80011a0:	4bb0      	ldr	r3, [pc, #704]	; (8001464 <PID_MotorRegulator+0x34c>)
 80011a2:	801a      	strh	r2, [r3, #0]
	enc_rangle_old = enc_rangle;
 80011a4:	4bab      	ldr	r3, [pc, #684]	; (8001454 <PID_MotorRegulator+0x33c>)
 80011a6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80011aa:	4bad      	ldr	r3, [pc, #692]	; (8001460 <PID_MotorRegulator+0x348>)
 80011ac:	801a      	strh	r2, [r3, #0]

	enc_ldiff = PID_AlphaBetaFilterLeft(enc_ldiff_raw);
 80011ae:	4bab      	ldr	r3, [pc, #684]	; (800145c <PID_MotorRegulator+0x344>)
 80011b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f000 f975 	bl	80014a4 <PID_AlphaBetaFilterLeft>
 80011ba:	eef0 7a40 	vmov.f32	s15, s0
 80011be:	4baa      	ldr	r3, [pc, #680]	; (8001468 <PID_MotorRegulator+0x350>)
 80011c0:	edc3 7a00 	vstr	s15, [r3]
	enc_rdiff = PID_AlphaBetaFilterRight(enc_rdiff_raw);
 80011c4:	4ba7      	ldr	r3, [pc, #668]	; (8001464 <PID_MotorRegulator+0x34c>)
 80011c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f000 f9da 	bl	8001584 <PID_AlphaBetaFilterRight>
 80011d0:	eef0 7a40 	vmov.f32	s15, s0
 80011d4:	4ba5      	ldr	r3, [pc, #660]	; (800146c <PID_MotorRegulator+0x354>)
 80011d6:	edc3 7a00 	vstr	s15, [r3]

	// regulator PID silnikow --------------------------------------------------------------------------

	// lewy silnik -----------

	pid_lmotor_e=pid_target_l-enc_ldiff;
 80011da:	4ba5      	ldr	r3, [pc, #660]	; (8001470 <PID_MotorRegulator+0x358>)
 80011dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011e0:	ee07 3a90 	vmov	s15, r3
 80011e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011e8:	4b9f      	ldr	r3, [pc, #636]	; (8001468 <PID_MotorRegulator+0x350>)
 80011ea:	edd3 7a00 	vldr	s15, [r3]
 80011ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011f6:	ee17 3a90 	vmov	r3, s15
 80011fa:	b21a      	sxth	r2, r3
 80011fc:	4b9d      	ldr	r3, [pc, #628]	; (8001474 <PID_MotorRegulator+0x35c>)
 80011fe:	801a      	strh	r2, [r3, #0]
	up=(pid_motor_k)*pid_lmotor_e;
 8001200:	4b9c      	ldr	r3, [pc, #624]	; (8001474 <PID_MotorRegulator+0x35c>)
 8001202:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001206:	ee07 3a90 	vmov	s15, r3
 800120a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800120e:	4b9a      	ldr	r3, [pc, #616]	; (8001478 <PID_MotorRegulator+0x360>)
 8001210:	edd3 7a00 	vldr	s15, [r3]
 8001214:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001218:	edc7 7a02 	vstr	s15, [r7, #8]
	ui=prev_ui_l+((pid_motor_k*(pid_lmotor_prev_e+pid_lmotor_e))/(pid_motor_Ti*2));
 800121c:	4b97      	ldr	r3, [pc, #604]	; (800147c <PID_MotorRegulator+0x364>)
 800121e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001222:	461a      	mov	r2, r3
 8001224:	4b93      	ldr	r3, [pc, #588]	; (8001474 <PID_MotorRegulator+0x35c>)
 8001226:	f9b3 3000 	ldrsh.w	r3, [r3]
 800122a:	4413      	add	r3, r2
 800122c:	ee07 3a90 	vmov	s15, r3
 8001230:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001234:	4b90      	ldr	r3, [pc, #576]	; (8001478 <PID_MotorRegulator+0x360>)
 8001236:	edd3 7a00 	vldr	s15, [r3]
 800123a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800123e:	4b90      	ldr	r3, [pc, #576]	; (8001480 <PID_MotorRegulator+0x368>)
 8001240:	881b      	ldrh	r3, [r3, #0]
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	ee07 3a90 	vmov	s15, r3
 8001248:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800124c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001250:	4b8c      	ldr	r3, [pc, #560]	; (8001484 <PID_MotorRegulator+0x36c>)
 8001252:	edd3 7a00 	vldr	s15, [r3]
 8001256:	ee77 7a27 	vadd.f32	s15, s14, s15
 800125a:	edc7 7a01 	vstr	s15, [r7, #4]
	ud=(pid_motor_k*pid_motor_Td*(pid_lmotor_e-pid_lmotor_prev_e));
 800125e:	4b86      	ldr	r3, [pc, #536]	; (8001478 <PID_MotorRegulator+0x360>)
 8001260:	ed93 7a00 	vldr	s14, [r3]
 8001264:	4b88      	ldr	r3, [pc, #544]	; (8001488 <PID_MotorRegulator+0x370>)
 8001266:	edd3 7a00 	vldr	s15, [r3]
 800126a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800126e:	4b81      	ldr	r3, [pc, #516]	; (8001474 <PID_MotorRegulator+0x35c>)
 8001270:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001274:	461a      	mov	r2, r3
 8001276:	4b81      	ldr	r3, [pc, #516]	; (800147c <PID_MotorRegulator+0x364>)
 8001278:	f9b3 3000 	ldrsh.w	r3, [r3]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	ee07 3a90 	vmov	s15, r3
 8001282:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800128a:	edc7 7a00 	vstr	s15, [r7]
	prev_ui_l=ui;
 800128e:	4a7d      	ldr	r2, [pc, #500]	; (8001484 <PID_MotorRegulator+0x36c>)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6013      	str	r3, [r2, #0]

	pid_lmotor_u=up+ui+ud;
 8001294:	ed97 7a02 	vldr	s14, [r7, #8]
 8001298:	edd7 7a01 	vldr	s15, [r7, #4]
 800129c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012a0:	edd7 7a00 	vldr	s15, [r7]
 80012a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012ac:	ee17 3a90 	vmov	r3, s15
 80012b0:	b21a      	sxth	r2, r3
 80012b2:	4b76      	ldr	r3, [pc, #472]	; (800148c <PID_MotorRegulator+0x374>)
 80012b4:	801a      	strh	r2, [r3, #0]
	//pid_lmotor_u=up;
	pid_ltest=pid_lmotor_u;
 80012b6:	4b75      	ldr	r3, [pc, #468]	; (800148c <PID_MotorRegulator+0x374>)
 80012b8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80012bc:	4b74      	ldr	r3, [pc, #464]	; (8001490 <PID_MotorRegulator+0x378>)
 80012be:	801a      	strh	r2, [r3, #0]

	// prawy silnik -----------

	pid_rmotor_e=pid_target_r-enc_rdiff;
 80012c0:	4b74      	ldr	r3, [pc, #464]	; (8001494 <PID_MotorRegulator+0x37c>)
 80012c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012c6:	ee07 3a90 	vmov	s15, r3
 80012ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012ce:	4b67      	ldr	r3, [pc, #412]	; (800146c <PID_MotorRegulator+0x354>)
 80012d0:	edd3 7a00 	vldr	s15, [r3]
 80012d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012dc:	ee17 3a90 	vmov	r3, s15
 80012e0:	81fb      	strh	r3, [r7, #14]
	up=(pid_motor_k)*pid_rmotor_e;
 80012e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012e6:	ee07 3a90 	vmov	s15, r3
 80012ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012ee:	4b62      	ldr	r3, [pc, #392]	; (8001478 <PID_MotorRegulator+0x360>)
 80012f0:	edd3 7a00 	vldr	s15, [r3]
 80012f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012f8:	edc7 7a02 	vstr	s15, [r7, #8]
	ui=prev_ui_r+((pid_motor_k*(pid_rmotor_prev_e+pid_rmotor_e))/(pid_motor_Ti*2));
 80012fc:	4b66      	ldr	r3, [pc, #408]	; (8001498 <PID_MotorRegulator+0x380>)
 80012fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001302:	461a      	mov	r2, r3
 8001304:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001308:	4413      	add	r3, r2
 800130a:	ee07 3a90 	vmov	s15, r3
 800130e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001312:	4b59      	ldr	r3, [pc, #356]	; (8001478 <PID_MotorRegulator+0x360>)
 8001314:	edd3 7a00 	vldr	s15, [r3]
 8001318:	ee67 6a27 	vmul.f32	s13, s14, s15
 800131c:	4b58      	ldr	r3, [pc, #352]	; (8001480 <PID_MotorRegulator+0x368>)
 800131e:	881b      	ldrh	r3, [r3, #0]
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	ee07 3a90 	vmov	s15, r3
 8001326:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800132a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800132e:	4b5b      	ldr	r3, [pc, #364]	; (800149c <PID_MotorRegulator+0x384>)
 8001330:	edd3 7a00 	vldr	s15, [r3]
 8001334:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001338:	edc7 7a01 	vstr	s15, [r7, #4]
	ud=(pid_motor_k*pid_motor_Td*(pid_rmotor_e-pid_rmotor_prev_e));
 800133c:	4b4e      	ldr	r3, [pc, #312]	; (8001478 <PID_MotorRegulator+0x360>)
 800133e:	ed93 7a00 	vldr	s14, [r3]
 8001342:	4b51      	ldr	r3, [pc, #324]	; (8001488 <PID_MotorRegulator+0x370>)
 8001344:	edd3 7a00 	vldr	s15, [r3]
 8001348:	ee27 7a27 	vmul.f32	s14, s14, s15
 800134c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001350:	4a51      	ldr	r2, [pc, #324]	; (8001498 <PID_MotorRegulator+0x380>)
 8001352:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001356:	1a9b      	subs	r3, r3, r2
 8001358:	ee07 3a90 	vmov	s15, r3
 800135c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001360:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001364:	edc7 7a00 	vstr	s15, [r7]
	prev_ui_r=ui;
 8001368:	4a4c      	ldr	r2, [pc, #304]	; (800149c <PID_MotorRegulator+0x384>)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6013      	str	r3, [r2, #0]

	pid_rmotor_u=up+ui+ud;
 800136e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001372:	edd7 7a01 	vldr	s15, [r7, #4]
 8001376:	ee37 7a27 	vadd.f32	s14, s14, s15
 800137a:	edd7 7a00 	vldr	s15, [r7]
 800137e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001382:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001386:	ee17 3a90 	vmov	r3, s15
 800138a:	b21a      	sxth	r2, r3
 800138c:	4b44      	ldr	r3, [pc, #272]	; (80014a0 <PID_MotorRegulator+0x388>)
 800138e:	801a      	strh	r2, [r3, #0]
	//pid_rmotor_u=up;

	// ograniczenie sterowania

	if(pid_lmotor_u<-500)
 8001390:	4b3e      	ldr	r3, [pc, #248]	; (800148c <PID_MotorRegulator+0x374>)
 8001392:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001396:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 800139a:	da03      	bge.n	80013a4 <PID_MotorRegulator+0x28c>
		pid_lmotor_u = -500;
 800139c:	4b3b      	ldr	r3, [pc, #236]	; (800148c <PID_MotorRegulator+0x374>)
 800139e:	f64f 620c 	movw	r2, #65036	; 0xfe0c
 80013a2:	801a      	strh	r2, [r3, #0]
	if(pid_lmotor_u>500)
 80013a4:	4b39      	ldr	r3, [pc, #228]	; (800148c <PID_MotorRegulator+0x374>)
 80013a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013aa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80013ae:	dd03      	ble.n	80013b8 <PID_MotorRegulator+0x2a0>
		pid_lmotor_u = 500;
 80013b0:	4b36      	ldr	r3, [pc, #216]	; (800148c <PID_MotorRegulator+0x374>)
 80013b2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80013b6:	801a      	strh	r2, [r3, #0]

	if(pid_rmotor_u<-500)
 80013b8:	4b39      	ldr	r3, [pc, #228]	; (80014a0 <PID_MotorRegulator+0x388>)
 80013ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013be:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 80013c2:	da03      	bge.n	80013cc <PID_MotorRegulator+0x2b4>
		pid_rmotor_u = -500;
 80013c4:	4b36      	ldr	r3, [pc, #216]	; (80014a0 <PID_MotorRegulator+0x388>)
 80013c6:	f64f 620c 	movw	r2, #65036	; 0xfe0c
 80013ca:	801a      	strh	r2, [r3, #0]
	if(pid_rmotor_u>500)
 80013cc:	4b34      	ldr	r3, [pc, #208]	; (80014a0 <PID_MotorRegulator+0x388>)
 80013ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013d2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80013d6:	dd03      	ble.n	80013e0 <PID_MotorRegulator+0x2c8>
		pid_rmotor_u = 500;
 80013d8:	4b31      	ldr	r3, [pc, #196]	; (80014a0 <PID_MotorRegulator+0x388>)
 80013da:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80013de:	801a      	strh	r2, [r3, #0]


	if(pid_lmotor_u>-35&&pid_lmotor_u<35)
 80013e0:	4b2a      	ldr	r3, [pc, #168]	; (800148c <PID_MotorRegulator+0x374>)
 80013e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013e6:	f113 0f22 	cmn.w	r3, #34	; 0x22
 80013ea:	db07      	blt.n	80013fc <PID_MotorRegulator+0x2e4>
 80013ec:	4b27      	ldr	r3, [pc, #156]	; (800148c <PID_MotorRegulator+0x374>)
 80013ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f2:	2b22      	cmp	r3, #34	; 0x22
 80013f4:	dc02      	bgt.n	80013fc <PID_MotorRegulator+0x2e4>
		pid_lmotor_u = 0;
 80013f6:	4b25      	ldr	r3, [pc, #148]	; (800148c <PID_MotorRegulator+0x374>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	801a      	strh	r2, [r3, #0]

	if(pid_rmotor_u>-35&&pid_rmotor_u<35)
 80013fc:	4b28      	ldr	r3, [pc, #160]	; (80014a0 <PID_MotorRegulator+0x388>)
 80013fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001402:	f113 0f22 	cmn.w	r3, #34	; 0x22
 8001406:	db07      	blt.n	8001418 <PID_MotorRegulator+0x300>
 8001408:	4b25      	ldr	r3, [pc, #148]	; (80014a0 <PID_MotorRegulator+0x388>)
 800140a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800140e:	2b22      	cmp	r3, #34	; 0x22
 8001410:	dc02      	bgt.n	8001418 <PID_MotorRegulator+0x300>
		pid_rmotor_u = 0;
 8001412:	4b23      	ldr	r3, [pc, #140]	; (80014a0 <PID_MotorRegulator+0x388>)
 8001414:	2200      	movs	r2, #0
 8001416:	801a      	strh	r2, [r3, #0]

	// ustawienie predkosci ---

	MOTORS_SetVelocity(pid_lmotor_u, pid_rmotor_u);
 8001418:	4b1c      	ldr	r3, [pc, #112]	; (800148c <PID_MotorRegulator+0x374>)
 800141a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800141e:	4a20      	ldr	r2, [pc, #128]	; (80014a0 <PID_MotorRegulator+0x388>)
 8001420:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001424:	4611      	mov	r1, r2
 8001426:	4618      	mov	r0, r3
 8001428:	f001 fba8 	bl	8002b7c <MOTORS_SetVelocity>
	pid_lmotor_prev_e=pid_lmotor_e;
 800142c:	4b11      	ldr	r3, [pc, #68]	; (8001474 <PID_MotorRegulator+0x35c>)
 800142e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001432:	4b12      	ldr	r3, [pc, #72]	; (800147c <PID_MotorRegulator+0x364>)
 8001434:	801a      	strh	r2, [r3, #0]
	pid_rmotor_prev_e=pid_rmotor_e;
 8001436:	4a18      	ldr	r2, [pc, #96]	; (8001498 <PID_MotorRegulator+0x380>)
 8001438:	89fb      	ldrh	r3, [r7, #14]
 800143a:	8013      	strh	r3, [r2, #0]
	//TIM3->CNT=30000;
	//TIM4->CNT=30000;
}
 800143c:	bf00      	nop
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40020400 	.word	0x40020400
 8001448:	200003d8 	.word	0x200003d8
 800144c:	2000037a 	.word	0x2000037a
 8001450:	20000260 	.word	0x20000260
 8001454:	200004ac 	.word	0x200004ac
 8001458:	20000380 	.word	0x20000380
 800145c:	20000370 	.word	0x20000370
 8001460:	2000048c 	.word	0x2000048c
 8001464:	2000025c 	.word	0x2000025c
 8001468:	20000374 	.word	0x20000374
 800146c:	20000314 	.word	0x20000314
 8001470:	2000037e 	.word	0x2000037e
 8001474:	20000382 	.word	0x20000382
 8001478:	20000254 	.word	0x20000254
 800147c:	20000200 	.word	0x20000200
 8001480:	200003d4 	.word	0x200003d4
 8001484:	2000036c 	.word	0x2000036c
 8001488:	20000364 	.word	0x20000364
 800148c:	20000488 	.word	0x20000488
 8001490:	200004ae 	.word	0x200004ae
 8001494:	2000048a 	.word	0x2000048a
 8001498:	20000202 	.word	0x20000202
 800149c:	20000204 	.word	0x20000204
 80014a0:	2000037c 	.word	0x2000037c

080014a4 <PID_AlphaBetaFilterLeft>:

float PID_AlphaBetaFilterLeft(int16_t measurement)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	80fb      	strh	r3, [r7, #6]
	static float x0=0;
	static float x1=0;
	static float v0=0;
	static float v1=0;
	static float r=0;
	float dt=0.000125;
 80014ae:	4b2d      	ldr	r3, [pc, #180]	; (8001564 <PID_AlphaBetaFilterLeft+0xc0>)
 80014b0:	60fb      	str	r3, [r7, #12]

	x1 = x0 + (v0 * dt);
 80014b2:	4b2d      	ldr	r3, [pc, #180]	; (8001568 <PID_AlphaBetaFilterLeft+0xc4>)
 80014b4:	ed93 7a00 	vldr	s14, [r3]
 80014b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80014bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014c0:	4b2a      	ldr	r3, [pc, #168]	; (800156c <PID_AlphaBetaFilterLeft+0xc8>)
 80014c2:	edd3 7a00 	vldr	s15, [r3]
 80014c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014ca:	4b29      	ldr	r3, [pc, #164]	; (8001570 <PID_AlphaBetaFilterLeft+0xcc>)
 80014cc:	edc3 7a00 	vstr	s15, [r3]
	v1 = v0;
 80014d0:	4b25      	ldr	r3, [pc, #148]	; (8001568 <PID_AlphaBetaFilterLeft+0xc4>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a27      	ldr	r2, [pc, #156]	; (8001574 <PID_AlphaBetaFilterLeft+0xd0>)
 80014d6:	6013      	str	r3, [r2, #0]

	r = measurement - x1;
 80014d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014dc:	ee07 3a90 	vmov	s15, r3
 80014e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014e4:	4b22      	ldr	r3, [pc, #136]	; (8001570 <PID_AlphaBetaFilterLeft+0xcc>)
 80014e6:	edd3 7a00 	vldr	s15, [r3]
 80014ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014ee:	4b22      	ldr	r3, [pc, #136]	; (8001578 <PID_AlphaBetaFilterLeft+0xd4>)
 80014f0:	edc3 7a00 	vstr	s15, [r3]

	x1 = x1 + (pid_alpha * r);
 80014f4:	4b21      	ldr	r3, [pc, #132]	; (800157c <PID_AlphaBetaFilterLeft+0xd8>)
 80014f6:	ed93 7a00 	vldr	s14, [r3]
 80014fa:	4b1f      	ldr	r3, [pc, #124]	; (8001578 <PID_AlphaBetaFilterLeft+0xd4>)
 80014fc:	edd3 7a00 	vldr	s15, [r3]
 8001500:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001504:	4b1a      	ldr	r3, [pc, #104]	; (8001570 <PID_AlphaBetaFilterLeft+0xcc>)
 8001506:	edd3 7a00 	vldr	s15, [r3]
 800150a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800150e:	4b18      	ldr	r3, [pc, #96]	; (8001570 <PID_AlphaBetaFilterLeft+0xcc>)
 8001510:	edc3 7a00 	vstr	s15, [r3]
	v1 = v1 + ((pid_beta*r) / dt);
 8001514:	4b1a      	ldr	r3, [pc, #104]	; (8001580 <PID_AlphaBetaFilterLeft+0xdc>)
 8001516:	ed93 7a00 	vldr	s14, [r3]
 800151a:	4b17      	ldr	r3, [pc, #92]	; (8001578 <PID_AlphaBetaFilterLeft+0xd4>)
 800151c:	edd3 7a00 	vldr	s15, [r3]
 8001520:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001524:	edd7 7a03 	vldr	s15, [r7, #12]
 8001528:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800152c:	4b11      	ldr	r3, [pc, #68]	; (8001574 <PID_AlphaBetaFilterLeft+0xd0>)
 800152e:	edd3 7a00 	vldr	s15, [r3]
 8001532:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001536:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <PID_AlphaBetaFilterLeft+0xd0>)
 8001538:	edc3 7a00 	vstr	s15, [r3]

	x0 = x1;
 800153c:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <PID_AlphaBetaFilterLeft+0xcc>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a0a      	ldr	r2, [pc, #40]	; (800156c <PID_AlphaBetaFilterLeft+0xc8>)
 8001542:	6013      	str	r3, [r2, #0]
	v0 = v1;
 8001544:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <PID_AlphaBetaFilterLeft+0xd0>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a07      	ldr	r2, [pc, #28]	; (8001568 <PID_AlphaBetaFilterLeft+0xc4>)
 800154a:	6013      	str	r3, [r2, #0]

	return x0;
 800154c:	4b07      	ldr	r3, [pc, #28]	; (800156c <PID_AlphaBetaFilterLeft+0xc8>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	ee07 3a90 	vmov	s15, r3
}
 8001554:	eeb0 0a67 	vmov.f32	s0, s15
 8001558:	3714      	adds	r7, #20
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	3903126f 	.word	0x3903126f
 8001568:	20000208 	.word	0x20000208
 800156c:	2000020c 	.word	0x2000020c
 8001570:	20000210 	.word	0x20000210
 8001574:	20000214 	.word	0x20000214
 8001578:	20000218 	.word	0x20000218
 800157c:	20000490 	.word	0x20000490
 8001580:	200003d0 	.word	0x200003d0

08001584 <PID_AlphaBetaFilterRight>:

float PID_AlphaBetaFilterRight(int16_t measurement)
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	80fb      	strh	r3, [r7, #6]
	static float x0=0;
	static float x1=0;
	static float v0=0;
	static float v1=0;
	static float r=0;
	float dt=0.000125;
 800158e:	4b2d      	ldr	r3, [pc, #180]	; (8001644 <PID_AlphaBetaFilterRight+0xc0>)
 8001590:	60fb      	str	r3, [r7, #12]

	x1 = x0 + (v0 * dt);
 8001592:	4b2d      	ldr	r3, [pc, #180]	; (8001648 <PID_AlphaBetaFilterRight+0xc4>)
 8001594:	ed93 7a00 	vldr	s14, [r3]
 8001598:	edd7 7a03 	vldr	s15, [r7, #12]
 800159c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015a0:	4b2a      	ldr	r3, [pc, #168]	; (800164c <PID_AlphaBetaFilterRight+0xc8>)
 80015a2:	edd3 7a00 	vldr	s15, [r3]
 80015a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015aa:	4b29      	ldr	r3, [pc, #164]	; (8001650 <PID_AlphaBetaFilterRight+0xcc>)
 80015ac:	edc3 7a00 	vstr	s15, [r3]
	v1 = v0;
 80015b0:	4b25      	ldr	r3, [pc, #148]	; (8001648 <PID_AlphaBetaFilterRight+0xc4>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a27      	ldr	r2, [pc, #156]	; (8001654 <PID_AlphaBetaFilterRight+0xd0>)
 80015b6:	6013      	str	r3, [r2, #0]

	r = measurement - x1;
 80015b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015bc:	ee07 3a90 	vmov	s15, r3
 80015c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015c4:	4b22      	ldr	r3, [pc, #136]	; (8001650 <PID_AlphaBetaFilterRight+0xcc>)
 80015c6:	edd3 7a00 	vldr	s15, [r3]
 80015ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015ce:	4b22      	ldr	r3, [pc, #136]	; (8001658 <PID_AlphaBetaFilterRight+0xd4>)
 80015d0:	edc3 7a00 	vstr	s15, [r3]

	x1 = x1 + (pid_alpha * r);
 80015d4:	4b21      	ldr	r3, [pc, #132]	; (800165c <PID_AlphaBetaFilterRight+0xd8>)
 80015d6:	ed93 7a00 	vldr	s14, [r3]
 80015da:	4b1f      	ldr	r3, [pc, #124]	; (8001658 <PID_AlphaBetaFilterRight+0xd4>)
 80015dc:	edd3 7a00 	vldr	s15, [r3]
 80015e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015e4:	4b1a      	ldr	r3, [pc, #104]	; (8001650 <PID_AlphaBetaFilterRight+0xcc>)
 80015e6:	edd3 7a00 	vldr	s15, [r3]
 80015ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ee:	4b18      	ldr	r3, [pc, #96]	; (8001650 <PID_AlphaBetaFilterRight+0xcc>)
 80015f0:	edc3 7a00 	vstr	s15, [r3]
	v1 = v1 + ((pid_beta*r) / dt);
 80015f4:	4b1a      	ldr	r3, [pc, #104]	; (8001660 <PID_AlphaBetaFilterRight+0xdc>)
 80015f6:	ed93 7a00 	vldr	s14, [r3]
 80015fa:	4b17      	ldr	r3, [pc, #92]	; (8001658 <PID_AlphaBetaFilterRight+0xd4>)
 80015fc:	edd3 7a00 	vldr	s15, [r3]
 8001600:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001604:	edd7 7a03 	vldr	s15, [r7, #12]
 8001608:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800160c:	4b11      	ldr	r3, [pc, #68]	; (8001654 <PID_AlphaBetaFilterRight+0xd0>)
 800160e:	edd3 7a00 	vldr	s15, [r3]
 8001612:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001616:	4b0f      	ldr	r3, [pc, #60]	; (8001654 <PID_AlphaBetaFilterRight+0xd0>)
 8001618:	edc3 7a00 	vstr	s15, [r3]

	x0 = x1;
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <PID_AlphaBetaFilterRight+0xcc>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a0a      	ldr	r2, [pc, #40]	; (800164c <PID_AlphaBetaFilterRight+0xc8>)
 8001622:	6013      	str	r3, [r2, #0]
	v0 = v1;
 8001624:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <PID_AlphaBetaFilterRight+0xd0>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a07      	ldr	r2, [pc, #28]	; (8001648 <PID_AlphaBetaFilterRight+0xc4>)
 800162a:	6013      	str	r3, [r2, #0]

	return x0;
 800162c:	4b07      	ldr	r3, [pc, #28]	; (800164c <PID_AlphaBetaFilterRight+0xc8>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	ee07 3a90 	vmov	s15, r3
}
 8001634:	eeb0 0a67 	vmov.f32	s0, s15
 8001638:	3714      	adds	r7, #20
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	3903126f 	.word	0x3903126f
 8001648:	2000021c 	.word	0x2000021c
 800164c:	20000220 	.word	0x20000220
 8001650:	20000224 	.word	0x20000224
 8001654:	20000228 	.word	0x20000228
 8001658:	2000022c 	.word	0x2000022c
 800165c:	20000490 	.word	0x20000490
 8001660:	200003d0 	.word	0x200003d0

08001664 <ENCReading>:


#include "encoders.h"

uint16_t ENCReading(SPI_HandleTypeDef *spi, GPIO_TypeDef *cs_port, uint16_t cs_pin, uint16_t addr)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b088      	sub	sp, #32
 8001668:	af02      	add	r7, sp, #8
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	4611      	mov	r1, r2
 8001670:	461a      	mov	r2, r3
 8001672:	460b      	mov	r3, r1
 8001674:	80fb      	strh	r3, [r7, #6]
 8001676:	4613      	mov	r3, r2
 8001678:	80bb      	strh	r3, [r7, #4]
	uint16_t rx_data = 0;
 800167a:	2300      	movs	r3, #0
 800167c:	82fb      	strh	r3, [r7, #22]
	//uint16_t tx_data = 0x7FFe;

	HAL_GPIO_WritePin(cs_port, cs_pin, GPIO_PIN_RESET);
 800167e:	88fb      	ldrh	r3, [r7, #6]
 8001680:	2200      	movs	r2, #0
 8001682:	4619      	mov	r1, r3
 8001684:	68b8      	ldr	r0, [r7, #8]
 8001686:	f003 fe1d 	bl	80052c4 <HAL_GPIO_WritePin>
	if(HAL_SPI_TransmitReceive(spi, &addr, &rx_data, 1, HAL_MAX_DELAY)!=HAL_OK)
 800168a:	f107 0216 	add.w	r2, r7, #22
 800168e:	1d39      	adds	r1, r7, #4
 8001690:	f04f 33ff 	mov.w	r3, #4294967295
 8001694:	9300      	str	r3, [sp, #0]
 8001696:	2301      	movs	r3, #1
 8001698:	68f8      	ldr	r0, [r7, #12]
 800169a:	f006 fd89 	bl	80081b0 <HAL_SPI_TransmitReceive>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d002      	beq.n	80016aa <ENCReading+0x46>
		spi_error=1;
 80016a4:	4b08      	ldr	r3, [pc, #32]	; (80016c8 <ENCReading+0x64>)
 80016a6:	2201      	movs	r2, #1
 80016a8:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(cs_port, cs_pin, GPIO_PIN_SET);
 80016aa:	88fb      	ldrh	r3, [r7, #6]
 80016ac:	2201      	movs	r2, #1
 80016ae:	4619      	mov	r1, r3
 80016b0:	68b8      	ldr	r0, [r7, #8]
 80016b2:	f003 fe07 	bl	80052c4 <HAL_GPIO_WritePin>

	return (rx_data&0x3FFF);
 80016b6:	8afb      	ldrh	r3, [r7, #22]
 80016b8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80016bc:	b29b      	uxth	r3, r3
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000310 	.word	0x20000310

080016cc <ENCWriting>:

uint16_t ENCWriting(SPI_HandleTypeDef *spi, GPIO_TypeDef *cs_port, uint16_t cs_pin, uint16_t addr, uint16_t data)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b088      	sub	sp, #32
 80016d0:	af02      	add	r7, sp, #8
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	4611      	mov	r1, r2
 80016d8:	461a      	mov	r2, r3
 80016da:	460b      	mov	r3, r1
 80016dc:	80fb      	strh	r3, [r7, #6]
 80016de:	4613      	mov	r3, r2
 80016e0:	80bb      	strh	r3, [r7, #4]
	uint16_t rx_data = 0;
 80016e2:	2300      	movs	r3, #0
 80016e4:	82fb      	strh	r3, [r7, #22]
	//uint16_t tx_data = 0x7FFe;

	HAL_GPIO_WritePin(cs_port, cs_pin, GPIO_PIN_RESET);
 80016e6:	88fb      	ldrh	r3, [r7, #6]
 80016e8:	2200      	movs	r2, #0
 80016ea:	4619      	mov	r1, r3
 80016ec:	68b8      	ldr	r0, [r7, #8]
 80016ee:	f003 fde9 	bl	80052c4 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(spi, &addr, 1, HAL_MAX_DELAY)!=HAL_OK)
 80016f2:	1d39      	adds	r1, r7, #4
 80016f4:	f04f 33ff 	mov.w	r3, #4294967295
 80016f8:	2201      	movs	r2, #1
 80016fa:	68f8      	ldr	r0, [r7, #12]
 80016fc:	f006 faba 	bl	8007c74 <HAL_SPI_Transmit>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d002      	beq.n	800170c <ENCWriting+0x40>
		spi_error=1;
 8001706:	4b17      	ldr	r3, [pc, #92]	; (8001764 <ENCWriting+0x98>)
 8001708:	2201      	movs	r2, #1
 800170a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(cs_port, cs_pin, GPIO_PIN_SET);
 800170c:	88fb      	ldrh	r3, [r7, #6]
 800170e:	2201      	movs	r2, #1
 8001710:	4619      	mov	r1, r3
 8001712:	68b8      	ldr	r0, [r7, #8]
 8001714:	f003 fdd6 	bl	80052c4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(cs_port, cs_pin, GPIO_PIN_RESET);
 8001718:	88fb      	ldrh	r3, [r7, #6]
 800171a:	2200      	movs	r2, #0
 800171c:	4619      	mov	r1, r3
 800171e:	68b8      	ldr	r0, [r7, #8]
 8001720:	f003 fdd0 	bl	80052c4 <HAL_GPIO_WritePin>
	if(HAL_SPI_TransmitReceive(spi, &data, &rx_data, 1, HAL_MAX_DELAY)!=HAL_OK)
 8001724:	f107 0216 	add.w	r2, r7, #22
 8001728:	f04f 33ff 	mov.w	r3, #4294967295
 800172c:	9300      	str	r3, [sp, #0]
 800172e:	2301      	movs	r3, #1
 8001730:	f107 0120 	add.w	r1, r7, #32
 8001734:	68f8      	ldr	r0, [r7, #12]
 8001736:	f006 fd3b 	bl	80081b0 <HAL_SPI_TransmitReceive>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d002      	beq.n	8001746 <ENCWriting+0x7a>
		spi_error=1;
 8001740:	4b08      	ldr	r3, [pc, #32]	; (8001764 <ENCWriting+0x98>)
 8001742:	2201      	movs	r2, #1
 8001744:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(cs_port, cs_pin, GPIO_PIN_SET);
 8001746:	88fb      	ldrh	r3, [r7, #6]
 8001748:	2201      	movs	r2, #1
 800174a:	4619      	mov	r1, r3
 800174c:	68b8      	ldr	r0, [r7, #8]
 800174e:	f003 fdb9 	bl	80052c4 <HAL_GPIO_WritePin>

	return (rx_data&0x3FFF);
 8001752:	8afb      	ldrh	r3, [r7, #22]
 8001754:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001758:	b29b      	uxth	r3, r3
}
 800175a:	4618      	mov	r0, r3
 800175c:	3718      	adds	r7, #24
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	20000310 	.word	0x20000310

08001768 <IMUConfigureModule>:

#include "imu.h"


void IMUConfigureModule(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
	uint8_t tx[]={0x70|0x80, 0};
 800176e:	23f0      	movs	r3, #240	; 0xf0
 8001770:	80bb      	strh	r3, [r7, #4]
	uint8_t rx[]={0};
 8001772:	2300      	movs	r3, #0
 8001774:	703b      	strb	r3, [r7, #0]



	// ustawienie protokołu komunikacyjnego SPI (rejestr I2C_IF) ----------------------

	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8001776:	2200      	movs	r2, #0
 8001778:	2140      	movs	r1, #64	; 0x40
 800177a:	48b9      	ldr	r0, [pc, #740]	; (8001a60 <IMUConfigureModule+0x2f8>)
 800177c:	f003 fda2 	bl	80052c4 <HAL_GPIO_WritePin>

	if(HAL_SPI_Transmit(&hspi3, tx, 1, HAL_MAX_DELAY)!=HAL_OK)
 8001780:	1d39      	adds	r1, r7, #4
 8001782:	f04f 33ff 	mov.w	r3, #4294967295
 8001786:	2201      	movs	r2, #1
 8001788:	48b6      	ldr	r0, [pc, #728]	; (8001a64 <IMUConfigureModule+0x2fc>)
 800178a:	f006 fa73 	bl	8007c74 <HAL_SPI_Transmit>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d002      	beq.n	800179a <IMUConfigureModule+0x32>
	  	spi_error=1;
 8001794:	4bb4      	ldr	r3, [pc, #720]	; (8001a68 <IMUConfigureModule+0x300>)
 8001796:	2201      	movs	r2, #1
 8001798:	701a      	strb	r2, [r3, #0]
	if(HAL_SPI_Receive(&hspi3, rx, 1, HAL_MAX_DELAY)!=HAL_OK)
 800179a:	4639      	mov	r1, r7
 800179c:	f04f 33ff 	mov.w	r3, #4294967295
 80017a0:	2201      	movs	r2, #1
 80017a2:	48b0      	ldr	r0, [pc, #704]	; (8001a64 <IMUConfigureModule+0x2fc>)
 80017a4:	f006 fbd4 	bl	8007f50 <HAL_SPI_Receive>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d002      	beq.n	80017b4 <IMUConfigureModule+0x4c>
	  	spi_error=1;
 80017ae:	4bae      	ldr	r3, [pc, #696]	; (8001a68 <IMUConfigureModule+0x300>)
 80017b0:	2201      	movs	r2, #1
 80017b2:	701a      	strb	r2, [r3, #0]

	tx[0]=0x70;
 80017b4:	2370      	movs	r3, #112	; 0x70
 80017b6:	713b      	strb	r3, [r7, #4]
	tx[1]=rx[0]|0b01000000;
 80017b8:	783b      	ldrb	r3, [r7, #0]
 80017ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	717b      	strb	r3, [r7, #5]

	if(HAL_SPI_Transmit(&hspi3, tx, 2, HAL_MAX_DELAY)!=HAL_OK)
 80017c2:	1d39      	adds	r1, r7, #4
 80017c4:	f04f 33ff 	mov.w	r3, #4294967295
 80017c8:	2202      	movs	r2, #2
 80017ca:	48a6      	ldr	r0, [pc, #664]	; (8001a64 <IMUConfigureModule+0x2fc>)
 80017cc:	f006 fa52 	bl	8007c74 <HAL_SPI_Transmit>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d002      	beq.n	80017dc <IMUConfigureModule+0x74>
		spi_error=1;
 80017d6:	4ba4      	ldr	r3, [pc, #656]	; (8001a68 <IMUConfigureModule+0x300>)
 80017d8:	2201      	movs	r2, #1
 80017da:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 80017dc:	2201      	movs	r2, #1
 80017de:	2140      	movs	r1, #64	; 0x40
 80017e0:	489f      	ldr	r0, [pc, #636]	; (8001a60 <IMUConfigureModule+0x2f8>)
 80017e2:	f003 fd6f 	bl	80052c4 <HAL_GPIO_WritePin>

	// ustawienie rejestru CONFIG ------------------------------------------------------

	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 80017e6:	2200      	movs	r2, #0
 80017e8:	2140      	movs	r1, #64	; 0x40
 80017ea:	489d      	ldr	r0, [pc, #628]	; (8001a60 <IMUConfigureModule+0x2f8>)
 80017ec:	f003 fd6a 	bl	80052c4 <HAL_GPIO_WritePin>

	tx[0]=0x1A;
 80017f0:	231a      	movs	r3, #26
 80017f2:	713b      	strb	r3, [r7, #4]
	tx[1]=0x00;
 80017f4:	2300      	movs	r3, #0
 80017f6:	717b      	strb	r3, [r7, #5]

	if(HAL_SPI_Transmit(&hspi3, tx, 2, HAL_MAX_DELAY)!=HAL_OK)
 80017f8:	1d39      	adds	r1, r7, #4
 80017fa:	f04f 33ff 	mov.w	r3, #4294967295
 80017fe:	2202      	movs	r2, #2
 8001800:	4898      	ldr	r0, [pc, #608]	; (8001a64 <IMUConfigureModule+0x2fc>)
 8001802:	f006 fa37 	bl	8007c74 <HAL_SPI_Transmit>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d002      	beq.n	8001812 <IMUConfigureModule+0xaa>
		spi_error=1;
 800180c:	4b96      	ldr	r3, [pc, #600]	; (8001a68 <IMUConfigureModule+0x300>)
 800180e:	2201      	movs	r2, #1
 8001810:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 8001812:	2201      	movs	r2, #1
 8001814:	2140      	movs	r1, #64	; 0x40
 8001816:	4892      	ldr	r0, [pc, #584]	; (8001a60 <IMUConfigureModule+0x2f8>)
 8001818:	f003 fd54 	bl	80052c4 <HAL_GPIO_WritePin>


	// ustawienie rejestru PWR_MGMT_1 ------------------------------------------------------

	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 800181c:	2200      	movs	r2, #0
 800181e:	2140      	movs	r1, #64	; 0x40
 8001820:	488f      	ldr	r0, [pc, #572]	; (8001a60 <IMUConfigureModule+0x2f8>)
 8001822:	f003 fd4f 	bl	80052c4 <HAL_GPIO_WritePin>

	tx[0]=0x6B;
 8001826:	236b      	movs	r3, #107	; 0x6b
 8001828:	713b      	strb	r3, [r7, #4]
	tx[1]=0b00011001; // do not sleep, gyro standby, temperature sensor disabled, (internal oscillator 20MHz-000, choose best-001)
 800182a:	2319      	movs	r3, #25
 800182c:	717b      	strb	r3, [r7, #5]

	if(HAL_SPI_Transmit(&hspi3, tx, 2, HAL_MAX_DELAY)!=HAL_OK)
 800182e:	1d39      	adds	r1, r7, #4
 8001830:	f04f 33ff 	mov.w	r3, #4294967295
 8001834:	2202      	movs	r2, #2
 8001836:	488b      	ldr	r0, [pc, #556]	; (8001a64 <IMUConfigureModule+0x2fc>)
 8001838:	f006 fa1c 	bl	8007c74 <HAL_SPI_Transmit>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d002      	beq.n	8001848 <IMUConfigureModule+0xe0>
		spi_error=1;
 8001842:	4b89      	ldr	r3, [pc, #548]	; (8001a68 <IMUConfigureModule+0x300>)
 8001844:	2201      	movs	r2, #1
 8001846:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 8001848:	2201      	movs	r2, #1
 800184a:	2140      	movs	r1, #64	; 0x40
 800184c:	4884      	ldr	r0, [pc, #528]	; (8001a60 <IMUConfigureModule+0x2f8>)
 800184e:	f003 fd39 	bl	80052c4 <HAL_GPIO_WritePin>


	// ustawienie rejestru PWR_MGMT_2 ------------------------------------------------------

	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8001852:	2200      	movs	r2, #0
 8001854:	2140      	movs	r1, #64	; 0x40
 8001856:	4882      	ldr	r0, [pc, #520]	; (8001a60 <IMUConfigureModule+0x2f8>)
 8001858:	f003 fd34 	bl	80052c4 <HAL_GPIO_WritePin>

	tx[0]=0x6C|0x80;
 800185c:	23ec      	movs	r3, #236	; 0xec
 800185e:	713b      	strb	r3, [r7, #4]

	if(HAL_SPI_Transmit(&hspi3, tx, 1, HAL_MAX_DELAY)!=HAL_OK)
 8001860:	1d39      	adds	r1, r7, #4
 8001862:	f04f 33ff 	mov.w	r3, #4294967295
 8001866:	2201      	movs	r2, #1
 8001868:	487e      	ldr	r0, [pc, #504]	; (8001a64 <IMUConfigureModule+0x2fc>)
 800186a:	f006 fa03 	bl	8007c74 <HAL_SPI_Transmit>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d002      	beq.n	800187a <IMUConfigureModule+0x112>
		spi_error=1;
 8001874:	4b7c      	ldr	r3, [pc, #496]	; (8001a68 <IMUConfigureModule+0x300>)
 8001876:	2201      	movs	r2, #1
 8001878:	701a      	strb	r2, [r3, #0]
	if(HAL_SPI_Receive(&hspi3, rx, 1, HAL_MAX_DELAY)!=HAL_OK)
 800187a:	4639      	mov	r1, r7
 800187c:	f04f 33ff 	mov.w	r3, #4294967295
 8001880:	2201      	movs	r2, #1
 8001882:	4878      	ldr	r0, [pc, #480]	; (8001a64 <IMUConfigureModule+0x2fc>)
 8001884:	f006 fb64 	bl	8007f50 <HAL_SPI_Receive>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d002      	beq.n	8001894 <IMUConfigureModule+0x12c>
	  	spi_error=1;
 800188e:	4b76      	ldr	r3, [pc, #472]	; (8001a68 <IMUConfigureModule+0x300>)
 8001890:	2201      	movs	r2, #1
 8001892:	701a      	strb	r2, [r3, #0]

	tx[0]=0x6C;
 8001894:	236c      	movs	r3, #108	; 0x6c
 8001896:	713b      	strb	r3, [r7, #4]
	tx[1]=rx[0]|0b00000111; // accelerometers on, gyros off
 8001898:	783b      	ldrb	r3, [r7, #0]
 800189a:	f043 0307 	orr.w	r3, r3, #7
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	717b      	strb	r3, [r7, #5]

	if(HAL_SPI_Transmit(&hspi3, tx, 2, HAL_MAX_DELAY)!=HAL_OK)
 80018a2:	1d39      	adds	r1, r7, #4
 80018a4:	f04f 33ff 	mov.w	r3, #4294967295
 80018a8:	2202      	movs	r2, #2
 80018aa:	486e      	ldr	r0, [pc, #440]	; (8001a64 <IMUConfigureModule+0x2fc>)
 80018ac:	f006 f9e2 	bl	8007c74 <HAL_SPI_Transmit>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d002      	beq.n	80018bc <IMUConfigureModule+0x154>
		spi_error=1;
 80018b6:	4b6c      	ldr	r3, [pc, #432]	; (8001a68 <IMUConfigureModule+0x300>)
 80018b8:	2201      	movs	r2, #1
 80018ba:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 80018bc:	2201      	movs	r2, #1
 80018be:	2140      	movs	r1, #64	; 0x40
 80018c0:	4867      	ldr	r0, [pc, #412]	; (8001a60 <IMUConfigureModule+0x2f8>)
 80018c2:	f003 fcff 	bl	80052c4 <HAL_GPIO_WritePin>


	// ustawienie rejestru ACCEL_CONFIG2 -----------------------------------------------

	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 80018c6:	2200      	movs	r2, #0
 80018c8:	2140      	movs	r1, #64	; 0x40
 80018ca:	4865      	ldr	r0, [pc, #404]	; (8001a60 <IMUConfigureModule+0x2f8>)
 80018cc:	f003 fcfa 	bl	80052c4 <HAL_GPIO_WritePin>

	tx[0]=0x1D|0x80;
 80018d0:	239d      	movs	r3, #157	; 0x9d
 80018d2:	713b      	strb	r3, [r7, #4]

	if(HAL_SPI_Transmit(&hspi3, tx, 1, HAL_MAX_DELAY)!=HAL_OK)
 80018d4:	1d39      	adds	r1, r7, #4
 80018d6:	f04f 33ff 	mov.w	r3, #4294967295
 80018da:	2201      	movs	r2, #1
 80018dc:	4861      	ldr	r0, [pc, #388]	; (8001a64 <IMUConfigureModule+0x2fc>)
 80018de:	f006 f9c9 	bl	8007c74 <HAL_SPI_Transmit>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d002      	beq.n	80018ee <IMUConfigureModule+0x186>
		spi_error=1;
 80018e8:	4b5f      	ldr	r3, [pc, #380]	; (8001a68 <IMUConfigureModule+0x300>)
 80018ea:	2201      	movs	r2, #1
 80018ec:	701a      	strb	r2, [r3, #0]
	if(HAL_SPI_Receive(&hspi3, rx, 1, HAL_MAX_DELAY)!=HAL_OK)
 80018ee:	4639      	mov	r1, r7
 80018f0:	f04f 33ff 	mov.w	r3, #4294967295
 80018f4:	2201      	movs	r2, #1
 80018f6:	485b      	ldr	r0, [pc, #364]	; (8001a64 <IMUConfigureModule+0x2fc>)
 80018f8:	f006 fb2a 	bl	8007f50 <HAL_SPI_Receive>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d002      	beq.n	8001908 <IMUConfigureModule+0x1a0>
	  	spi_error=1;
 8001902:	4b59      	ldr	r3, [pc, #356]	; (8001a68 <IMUConfigureModule+0x300>)
 8001904:	2201      	movs	r2, #1
 8001906:	701a      	strb	r2, [r3, #0]

	tx[0]=0x1D;
 8001908:	231d      	movs	r3, #29
 800190a:	713b      	strb	r3, [r7, #4]
	tx[1]=rx[0]|0b00000110; // rate 1 kHz, lowest noise
 800190c:	783b      	ldrb	r3, [r7, #0]
 800190e:	f043 0306 	orr.w	r3, r3, #6
 8001912:	b2db      	uxtb	r3, r3
 8001914:	717b      	strb	r3, [r7, #5]

	if(HAL_SPI_Transmit(&hspi3, tx, 2, HAL_MAX_DELAY)!=HAL_OK)
 8001916:	1d39      	adds	r1, r7, #4
 8001918:	f04f 33ff 	mov.w	r3, #4294967295
 800191c:	2202      	movs	r2, #2
 800191e:	4851      	ldr	r0, [pc, #324]	; (8001a64 <IMUConfigureModule+0x2fc>)
 8001920:	f006 f9a8 	bl	8007c74 <HAL_SPI_Transmit>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d002      	beq.n	8001930 <IMUConfigureModule+0x1c8>
		spi_error=1;
 800192a:	4b4f      	ldr	r3, [pc, #316]	; (8001a68 <IMUConfigureModule+0x300>)
 800192c:	2201      	movs	r2, #1
 800192e:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 8001930:	2201      	movs	r2, #1
 8001932:	2140      	movs	r1, #64	; 0x40
 8001934:	484a      	ldr	r0, [pc, #296]	; (8001a60 <IMUConfigureModule+0x2f8>)
 8001936:	f003 fcc5 	bl	80052c4 <HAL_GPIO_WritePin>


	// ustawienie rejestru SMPLRT_DIV ------------------------------------------------------

	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 800193a:	2200      	movs	r2, #0
 800193c:	2140      	movs	r1, #64	; 0x40
 800193e:	4848      	ldr	r0, [pc, #288]	; (8001a60 <IMUConfigureModule+0x2f8>)
 8001940:	f003 fcc0 	bl	80052c4 <HAL_GPIO_WritePin>

	tx[0]=0x19;
 8001944:	2319      	movs	r3, #25
 8001946:	713b      	strb	r3, [r7, #4]
	tx[1]=0b01100011; // 1000:10[internal_sample_rate/(1+smplrt_div)] (100Hz)
 8001948:	2363      	movs	r3, #99	; 0x63
 800194a:	717b      	strb	r3, [r7, #5]

	if(HAL_SPI_Transmit(&hspi3, tx, 2, HAL_MAX_DELAY)!=HAL_OK)
 800194c:	1d39      	adds	r1, r7, #4
 800194e:	f04f 33ff 	mov.w	r3, #4294967295
 8001952:	2202      	movs	r2, #2
 8001954:	4843      	ldr	r0, [pc, #268]	; (8001a64 <IMUConfigureModule+0x2fc>)
 8001956:	f006 f98d 	bl	8007c74 <HAL_SPI_Transmit>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d002      	beq.n	8001966 <IMUConfigureModule+0x1fe>
		spi_error=1;
 8001960:	4b41      	ldr	r3, [pc, #260]	; (8001a68 <IMUConfigureModule+0x300>)
 8001962:	2201      	movs	r2, #1
 8001964:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 8001966:	2201      	movs	r2, #1
 8001968:	2140      	movs	r1, #64	; 0x40
 800196a:	483d      	ldr	r0, [pc, #244]	; (8001a60 <IMUConfigureModule+0x2f8>)
 800196c:	f003 fcaa 	bl	80052c4 <HAL_GPIO_WritePin>


	// ustawienie rejestru  ACCEL_INTEL_CTRL -------------------------------------------------

	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8001970:	2200      	movs	r2, #0
 8001972:	2140      	movs	r1, #64	; 0x40
 8001974:	483a      	ldr	r0, [pc, #232]	; (8001a60 <IMUConfigureModule+0x2f8>)
 8001976:	f003 fca5 	bl	80052c4 <HAL_GPIO_WritePin>

	tx[0]=0x69|0x80;
 800197a:	23e9      	movs	r3, #233	; 0xe9
 800197c:	713b      	strb	r3, [r7, #4]

	if(HAL_SPI_Transmit(&hspi3, tx, 1, HAL_MAX_DELAY)!=HAL_OK)
 800197e:	1d39      	adds	r1, r7, #4
 8001980:	f04f 33ff 	mov.w	r3, #4294967295
 8001984:	2201      	movs	r2, #1
 8001986:	4837      	ldr	r0, [pc, #220]	; (8001a64 <IMUConfigureModule+0x2fc>)
 8001988:	f006 f974 	bl	8007c74 <HAL_SPI_Transmit>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d002      	beq.n	8001998 <IMUConfigureModule+0x230>
		spi_error=1;
 8001992:	4b35      	ldr	r3, [pc, #212]	; (8001a68 <IMUConfigureModule+0x300>)
 8001994:	2201      	movs	r2, #1
 8001996:	701a      	strb	r2, [r3, #0]
	if(HAL_SPI_Receive(&hspi3, rx, 1, HAL_MAX_DELAY)!=HAL_OK)
 8001998:	4639      	mov	r1, r7
 800199a:	f04f 33ff 	mov.w	r3, #4294967295
 800199e:	2201      	movs	r2, #1
 80019a0:	4830      	ldr	r0, [pc, #192]	; (8001a64 <IMUConfigureModule+0x2fc>)
 80019a2:	f006 fad5 	bl	8007f50 <HAL_SPI_Receive>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d002      	beq.n	80019b2 <IMUConfigureModule+0x24a>
	  	spi_error=1;
 80019ac:	4b2e      	ldr	r3, [pc, #184]	; (8001a68 <IMUConfigureModule+0x300>)
 80019ae:	2201      	movs	r2, #1
 80019b0:	701a      	strb	r2, [r3, #0]

	tx[0]=0x69;
 80019b2:	2369      	movs	r3, #105	; 0x69
 80019b4:	713b      	strb	r3, [r7, #4]
	tx[1]=rx[0]|0b00000010;
 80019b6:	783b      	ldrb	r3, [r7, #0]
 80019b8:	f043 0302 	orr.w	r3, r3, #2
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	717b      	strb	r3, [r7, #5]

	if(HAL_SPI_Transmit(&hspi3, tx, 2, HAL_MAX_DELAY)!=HAL_OK)
 80019c0:	1d39      	adds	r1, r7, #4
 80019c2:	f04f 33ff 	mov.w	r3, #4294967295
 80019c6:	2202      	movs	r2, #2
 80019c8:	4826      	ldr	r0, [pc, #152]	; (8001a64 <IMUConfigureModule+0x2fc>)
 80019ca:	f006 f953 	bl	8007c74 <HAL_SPI_Transmit>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d002      	beq.n	80019da <IMUConfigureModule+0x272>
		spi_error=1;
 80019d4:	4b24      	ldr	r3, [pc, #144]	; (8001a68 <IMUConfigureModule+0x300>)
 80019d6:	2201      	movs	r2, #1
 80019d8:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 80019da:	2201      	movs	r2, #1
 80019dc:	2140      	movs	r1, #64	; 0x40
 80019de:	4820      	ldr	r0, [pc, #128]	; (8001a60 <IMUConfigureModule+0x2f8>)
 80019e0:	f003 fc70 	bl	80052c4 <HAL_GPIO_WritePin>


	// ustawienie rejestru INT_PIN_CFG -------------------------------------------------

	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 80019e4:	2200      	movs	r2, #0
 80019e6:	2140      	movs	r1, #64	; 0x40
 80019e8:	481d      	ldr	r0, [pc, #116]	; (8001a60 <IMUConfigureModule+0x2f8>)
 80019ea:	f003 fc6b 	bl	80052c4 <HAL_GPIO_WritePin>

	tx[0]=0x37|0x80;
 80019ee:	23b7      	movs	r3, #183	; 0xb7
 80019f0:	713b      	strb	r3, [r7, #4]

	if(HAL_SPI_Transmit(&hspi3, tx, 1, HAL_MAX_DELAY)!=HAL_OK)
 80019f2:	1d39      	adds	r1, r7, #4
 80019f4:	f04f 33ff 	mov.w	r3, #4294967295
 80019f8:	2201      	movs	r2, #1
 80019fa:	481a      	ldr	r0, [pc, #104]	; (8001a64 <IMUConfigureModule+0x2fc>)
 80019fc:	f006 f93a 	bl	8007c74 <HAL_SPI_Transmit>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d002      	beq.n	8001a0c <IMUConfigureModule+0x2a4>
		spi_error=1;
 8001a06:	4b18      	ldr	r3, [pc, #96]	; (8001a68 <IMUConfigureModule+0x300>)
 8001a08:	2201      	movs	r2, #1
 8001a0a:	701a      	strb	r2, [r3, #0]
	if(HAL_SPI_Receive(&hspi3, rx, 1, HAL_MAX_DELAY)!=HAL_OK)
 8001a0c:	4639      	mov	r1, r7
 8001a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a12:	2201      	movs	r2, #1
 8001a14:	4813      	ldr	r0, [pc, #76]	; (8001a64 <IMUConfigureModule+0x2fc>)
 8001a16:	f006 fa9b 	bl	8007f50 <HAL_SPI_Receive>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d002      	beq.n	8001a26 <IMUConfigureModule+0x2be>
	  	spi_error=1;
 8001a20:	4b11      	ldr	r3, [pc, #68]	; (8001a68 <IMUConfigureModule+0x300>)
 8001a22:	2201      	movs	r2, #1
 8001a24:	701a      	strb	r2, [r3, #0]

	tx[0]=0x37;
 8001a26:	2337      	movs	r3, #55	; 0x37
 8001a28:	713b      	strb	r3, [r7, #4]
	tx[1]=rx[0]|0b00010000; // interrupt pin held until read, any read operation clears interrupt status
 8001a2a:	783b      	ldrb	r3, [r7, #0]
 8001a2c:	f043 0310 	orr.w	r3, r3, #16
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	717b      	strb	r3, [r7, #5]

	if(HAL_SPI_Transmit(&hspi3, tx, 2, HAL_MAX_DELAY)!=HAL_OK)
 8001a34:	1d39      	adds	r1, r7, #4
 8001a36:	f04f 33ff 	mov.w	r3, #4294967295
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	4809      	ldr	r0, [pc, #36]	; (8001a64 <IMUConfigureModule+0x2fc>)
 8001a3e:	f006 f919 	bl	8007c74 <HAL_SPI_Transmit>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d002      	beq.n	8001a4e <IMUConfigureModule+0x2e6>
		spi_error=1;
 8001a48:	4b07      	ldr	r3, [pc, #28]	; (8001a68 <IMUConfigureModule+0x300>)
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 8001a4e:	2201      	movs	r2, #1
 8001a50:	2140      	movs	r1, #64	; 0x40
 8001a52:	4803      	ldr	r0, [pc, #12]	; (8001a60 <IMUConfigureModule+0x2f8>)
 8001a54:	f003 fc36 	bl	80052c4 <HAL_GPIO_WritePin>

}
 8001a58:	bf00      	nop
 8001a5a:	3708      	adds	r7, #8
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40020400 	.word	0x40020400
 8001a64:	200004c4 	.word	0x200004c4
 8001a68:	20000310 	.word	0x20000310

08001a6c <IMUReadByte>:

uint8_t IMUReadByte(uint8_t addr)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	71fb      	strb	r3, [r7, #7]
	uint8_t rx=0;
 8001a76:	2300      	movs	r3, #0
 8001a78:	73fb      	strb	r3, [r7, #15]
	addr=addr|0x80;
 8001a7a:	79fb      	ldrb	r3, [r7, #7]
 8001a7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8001a84:	2200      	movs	r2, #0
 8001a86:	2140      	movs	r1, #64	; 0x40
 8001a88:	4813      	ldr	r0, [pc, #76]	; (8001ad8 <IMUReadByte+0x6c>)
 8001a8a:	f003 fc1b 	bl	80052c4 <HAL_GPIO_WritePin>

	if(HAL_SPI_Transmit(&hspi3, &addr, 1, HAL_MAX_DELAY)!=HAL_OK)
 8001a8e:	1df9      	adds	r1, r7, #7
 8001a90:	f04f 33ff 	mov.w	r3, #4294967295
 8001a94:	2201      	movs	r2, #1
 8001a96:	4811      	ldr	r0, [pc, #68]	; (8001adc <IMUReadByte+0x70>)
 8001a98:	f006 f8ec 	bl	8007c74 <HAL_SPI_Transmit>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d002      	beq.n	8001aa8 <IMUReadByte+0x3c>
		spi_error=1;
 8001aa2:	4b0f      	ldr	r3, [pc, #60]	; (8001ae0 <IMUReadByte+0x74>)
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	701a      	strb	r2, [r3, #0]
	if(HAL_SPI_Receive(&hspi3, &rx, 1, HAL_MAX_DELAY)!=HAL_OK)
 8001aa8:	f107 010f 	add.w	r1, r7, #15
 8001aac:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	480a      	ldr	r0, [pc, #40]	; (8001adc <IMUReadByte+0x70>)
 8001ab4:	f006 fa4c 	bl	8007f50 <HAL_SPI_Receive>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d002      	beq.n	8001ac4 <IMUReadByte+0x58>
		spi_error=1;
 8001abe:	4b08      	ldr	r3, [pc, #32]	; (8001ae0 <IMUReadByte+0x74>)
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	2140      	movs	r1, #64	; 0x40
 8001ac8:	4803      	ldr	r0, [pc, #12]	; (8001ad8 <IMUReadByte+0x6c>)
 8001aca:	f003 fbfb 	bl	80052c4 <HAL_GPIO_WritePin>

	return rx;
 8001ace:	7bfb      	ldrb	r3, [r7, #15]

}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3710      	adds	r7, #16
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40020400 	.word	0x40020400
 8001adc:	200004c4 	.word	0x200004c4
 8001ae0:	20000310 	.word	0x20000310

08001ae4 <IMURead2BVar>:

int16_t IMURead2BVar(uint8_t addr)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4603      	mov	r3, r0
 8001aec:	71fb      	strb	r3, [r7, #7]
	int16_t data;
	uint8_t rx[]={0,0};
 8001aee:	2300      	movs	r3, #0
 8001af0:	81bb      	strh	r3, [r7, #12]
	addr=addr|0x80;
 8001af2:	79fb      	ldrb	r3, [r7, #7]
 8001af4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8001afc:	2200      	movs	r2, #0
 8001afe:	2140      	movs	r1, #64	; 0x40
 8001b00:	4818      	ldr	r0, [pc, #96]	; (8001b64 <IMURead2BVar+0x80>)
 8001b02:	f003 fbdf 	bl	80052c4 <HAL_GPIO_WritePin>

	if(HAL_SPI_Transmit(&hspi3, &addr, 1, HAL_MAX_DELAY)!=HAL_OK)
 8001b06:	1df9      	adds	r1, r7, #7
 8001b08:	f04f 33ff 	mov.w	r3, #4294967295
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	4816      	ldr	r0, [pc, #88]	; (8001b68 <IMURead2BVar+0x84>)
 8001b10:	f006 f8b0 	bl	8007c74 <HAL_SPI_Transmit>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d002      	beq.n	8001b20 <IMURead2BVar+0x3c>
		spi_error=1;
 8001b1a:	4b14      	ldr	r3, [pc, #80]	; (8001b6c <IMURead2BVar+0x88>)
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	701a      	strb	r2, [r3, #0]
	if(HAL_SPI_Receive(&hspi3, rx, 2, HAL_MAX_DELAY)!=HAL_OK)
 8001b20:	f107 010c 	add.w	r1, r7, #12
 8001b24:	f04f 33ff 	mov.w	r3, #4294967295
 8001b28:	2202      	movs	r2, #2
 8001b2a:	480f      	ldr	r0, [pc, #60]	; (8001b68 <IMURead2BVar+0x84>)
 8001b2c:	f006 fa10 	bl	8007f50 <HAL_SPI_Receive>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d002      	beq.n	8001b3c <IMURead2BVar+0x58>
		spi_error=1;
 8001b36:	4b0d      	ldr	r3, [pc, #52]	; (8001b6c <IMURead2BVar+0x88>)
 8001b38:	2201      	movs	r2, #1
 8001b3a:	701a      	strb	r2, [r3, #0]

	data=(rx[0]<<8)+rx[1];
 8001b3c:	7b3b      	ldrb	r3, [r7, #12]
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	021b      	lsls	r3, r3, #8
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	7b7b      	ldrb	r3, [r7, #13]
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	4413      	add	r3, r2
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	81fb      	strh	r3, [r7, #14]

	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 8001b4e:	2201      	movs	r2, #1
 8001b50:	2140      	movs	r1, #64	; 0x40
 8001b52:	4804      	ldr	r0, [pc, #16]	; (8001b64 <IMURead2BVar+0x80>)
 8001b54:	f003 fbb6 	bl	80052c4 <HAL_GPIO_WritePin>

	return data;
 8001b58:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3710      	adds	r7, #16
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40020400 	.word	0x40020400
 8001b68:	200004c4 	.word	0x200004c4
 8001b6c:	20000310 	.word	0x20000310

08001b70 <IMUReadAcc>:

float IMUReadAcc(uint8_t axis)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	71fb      	strb	r3, [r7, #7]
	switch (axis)		// 1 - oś X, 2- oś Y, 3 - oś Z
 8001b7a:	79fb      	ldrb	r3, [r7, #7]
 8001b7c:	2b03      	cmp	r3, #3
 8001b7e:	d048      	beq.n	8001c12 <IMUReadAcc+0xa2>
 8001b80:	2b03      	cmp	r3, #3
 8001b82:	dc67      	bgt.n	8001c54 <IMUReadAcc+0xe4>
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d002      	beq.n	8001b8e <IMUReadAcc+0x1e>
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d021      	beq.n	8001bd0 <IMUReadAcc+0x60>
 8001b8c:	e062      	b.n	8001c54 <IMUReadAcc+0xe4>
	{
	case 1:
		return ((float)IMURead2BVar(0x3B)*ACC_RESOLUTION)/(float)INT16_MAX;
 8001b8e:	203b      	movs	r0, #59	; 0x3b
 8001b90:	f7ff ffa8 	bl	8001ae4 <IMURead2BVar>
 8001b94:	4603      	mov	r3, r0
 8001b96:	ee07 3a90 	vmov	s15, r3
 8001b9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b9e:	ee17 0a90 	vmov	r0, s15
 8001ba2:	f7fe fcf9 	bl	8000598 <__aeabi_f2d>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	f7fe fb97 	bl	80002dc <__adddf3>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	4610      	mov	r0, r2
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	a32c      	add	r3, pc, #176	; (adr r3, 8001c68 <IMUReadAcc+0xf8>)
 8001bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bbc:	f7fe fe6e 	bl	800089c <__aeabi_ddiv>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	4610      	mov	r0, r2
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	f7ff f816 	bl	8000bf8 <__aeabi_d2f>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	e043      	b.n	8001c58 <IMUReadAcc+0xe8>
		break;
	case 2:
		return ((float)IMURead2BVar(0x3D)*ACC_RESOLUTION)/(float)INT16_MAX;
 8001bd0:	203d      	movs	r0, #61	; 0x3d
 8001bd2:	f7ff ff87 	bl	8001ae4 <IMURead2BVar>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	ee07 3a90 	vmov	s15, r3
 8001bdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001be0:	ee17 0a90 	vmov	r0, s15
 8001be4:	f7fe fcd8 	bl	8000598 <__aeabi_f2d>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	f7fe fb76 	bl	80002dc <__adddf3>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	4610      	mov	r0, r2
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	a31b      	add	r3, pc, #108	; (adr r3, 8001c68 <IMUReadAcc+0xf8>)
 8001bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfe:	f7fe fe4d 	bl	800089c <__aeabi_ddiv>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	4610      	mov	r0, r2
 8001c08:	4619      	mov	r1, r3
 8001c0a:	f7fe fff5 	bl	8000bf8 <__aeabi_d2f>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	e022      	b.n	8001c58 <IMUReadAcc+0xe8>
		break;
	case 3:
		return ((float)IMURead2BVar(0x3F)*ACC_RESOLUTION)/(float)INT16_MAX;
 8001c12:	203f      	movs	r0, #63	; 0x3f
 8001c14:	f7ff ff66 	bl	8001ae4 <IMURead2BVar>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	ee07 3a90 	vmov	s15, r3
 8001c1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c22:	ee17 0a90 	vmov	r0, s15
 8001c26:	f7fe fcb7 	bl	8000598 <__aeabi_f2d>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	f7fe fb55 	bl	80002dc <__adddf3>
 8001c32:	4602      	mov	r2, r0
 8001c34:	460b      	mov	r3, r1
 8001c36:	4610      	mov	r0, r2
 8001c38:	4619      	mov	r1, r3
 8001c3a:	a30b      	add	r3, pc, #44	; (adr r3, 8001c68 <IMUReadAcc+0xf8>)
 8001c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c40:	f7fe fe2c 	bl	800089c <__aeabi_ddiv>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	4610      	mov	r0, r2
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	f7fe ffd4 	bl	8000bf8 <__aeabi_d2f>
 8001c50:	4603      	mov	r3, r0
 8001c52:	e001      	b.n	8001c58 <IMUReadAcc+0xe8>
		break;
	default:
		return 0.0;
 8001c54:	f04f 0300 	mov.w	r3, #0
 8001c58:	ee07 3a90 	vmov	s15, r3
		break;
	}
}
 8001c5c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	00000000 	.word	0x00000000
 8001c6c:	40dfffc0 	.word	0x40dfffc0

08001c70 <IMUReadAllAccData>:

void IMUReadAllAccData(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
	uint8_t rx[6];
	int16_t data[3];
	uint8_t addr = 0x3B|0x80;
 8001c76:	23bb      	movs	r3, #187	; 0xbb
 8001c78:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	2140      	movs	r1, #64	; 0x40
 8001c7e:	4854      	ldr	r0, [pc, #336]	; (8001dd0 <IMUReadAllAccData+0x160>)
 8001c80:	f003 fb20 	bl	80052c4 <HAL_GPIO_WritePin>

	if(HAL_SPI_Transmit(&hspi3, &addr, 1, HAL_MAX_DELAY)!=HAL_OK)
 8001c84:	1df9      	adds	r1, r7, #7
 8001c86:	f04f 33ff 	mov.w	r3, #4294967295
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	4851      	ldr	r0, [pc, #324]	; (8001dd4 <IMUReadAllAccData+0x164>)
 8001c8e:	f005 fff1 	bl	8007c74 <HAL_SPI_Transmit>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d002      	beq.n	8001c9e <IMUReadAllAccData+0x2e>
		spi_error=1;
 8001c98:	4b4f      	ldr	r3, [pc, #316]	; (8001dd8 <IMUReadAllAccData+0x168>)
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	701a      	strb	r2, [r3, #0]
	if(HAL_SPI_Receive(&hspi3, rx, 6, HAL_MAX_DELAY)!=HAL_OK)
 8001c9e:	f107 0110 	add.w	r1, r7, #16
 8001ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca6:	2206      	movs	r2, #6
 8001ca8:	484a      	ldr	r0, [pc, #296]	; (8001dd4 <IMUReadAllAccData+0x164>)
 8001caa:	f006 f951 	bl	8007f50 <HAL_SPI_Receive>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d002      	beq.n	8001cba <IMUReadAllAccData+0x4a>
		spi_error=1;
 8001cb4:	4b48      	ldr	r3, [pc, #288]	; (8001dd8 <IMUReadAllAccData+0x168>)
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 8001cba:	2201      	movs	r2, #1
 8001cbc:	2140      	movs	r1, #64	; 0x40
 8001cbe:	4844      	ldr	r0, [pc, #272]	; (8001dd0 <IMUReadAllAccData+0x160>)
 8001cc0:	f003 fb00 	bl	80052c4 <HAL_GPIO_WritePin>

	data[0]=(rx[0]<<8)+rx[1];	// oś X
 8001cc4:	7c3b      	ldrb	r3, [r7, #16]
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	021b      	lsls	r3, r3, #8
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	7c7b      	ldrb	r3, [r7, #17]
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	4413      	add	r3, r2
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	b21b      	sxth	r3, r3
 8001cd6:	813b      	strh	r3, [r7, #8]
	data[1]=(rx[2]<<8)+rx[3];	// oś Y
 8001cd8:	7cbb      	ldrb	r3, [r7, #18]
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	021b      	lsls	r3, r3, #8
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	7cfb      	ldrb	r3, [r7, #19]
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	4413      	add	r3, r2
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	b21b      	sxth	r3, r3
 8001cea:	817b      	strh	r3, [r7, #10]
	data[2]=(rx[4]<<8)+rx[5];	// oś Z
 8001cec:	7d3b      	ldrb	r3, [r7, #20]
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	021b      	lsls	r3, r3, #8
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	7d7b      	ldrb	r3, [r7, #21]
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	4413      	add	r3, r2
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	b21b      	sxth	r3, r3
 8001cfe:	81bb      	strh	r3, [r7, #12]

	imu_acc_data[0]=((float)data[0]*ACC_RESOLUTION)/(float)INT16_MAX;
 8001d00:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001d04:	ee07 3a90 	vmov	s15, r3
 8001d08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d0c:	ee17 0a90 	vmov	r0, s15
 8001d10:	f7fe fc42 	bl	8000598 <__aeabi_f2d>
 8001d14:	4602      	mov	r2, r0
 8001d16:	460b      	mov	r3, r1
 8001d18:	f7fe fae0 	bl	80002dc <__adddf3>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	460b      	mov	r3, r1
 8001d20:	4610      	mov	r0, r2
 8001d22:	4619      	mov	r1, r3
 8001d24:	a328      	add	r3, pc, #160	; (adr r3, 8001dc8 <IMUReadAllAccData+0x158>)
 8001d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d2a:	f7fe fdb7 	bl	800089c <__aeabi_ddiv>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	460b      	mov	r3, r1
 8001d32:	4610      	mov	r0, r2
 8001d34:	4619      	mov	r1, r3
 8001d36:	f7fe ff5f 	bl	8000bf8 <__aeabi_d2f>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	4a27      	ldr	r2, [pc, #156]	; (8001ddc <IMUReadAllAccData+0x16c>)
 8001d3e:	6013      	str	r3, [r2, #0]
	imu_acc_data[1]=((float)data[1]*ACC_RESOLUTION)/(float)INT16_MAX;
 8001d40:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001d44:	ee07 3a90 	vmov	s15, r3
 8001d48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d4c:	ee17 0a90 	vmov	r0, s15
 8001d50:	f7fe fc22 	bl	8000598 <__aeabi_f2d>
 8001d54:	4602      	mov	r2, r0
 8001d56:	460b      	mov	r3, r1
 8001d58:	f7fe fac0 	bl	80002dc <__adddf3>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	460b      	mov	r3, r1
 8001d60:	4610      	mov	r0, r2
 8001d62:	4619      	mov	r1, r3
 8001d64:	a318      	add	r3, pc, #96	; (adr r3, 8001dc8 <IMUReadAllAccData+0x158>)
 8001d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d6a:	f7fe fd97 	bl	800089c <__aeabi_ddiv>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	460b      	mov	r3, r1
 8001d72:	4610      	mov	r0, r2
 8001d74:	4619      	mov	r1, r3
 8001d76:	f7fe ff3f 	bl	8000bf8 <__aeabi_d2f>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	4a17      	ldr	r2, [pc, #92]	; (8001ddc <IMUReadAllAccData+0x16c>)
 8001d7e:	6053      	str	r3, [r2, #4]
	imu_acc_data[2]=((float)data[2]*ACC_RESOLUTION)/(float)INT16_MAX;
 8001d80:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001d84:	ee07 3a90 	vmov	s15, r3
 8001d88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d8c:	ee17 0a90 	vmov	r0, s15
 8001d90:	f7fe fc02 	bl	8000598 <__aeabi_f2d>
 8001d94:	4602      	mov	r2, r0
 8001d96:	460b      	mov	r3, r1
 8001d98:	f7fe faa0 	bl	80002dc <__adddf3>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	460b      	mov	r3, r1
 8001da0:	4610      	mov	r0, r2
 8001da2:	4619      	mov	r1, r3
 8001da4:	a308      	add	r3, pc, #32	; (adr r3, 8001dc8 <IMUReadAllAccData+0x158>)
 8001da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001daa:	f7fe fd77 	bl	800089c <__aeabi_ddiv>
 8001dae:	4602      	mov	r2, r0
 8001db0:	460b      	mov	r3, r1
 8001db2:	4610      	mov	r0, r2
 8001db4:	4619      	mov	r1, r3
 8001db6:	f7fe ff1f 	bl	8000bf8 <__aeabi_d2f>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	4a07      	ldr	r2, [pc, #28]	; (8001ddc <IMUReadAllAccData+0x16c>)
 8001dbe:	6093      	str	r3, [r2, #8]
}
 8001dc0:	bf00      	nop
 8001dc2:	3718      	adds	r7, #24
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	00000000 	.word	0x00000000
 8001dcc:	40dfffc0 	.word	0x40dfffc0
 8001dd0:	40020400 	.word	0x40020400
 8001dd4:	200004c4 	.word	0x200004c4
 8001dd8:	20000310 	.word	0x20000310
 8001ddc:	200004b8 	.word	0x200004b8

08001de0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == IMU_INT_Pin)
 8001dea:	88fb      	ldrh	r3, [r7, #6]
 8001dec:	2b80      	cmp	r3, #128	; 0x80
 8001dee:	d10f      	bne.n	8001e10 <HAL_GPIO_EXTI_Callback+0x30>
	{
		test3_imu=IMUReadByte(0x3A);
 8001df0:	203a      	movs	r0, #58	; 0x3a
 8001df2:	f7ff fe3b 	bl	8001a6c <IMUReadByte>
 8001df6:	4603      	mov	r3, r0
 8001df8:	461a      	mov	r2, r3
 8001dfa:	4b07      	ldr	r3, [pc, #28]	; (8001e18 <HAL_GPIO_EXTI_Callback+0x38>)
 8001dfc:	701a      	strb	r2, [r3, #0]
		test_counter++;
 8001dfe:	4b07      	ldr	r3, [pc, #28]	; (8001e1c <HAL_GPIO_EXTI_Callback+0x3c>)
 8001e00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	3301      	adds	r3, #1
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	b21a      	sxth	r2, r3
 8001e0c:	4b03      	ldr	r3, [pc, #12]	; (8001e1c <HAL_GPIO_EXTI_Callback+0x3c>)
 8001e0e:	801a      	strh	r2, [r3, #0]
	}
}
 8001e10:	bf00      	nop
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	2000052a 	.word	0x2000052a
 8001e1c:	2000052c 	.word	0x2000052c

08001e20 <KTIR_ControlError>:

#include "ktir.h"


int16_t KTIR_ControlError(void)
{
 8001e20:	b4b0      	push	{r4, r5, r7}
 8001e22:	b08d      	sub	sp, #52	; 0x34
 8001e24:	af00      	add	r7, sp, #0
	int16_t control_error = 0;
 8001e26:	2300      	movs	r3, #0
 8001e28:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t track_detected = 0;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	85bb      	strh	r3, [r7, #44]	; 0x2c
	int16_t track_coefficients[KTIR_NUM]={-7,-6,-5,-60,-30,-10,10,30,60,5,6,7};
 8001e2e:	4b2b      	ldr	r3, [pc, #172]	; (8001edc <KTIR_ControlError+0xbc>)
 8001e30:	f107 040c 	add.w	r4, r7, #12
 8001e34:	461d      	mov	r5, r3
 8001e36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e3a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001e3e:	e884 0003 	stmia.w	r4, {r0, r1}
	uint8_t track_detection_array[KTIR_NUM]={0,0,0,0,0,0,0,0,0,0,0,0};
 8001e42:	4a27      	ldr	r2, [pc, #156]	; (8001ee0 <KTIR_ControlError+0xc0>)
 8001e44:	463b      	mov	r3, r7
 8001e46:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e48:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	for(int i=3;i<6+3;i++)
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e50:	e017      	b.n	8001e82 <KTIR_ControlError+0x62>
	{
		if(ktir_array[i]<KTIR_DETECTION_THRESHOLD)
 8001e52:	4a24      	ldr	r2, [pc, #144]	; (8001ee4 <KTIR_ControlError+0xc4>)
 8001e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e5a:	f640 52ab 	movw	r2, #3499	; 0xdab
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d805      	bhi.n	8001e6e <KTIR_ControlError+0x4e>
			track_detection_array[i]=0;
 8001e62:	463a      	mov	r2, r7
 8001e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e66:	4413      	add	r3, r2
 8001e68:	2200      	movs	r2, #0
 8001e6a:	701a      	strb	r2, [r3, #0]
 8001e6c:	e006      	b.n	8001e7c <KTIR_ControlError+0x5c>
		else
		{
			track_detection_array[i]=1;
 8001e6e:	463a      	mov	r2, r7
 8001e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e72:	4413      	add	r3, r2
 8001e74:	2201      	movs	r2, #1
 8001e76:	701a      	strb	r2, [r3, #0]
			track_detected=1;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	85bb      	strh	r3, [r7, #44]	; 0x2c
	for(int i=3;i<6+3;i++)
 8001e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e7e:	3301      	adds	r3, #1
 8001e80:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e84:	2b08      	cmp	r3, #8
 8001e86:	dde4      	ble.n	8001e52 <KTIR_ControlError+0x32>
		}
	}

	if(track_detected==0)
 8001e88:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d102      	bne.n	8001e94 <KTIR_ControlError+0x74>
	{
		return 32000;
 8001e8e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8001e92:	e01e      	b.n	8001ed2 <KTIR_ControlError+0xb2>
	}
	else
	{
		for(int i=0;i<KTIR_NUM;i++)
 8001e94:	2300      	movs	r3, #0
 8001e96:	627b      	str	r3, [r7, #36]	; 0x24
 8001e98:	e016      	b.n	8001ec8 <KTIR_ControlError+0xa8>
		{
			control_error=control_error+(track_detection_array[i]*track_coefficients[i]);
 8001e9a:	463a      	mov	r2, r7
 8001e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9e:	4413      	add	r3, r2
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001eac:	440b      	add	r3, r1
 8001eae:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	fb12 f303 	smulbb	r3, r2, r3
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ebc:	4413      	add	r3, r2
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		for(int i=0;i<KTIR_NUM;i++)
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eca:	2b0b      	cmp	r3, #11
 8001ecc:	dde5      	ble.n	8001e9a <KTIR_ControlError+0x7a>
			//control_error=control_error+2;
		}
	}

	return control_error;
 8001ece:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3734      	adds	r7, #52	; 0x34
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bcb0      	pop	{r4, r5, r7}
 8001eda:	4770      	bx	lr
 8001edc:	0800edb0 	.word	0x0800edb0
 8001ee0:	0800edc8 	.word	0x0800edc8
 8001ee4:	20000494 	.word	0x20000494

08001ee8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

	enc_langle=0;
 8001eee:	4b6b      	ldr	r3, [pc, #428]	; (800209c <main+0x1b4>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	801a      	strh	r2, [r3, #0]
	enc_langle_old=0;
 8001ef4:	4b6a      	ldr	r3, [pc, #424]	; (80020a0 <main+0x1b8>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	801a      	strh	r2, [r3, #0]
	enc_ldiff=0;
 8001efa:	4b6a      	ldr	r3, [pc, #424]	; (80020a4 <main+0x1bc>)
 8001efc:	f04f 0200 	mov.w	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
	enc_ldiff_raw=0;
 8001f02:	4b69      	ldr	r3, [pc, #420]	; (80020a8 <main+0x1c0>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	801a      	strh	r2, [r3, #0]
	enc_rangle=0;
 8001f08:	4b68      	ldr	r3, [pc, #416]	; (80020ac <main+0x1c4>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	801a      	strh	r2, [r3, #0]
	enc_rangle_old=0;
 8001f0e:	4b68      	ldr	r3, [pc, #416]	; (80020b0 <main+0x1c8>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	801a      	strh	r2, [r3, #0]
	enc_rdiff=0;
 8001f14:	4b67      	ldr	r3, [pc, #412]	; (80020b4 <main+0x1cc>)
 8001f16:	f04f 0200 	mov.w	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
	enc_rdiff_raw=0;
 8001f1c:	4b66      	ldr	r3, [pc, #408]	; (80020b8 <main+0x1d0>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	801a      	strh	r2, [r3, #0]

	pid_k_coefficient=2.0;
 8001f22:	4b66      	ldr	r3, [pc, #408]	; (80020bc <main+0x1d4>)
 8001f24:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f28:	601a      	str	r2, [r3, #0]
	pid_Td_coefficient=1.0;
 8001f2a:	4b65      	ldr	r3, [pc, #404]	; (80020c0 <main+0x1d8>)
 8001f2c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001f30:	601a      	str	r2, [r3, #0]
	pid_basic_velocity=250;
 8001f32:	4b64      	ldr	r3, [pc, #400]	; (80020c4 <main+0x1dc>)
 8001f34:	22fa      	movs	r2, #250	; 0xfa
 8001f36:	801a      	strh	r2, [r3, #0]
	pid_u_track_lost=200;
 8001f38:	4b63      	ldr	r3, [pc, #396]	; (80020c8 <main+0x1e0>)
 8001f3a:	22c8      	movs	r2, #200	; 0xc8
 8001f3c:	801a      	strh	r2, [r3, #0]
	pid_target_l=0;
 8001f3e:	4b63      	ldr	r3, [pc, #396]	; (80020cc <main+0x1e4>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	801a      	strh	r2, [r3, #0]
	pid_target_r=0;
 8001f44:	4b62      	ldr	r3, [pc, #392]	; (80020d0 <main+0x1e8>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	801a      	strh	r2, [r3, #0]

	pid_motor_k=0.2;
 8001f4a:	4b62      	ldr	r3, [pc, #392]	; (80020d4 <main+0x1ec>)
 8001f4c:	4a62      	ldr	r2, [pc, #392]	; (80020d8 <main+0x1f0>)
 8001f4e:	601a      	str	r2, [r3, #0]
	pid_motor_Ti=950;
 8001f50:	4b62      	ldr	r3, [pc, #392]	; (80020dc <main+0x1f4>)
 8001f52:	f240 32b6 	movw	r2, #950	; 0x3b6
 8001f56:	801a      	strh	r2, [r3, #0]
	pid_motor_Td=0.0;
 8001f58:	4b61      	ldr	r3, [pc, #388]	; (80020e0 <main+0x1f8>)
 8001f5a:	f04f 0200 	mov.w	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]

	pid_alpha=0.001;			//0.005
 8001f60:	4b60      	ldr	r3, [pc, #384]	; (80020e4 <main+0x1fc>)
 8001f62:	4a61      	ldr	r2, [pc, #388]	; (80020e8 <main+0x200>)
 8001f64:	601a      	str	r2, [r3, #0]
	pid_beta=0.000000001;		//0.000001
 8001f66:	4b61      	ldr	r3, [pc, #388]	; (80020ec <main+0x204>)
 8001f68:	4a61      	ldr	r2, [pc, #388]	; (80020f0 <main+0x208>)
 8001f6a:	601a      	str	r2, [r3, #0]

	spi_error=0;
 8001f6c:	4b61      	ldr	r3, [pc, #388]	; (80020f4 <main+0x20c>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	701a      	strb	r2, [r3, #0]
	imu_acc_data[0]=0.0;
 8001f72:	4b61      	ldr	r3, [pc, #388]	; (80020f8 <main+0x210>)
 8001f74:	f04f 0200 	mov.w	r2, #0
 8001f78:	601a      	str	r2, [r3, #0]
	imu_acc_data[1]=0.0;
 8001f7a:	4b5f      	ldr	r3, [pc, #380]	; (80020f8 <main+0x210>)
 8001f7c:	f04f 0200 	mov.w	r2, #0
 8001f80:	605a      	str	r2, [r3, #4]
	imu_acc_data[2]=0.0;
 8001f82:	4b5d      	ldr	r3, [pc, #372]	; (80020f8 <main+0x210>)
 8001f84:	f04f 0200 	mov.w	r2, #0
 8001f88:	609a      	str	r2, [r3, #8]


	temp01=0.0;
 8001f8a:	4b5c      	ldr	r3, [pc, #368]	; (80020fc <main+0x214>)
 8001f8c:	f04f 0200 	mov.w	r2, #0
 8001f90:	601a      	str	r2, [r3, #0]
	prev_ui_l=0.0;
 8001f92:	4b5b      	ldr	r3, [pc, #364]	; (8002100 <main+0x218>)
 8001f94:	f04f 0200 	mov.w	r2, #0
 8001f98:	601a      	str	r2, [r3, #0]
	pid_lmotor_e=0.0;
 8001f9a:	4b5a      	ldr	r3, [pc, #360]	; (8002104 <main+0x21c>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	801a      	strh	r2, [r3, #0]
	test_imu=0;
 8001fa0:	4b59      	ldr	r3, [pc, #356]	; (8002108 <main+0x220>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	801a      	strh	r2, [r3, #0]
	test2_imu=0.0;
 8001fa6:	4b59      	ldr	r3, [pc, #356]	; (800210c <main+0x224>)
 8001fa8:	f04f 0200 	mov.w	r2, #0
 8001fac:	601a      	str	r2, [r3, #0]
	test3_imu=0;
 8001fae:	4b58      	ldr	r3, [pc, #352]	; (8002110 <main+0x228>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	701a      	strb	r2, [r3, #0]
	test_counter=0;
 8001fb4:	4b57      	ldr	r3, [pc, #348]	; (8002114 <main+0x22c>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fba:	f001 fe04 	bl	8003bc6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fbe:	f000 f8c5 	bl	800214c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fc2:	f000 fd2b 	bl	8002a1c <MX_GPIO_Init>
  MX_DMA_Init();
 8001fc6:	f000 fcfb 	bl	80029c0 <MX_DMA_Init>
  MX_SPI1_Init();
 8001fca:	f000 fa89 	bl	80024e0 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001fce:	f000 fac5 	bl	800255c <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8001fd2:	f000 fcc5 	bl	8002960 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001fd6:	f000 f951 	bl	800227c <MX_ADC1_Init>
  MX_SPI3_Init();
 8001fda:	f000 fafd 	bl	80025d8 <MX_SPI3_Init>
  MX_TIM1_Init();
 8001fde:	f000 fb39 	bl	8002654 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001fe2:	f000 fbc7 	bl	8002774 <MX_TIM2_Init>
  MX_RTC_Init();
 8001fe6:	f000 fa35 	bl	8002454 <MX_RTC_Init>
  MX_SDMMC1_SD_Init();
 8001fea:	f000 fa59 	bl	80024a0 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8001fee:	f009 fd53 	bl	800ba98 <MX_FATFS_Init>
  MX_TIM3_Init();
 8001ff2:	f000 fc19 	bl	8002828 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001ff6:	f000 fc65 	bl	80028c4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	4846      	ldr	r0, [pc, #280]	; (8002118 <main+0x230>)
 8001ffe:	f006 fdf9 	bl	8008bf4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002002:	2100      	movs	r1, #0
 8002004:	4845      	ldr	r0, [pc, #276]	; (800211c <main+0x234>)
 8002006:	f006 fdf5 	bl	8008bf4 <HAL_TIM_PWM_Start>
  //HAL_TIM_Base_Start_IT(&htim3);
  //HAL_TIM_Base_Start_IT(&htim4);
  HAL_UART_Receive_IT(&huart1, uart_received, 6);
 800200a:	2206      	movs	r2, #6
 800200c:	4944      	ldr	r1, [pc, #272]	; (8002120 <main+0x238>)
 800200e:	4845      	ldr	r0, [pc, #276]	; (8002124 <main+0x23c>)
 8002010:	f007 ff9a 	bl	8009f48 <HAL_UART_Receive_IT>
  HAL_ADC_Start_DMA(&hadc1, ktir_array, KTIR_NUM);
 8002014:	220c      	movs	r2, #12
 8002016:	4944      	ldr	r1, [pc, #272]	; (8002128 <main+0x240>)
 8002018:	4844      	ldr	r0, [pc, #272]	; (800212c <main+0x244>)
 800201a:	f001 fe99 	bl	8003d50 <HAL_ADC_Start_DMA>

  ENCWriting(&hspi1, SPI1_CS_GPIO_Port, SPI1_CS_Pin, 0x0018, 0x0005);
 800201e:	2305      	movs	r3, #5
 8002020:	9300      	str	r3, [sp, #0]
 8002022:	2318      	movs	r3, #24
 8002024:	2204      	movs	r2, #4
 8002026:	4942      	ldr	r1, [pc, #264]	; (8002130 <main+0x248>)
 8002028:	4842      	ldr	r0, [pc, #264]	; (8002134 <main+0x24c>)
 800202a:	f7ff fb4f 	bl	80016cc <ENCWriting>
	  //spi_error=1;

  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
*/

  IMUConfigureModule();
 800202e:	f7ff fb9b 	bl	8001768 <IMUConfigureModule>


  tx1[0]=0x3B|0x80;
 8002032:	4b41      	ldr	r3, [pc, #260]	; (8002138 <main+0x250>)
 8002034:	22bb      	movs	r2, #187	; 0xbb
 8002036:	701a      	strb	r2, [r3, #0]
  rx1[0]=0;
 8002038:	4b40      	ldr	r3, [pc, #256]	; (800213c <main+0x254>)
 800203a:	2200      	movs	r2, #0
 800203c:	701a      	strb	r2, [r3, #0]
  rx1[1]=0;
 800203e:	4b3f      	ldr	r3, [pc, #252]	; (800213c <main+0x254>)
 8002040:	2200      	movs	r2, #0
 8002042:	705a      	strb	r2, [r3, #1]
  HAL_Delay(1000);
 8002044:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002048:	f001 fe1a 	bl	8003c80 <HAL_Delay>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800204c:	2017      	movs	r0, #23
 800204e:	f002 fb54 	bl	80046fa <HAL_NVIC_EnableIRQ>
		  spi_error=1;
		  */


	  //test_imu=IMURead2BVar(0x3F);
	  test2_imu=IMUReadAcc(3);
 8002052:	2003      	movs	r0, #3
 8002054:	f7ff fd8c 	bl	8001b70 <IMUReadAcc>
 8002058:	eef0 7a40 	vmov.f32	s15, s0
 800205c:	4b2b      	ldr	r3, [pc, #172]	; (800210c <main+0x224>)
 800205e:	edc3 7a00 	vstr	s15, [r3]
	  IMUReadAllAccData();
 8002062:	f7ff fe05 	bl	8001c70 <IMUReadAllAccData>
	  //uart_size=sprintf(uart_data, "X axis: %4.4f \n\rY axis: %4.4f \n\rZ axis: %4.4f \n\r \n\r", imu_acc_data[0], imu_acc_data[1], imu_acc_data[2]);
	  //HAL_UART_Transmit_IT(&huart1, uart_data, uart_size);

	  //HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);

	  HAL_Delay(1000);
 8002066:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800206a:	f001 fe09 	bl	8003c80 <HAL_Delay>
	  uart_size=sprintf(uart_data, "Counter: %6d \n\r", test_counter);
 800206e:	4b29      	ldr	r3, [pc, #164]	; (8002114 <main+0x22c>)
 8002070:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002074:	461a      	mov	r2, r3
 8002076:	4932      	ldr	r1, [pc, #200]	; (8002140 <main+0x258>)
 8002078:	4832      	ldr	r0, [pc, #200]	; (8002144 <main+0x25c>)
 800207a:	f00a fc5f 	bl	800c93c <siprintf>
 800207e:	4603      	mov	r3, r0
 8002080:	b29a      	uxth	r2, r3
 8002082:	4b31      	ldr	r3, [pc, #196]	; (8002148 <main+0x260>)
 8002084:	801a      	strh	r2, [r3, #0]
	  HAL_UART_Transmit_IT(&huart1, uart_data, uart_size);
 8002086:	4b30      	ldr	r3, [pc, #192]	; (8002148 <main+0x260>)
 8002088:	881b      	ldrh	r3, [r3, #0]
 800208a:	461a      	mov	r2, r3
 800208c:	492d      	ldr	r1, [pc, #180]	; (8002144 <main+0x25c>)
 800208e:	4825      	ldr	r0, [pc, #148]	; (8002124 <main+0x23c>)
 8002090:	f007 fefe 	bl	8009e90 <HAL_UART_Transmit_IT>
	  test_counter=0;
 8002094:	4b1f      	ldr	r3, [pc, #124]	; (8002114 <main+0x22c>)
 8002096:	2200      	movs	r2, #0
 8002098:	801a      	strh	r2, [r3, #0]
  {
 800209a:	e7da      	b.n	8002052 <main+0x16a>
 800209c:	2000037a 	.word	0x2000037a
 80020a0:	20000380 	.word	0x20000380
 80020a4:	20000374 	.word	0x20000374
 80020a8:	20000370 	.word	0x20000370
 80020ac:	200004ac 	.word	0x200004ac
 80020b0:	2000048c 	.word	0x2000048c
 80020b4:	20000314 	.word	0x20000314
 80020b8:	2000025c 	.word	0x2000025c
 80020bc:	20000258 	.word	0x20000258
 80020c0:	200004b0 	.word	0x200004b0
 80020c4:	20000312 	.word	0x20000312
 80020c8:	20000378 	.word	0x20000378
 80020cc:	2000037e 	.word	0x2000037e
 80020d0:	2000048a 	.word	0x2000048a
 80020d4:	20000254 	.word	0x20000254
 80020d8:	3e4ccccd 	.word	0x3e4ccccd
 80020dc:	200003d4 	.word	0x200003d4
 80020e0:	20000364 	.word	0x20000364
 80020e4:	20000490 	.word	0x20000490
 80020e8:	3a83126f 	.word	0x3a83126f
 80020ec:	200003d0 	.word	0x200003d0
 80020f0:	3089705f 	.word	0x3089705f
 80020f4:	20000310 	.word	0x20000310
 80020f8:	200004b8 	.word	0x200004b8
 80020fc:	20000368 	.word	0x20000368
 8002100:	2000036c 	.word	0x2000036c
 8002104:	20000382 	.word	0x20000382
 8002108:	20000528 	.word	0x20000528
 800210c:	200004b4 	.word	0x200004b4
 8002110:	2000052a 	.word	0x2000052a
 8002114:	2000052c 	.word	0x2000052c
 8002118:	20000384 	.word	0x20000384
 800211c:	2000043c 	.word	0x2000043c
 8002120:	200006c8 	.word	0x200006c8
 8002124:	200006d0 	.word	0x200006d0
 8002128:	20000494 	.word	0x20000494
 800212c:	20000680 	.word	0x20000680
 8002130:	40020400 	.word	0x40020400
 8002134:	200003d8 	.word	0x200003d8
 8002138:	20000000 	.word	0x20000000
 800213c:	20000230 	.word	0x20000230
 8002140:	0800edd4 	.word	0x0800edd4
 8002144:	200005b8 	.word	0x200005b8
 8002148:	20000530 	.word	0x20000530

0800214c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b0b4      	sub	sp, #208	; 0xd0
 8002150:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002152:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002156:	2230      	movs	r2, #48	; 0x30
 8002158:	2100      	movs	r1, #0
 800215a:	4618      	mov	r0, r3
 800215c:	f009 ff7c 	bl	800c058 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002160:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	60da      	str	r2, [r3, #12]
 800216e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002170:	f107 030c 	add.w	r3, r7, #12
 8002174:	2280      	movs	r2, #128	; 0x80
 8002176:	2100      	movs	r1, #0
 8002178:	4618      	mov	r0, r3
 800217a:	f009 ff6d 	bl	800c058 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800217e:	4b3c      	ldr	r3, [pc, #240]	; (8002270 <SystemClock_Config+0x124>)
 8002180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002182:	4a3b      	ldr	r2, [pc, #236]	; (8002270 <SystemClock_Config+0x124>)
 8002184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002188:	6413      	str	r3, [r2, #64]	; 0x40
 800218a:	4b39      	ldr	r3, [pc, #228]	; (8002270 <SystemClock_Config+0x124>)
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002192:	60bb      	str	r3, [r7, #8]
 8002194:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002196:	4b37      	ldr	r3, [pc, #220]	; (8002274 <SystemClock_Config+0x128>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800219e:	4a35      	ldr	r2, [pc, #212]	; (8002274 <SystemClock_Config+0x128>)
 80021a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021a4:	6013      	str	r3, [r2, #0]
 80021a6:	4b33      	ldr	r3, [pc, #204]	; (8002274 <SystemClock_Config+0x128>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80021ae:	607b      	str	r3, [r7, #4]
 80021b0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80021b2:	2309      	movs	r3, #9
 80021b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80021c0:	2301      	movs	r3, #1
 80021c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021c6:	2302      	movs	r3, #2
 80021c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021cc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 80021d4:	2308      	movs	r3, #8
 80021d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 108;
 80021da:	236c      	movs	r3, #108	; 0x6c
 80021dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021e0:	2302      	movs	r3, #2
 80021e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 12;
 80021e6:	230c      	movs	r3, #12
 80021e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021ec:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80021f0:	4618      	mov	r0, r3
 80021f2:	f003 f899 	bl	8005328 <HAL_RCC_OscConfig>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80021fc:	f000 fcb8 	bl	8002b70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002200:	230f      	movs	r3, #15
 8002202:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002206:	2302      	movs	r3, #2
 8002208:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800220c:	2300      	movs	r3, #0
 800220e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002212:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002216:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800221a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800221e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002222:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002226:	2103      	movs	r1, #3
 8002228:	4618      	mov	r0, r3
 800222a:	f003 fb21 	bl	8005870 <HAL_RCC_ClockConfig>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8002234:	f000 fc9c 	bl	8002b70 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 8002238:	4b0f      	ldr	r3, [pc, #60]	; (8002278 <SystemClock_Config+0x12c>)
 800223a:	60fb      	str	r3, [r7, #12]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800223c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002240:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002242:	2300      	movs	r3, #0
 8002244:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002246:	2300      	movs	r3, #0
 8002248:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800224c:	2300      	movs	r3, #0
 800224e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002252:	f107 030c 	add.w	r3, r7, #12
 8002256:	4618      	mov	r0, r3
 8002258:	f003 fd0a 	bl	8005c70 <HAL_RCCEx_PeriphCLKConfig>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <SystemClock_Config+0x11a>
  {
    Error_Handler();
 8002262:	f000 fc85 	bl	8002b70 <Error_Handler>
  }
}
 8002266:	bf00      	nop
 8002268:	37d0      	adds	r7, #208	; 0xd0
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40023800 	.word	0x40023800
 8002274:	40007000 	.word	0x40007000
 8002278:	00a00060 	.word	0x00a00060

0800227c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002282:	463b      	mov	r3, r7
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	605a      	str	r2, [r3, #4]
 800228a:	609a      	str	r2, [r3, #8]
 800228c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800228e:	4b6e      	ldr	r3, [pc, #440]	; (8002448 <MX_ADC1_Init+0x1cc>)
 8002290:	4a6e      	ldr	r2, [pc, #440]	; (800244c <MX_ADC1_Init+0x1d0>)
 8002292:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8002294:	4b6c      	ldr	r3, [pc, #432]	; (8002448 <MX_ADC1_Init+0x1cc>)
 8002296:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800229a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800229c:	4b6a      	ldr	r3, [pc, #424]	; (8002448 <MX_ADC1_Init+0x1cc>)
 800229e:	2200      	movs	r2, #0
 80022a0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80022a2:	4b69      	ldr	r3, [pc, #420]	; (8002448 <MX_ADC1_Init+0x1cc>)
 80022a4:	2201      	movs	r2, #1
 80022a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80022a8:	4b67      	ldr	r3, [pc, #412]	; (8002448 <MX_ADC1_Init+0x1cc>)
 80022aa:	2201      	movs	r2, #1
 80022ac:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80022ae:	4b66      	ldr	r3, [pc, #408]	; (8002448 <MX_ADC1_Init+0x1cc>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80022b6:	4b64      	ldr	r3, [pc, #400]	; (8002448 <MX_ADC1_Init+0x1cc>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80022bc:	4b62      	ldr	r3, [pc, #392]	; (8002448 <MX_ADC1_Init+0x1cc>)
 80022be:	4a64      	ldr	r2, [pc, #400]	; (8002450 <MX_ADC1_Init+0x1d4>)
 80022c0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80022c2:	4b61      	ldr	r3, [pc, #388]	; (8002448 <MX_ADC1_Init+0x1cc>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 12;
 80022c8:	4b5f      	ldr	r3, [pc, #380]	; (8002448 <MX_ADC1_Init+0x1cc>)
 80022ca:	220c      	movs	r2, #12
 80022cc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80022ce:	4b5e      	ldr	r3, [pc, #376]	; (8002448 <MX_ADC1_Init+0x1cc>)
 80022d0:	2201      	movs	r2, #1
 80022d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80022d6:	4b5c      	ldr	r3, [pc, #368]	; (8002448 <MX_ADC1_Init+0x1cc>)
 80022d8:	2201      	movs	r2, #1
 80022da:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80022dc:	485a      	ldr	r0, [pc, #360]	; (8002448 <MX_ADC1_Init+0x1cc>)
 80022de:	f001 fcf3 	bl	8003cc8 <HAL_ADC_Init>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80022e8:	f000 fc42 	bl	8002b70 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80022ec:	230a      	movs	r3, #10
 80022ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80022f0:	2301      	movs	r3, #1
 80022f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 80022f4:	2305      	movs	r3, #5
 80022f6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022f8:	463b      	mov	r3, r7
 80022fa:	4619      	mov	r1, r3
 80022fc:	4852      	ldr	r0, [pc, #328]	; (8002448 <MX_ADC1_Init+0x1cc>)
 80022fe:	f001 fe3f 	bl	8003f80 <HAL_ADC_ConfigChannel>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002308:	f000 fc32 	bl	8002b70 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800230c:	230b      	movs	r3, #11
 800230e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002310:	2302      	movs	r3, #2
 8002312:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002314:	463b      	mov	r3, r7
 8002316:	4619      	mov	r1, r3
 8002318:	484b      	ldr	r0, [pc, #300]	; (8002448 <MX_ADC1_Init+0x1cc>)
 800231a:	f001 fe31 	bl	8003f80 <HAL_ADC_ConfigChannel>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002324:	f000 fc24 	bl	8002b70 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002328:	230c      	movs	r3, #12
 800232a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800232c:	2303      	movs	r3, #3
 800232e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002330:	463b      	mov	r3, r7
 8002332:	4619      	mov	r1, r3
 8002334:	4844      	ldr	r0, [pc, #272]	; (8002448 <MX_ADC1_Init+0x1cc>)
 8002336:	f001 fe23 	bl	8003f80 <HAL_ADC_ConfigChannel>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8002340:	f000 fc16 	bl	8002b70 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8002344:	230d      	movs	r3, #13
 8002346:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002348:	2304      	movs	r3, #4
 800234a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800234c:	463b      	mov	r3, r7
 800234e:	4619      	mov	r1, r3
 8002350:	483d      	ldr	r0, [pc, #244]	; (8002448 <MX_ADC1_Init+0x1cc>)
 8002352:	f001 fe15 	bl	8003f80 <HAL_ADC_ConfigChannel>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 800235c:	f000 fc08 	bl	8002b70 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002360:	2300      	movs	r3, #0
 8002362:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8002364:	2305      	movs	r3, #5
 8002366:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002368:	463b      	mov	r3, r7
 800236a:	4619      	mov	r1, r3
 800236c:	4836      	ldr	r0, [pc, #216]	; (8002448 <MX_ADC1_Init+0x1cc>)
 800236e:	f001 fe07 	bl	8003f80 <HAL_ADC_ConfigChannel>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8002378:	f000 fbfa 	bl	8002b70 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800237c:	2301      	movs	r3, #1
 800237e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8002380:	2306      	movs	r3, #6
 8002382:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002384:	463b      	mov	r3, r7
 8002386:	4619      	mov	r1, r3
 8002388:	482f      	ldr	r0, [pc, #188]	; (8002448 <MX_ADC1_Init+0x1cc>)
 800238a:	f001 fdf9 	bl	8003f80 <HAL_ADC_ConfigChannel>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8002394:	f000 fbec 	bl	8002b70 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002398:	2302      	movs	r3, #2
 800239a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800239c:	2307      	movs	r3, #7
 800239e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023a0:	463b      	mov	r3, r7
 80023a2:	4619      	mov	r1, r3
 80023a4:	4828      	ldr	r0, [pc, #160]	; (8002448 <MX_ADC1_Init+0x1cc>)
 80023a6:	f001 fdeb 	bl	8003f80 <HAL_ADC_ConfigChannel>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 80023b0:	f000 fbde 	bl	8002b70 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80023b4:	2303      	movs	r3, #3
 80023b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80023b8:	2308      	movs	r3, #8
 80023ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023bc:	463b      	mov	r3, r7
 80023be:	4619      	mov	r1, r3
 80023c0:	4821      	ldr	r0, [pc, #132]	; (8002448 <MX_ADC1_Init+0x1cc>)
 80023c2:	f001 fddd 	bl	8003f80 <HAL_ADC_ConfigChannel>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 80023cc:	f000 fbd0 	bl	8002b70 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80023d0:	2304      	movs	r3, #4
 80023d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80023d4:	2309      	movs	r3, #9
 80023d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023d8:	463b      	mov	r3, r7
 80023da:	4619      	mov	r1, r3
 80023dc:	481a      	ldr	r0, [pc, #104]	; (8002448 <MX_ADC1_Init+0x1cc>)
 80023de:	f001 fdcf 	bl	8003f80 <HAL_ADC_ConfigChannel>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80023e8:	f000 fbc2 	bl	8002b70 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80023ec:	230e      	movs	r3, #14
 80023ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80023f0:	230a      	movs	r3, #10
 80023f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023f4:	463b      	mov	r3, r7
 80023f6:	4619      	mov	r1, r3
 80023f8:	4813      	ldr	r0, [pc, #76]	; (8002448 <MX_ADC1_Init+0x1cc>)
 80023fa:	f001 fdc1 	bl	8003f80 <HAL_ADC_ConfigChannel>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8002404:	f000 fbb4 	bl	8002b70 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002408:	2308      	movs	r3, #8
 800240a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 800240c:	230b      	movs	r3, #11
 800240e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002410:	463b      	mov	r3, r7
 8002412:	4619      	mov	r1, r3
 8002414:	480c      	ldr	r0, [pc, #48]	; (8002448 <MX_ADC1_Init+0x1cc>)
 8002416:	f001 fdb3 	bl	8003f80 <HAL_ADC_ConfigChannel>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8002420:	f000 fba6 	bl	8002b70 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002424:	2309      	movs	r3, #9
 8002426:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8002428:	230c      	movs	r3, #12
 800242a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800242c:	463b      	mov	r3, r7
 800242e:	4619      	mov	r1, r3
 8002430:	4805      	ldr	r0, [pc, #20]	; (8002448 <MX_ADC1_Init+0x1cc>)
 8002432:	f001 fda5 	bl	8003f80 <HAL_ADC_ConfigChannel>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 800243c:	f000 fb98 	bl	8002b70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002440:	bf00      	nop
 8002442:	3710      	adds	r7, #16
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	20000680 	.word	0x20000680
 800244c:	40012000 	.word	0x40012000
 8002450:	0f000001 	.word	0x0f000001

08002454 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002458:	4b0f      	ldr	r3, [pc, #60]	; (8002498 <MX_RTC_Init+0x44>)
 800245a:	4a10      	ldr	r2, [pc, #64]	; (800249c <MX_RTC_Init+0x48>)
 800245c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800245e:	4b0e      	ldr	r3, [pc, #56]	; (8002498 <MX_RTC_Init+0x44>)
 8002460:	2200      	movs	r2, #0
 8002462:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002464:	4b0c      	ldr	r3, [pc, #48]	; (8002498 <MX_RTC_Init+0x44>)
 8002466:	227f      	movs	r2, #127	; 0x7f
 8002468:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800246a:	4b0b      	ldr	r3, [pc, #44]	; (8002498 <MX_RTC_Init+0x44>)
 800246c:	22ff      	movs	r2, #255	; 0xff
 800246e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002470:	4b09      	ldr	r3, [pc, #36]	; (8002498 <MX_RTC_Init+0x44>)
 8002472:	2200      	movs	r2, #0
 8002474:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002476:	4b08      	ldr	r3, [pc, #32]	; (8002498 <MX_RTC_Init+0x44>)
 8002478:	2200      	movs	r2, #0
 800247a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800247c:	4b06      	ldr	r3, [pc, #24]	; (8002498 <MX_RTC_Init+0x44>)
 800247e:	2200      	movs	r2, #0
 8002480:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002482:	4805      	ldr	r0, [pc, #20]	; (8002498 <MX_RTC_Init+0x44>)
 8002484:	f003 ff3e 	bl	8006304 <HAL_RTC_Init>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800248e:	f000 fb6f 	bl	8002b70 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002492:	bf00      	nop
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	200007b4 	.word	0x200007b4
 800249c:	40002800 	.word	0x40002800

080024a0 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80024a4:	4b0c      	ldr	r3, [pc, #48]	; (80024d8 <MX_SDMMC1_SD_Init+0x38>)
 80024a6:	4a0d      	ldr	r2, [pc, #52]	; (80024dc <MX_SDMMC1_SD_Init+0x3c>)
 80024a8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80024aa:	4b0b      	ldr	r3, [pc, #44]	; (80024d8 <MX_SDMMC1_SD_Init+0x38>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80024b0:	4b09      	ldr	r3, [pc, #36]	; (80024d8 <MX_SDMMC1_SD_Init+0x38>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80024b6:	4b08      	ldr	r3, [pc, #32]	; (80024d8 <MX_SDMMC1_SD_Init+0x38>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80024bc:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <MX_SDMMC1_SD_Init+0x38>)
 80024be:	2200      	movs	r2, #0
 80024c0:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80024c2:	4b05      	ldr	r3, [pc, #20]	; (80024d8 <MX_SDMMC1_SD_Init+0x38>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 80024c8:	4b03      	ldr	r3, [pc, #12]	; (80024d8 <MX_SDMMC1_SD_Init+0x38>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80024ce:	bf00      	nop
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr
 80024d8:	20000534 	.word	0x20000534
 80024dc:	40012c00 	.word	0x40012c00

080024e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80024e4:	4b1b      	ldr	r3, [pc, #108]	; (8002554 <MX_SPI1_Init+0x74>)
 80024e6:	4a1c      	ldr	r2, [pc, #112]	; (8002558 <MX_SPI1_Init+0x78>)
 80024e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80024ea:	4b1a      	ldr	r3, [pc, #104]	; (8002554 <MX_SPI1_Init+0x74>)
 80024ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80024f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80024f2:	4b18      	ldr	r3, [pc, #96]	; (8002554 <MX_SPI1_Init+0x74>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80024f8:	4b16      	ldr	r3, [pc, #88]	; (8002554 <MX_SPI1_Init+0x74>)
 80024fa:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80024fe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002500:	4b14      	ldr	r3, [pc, #80]	; (8002554 <MX_SPI1_Init+0x74>)
 8002502:	2200      	movs	r2, #0
 8002504:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002506:	4b13      	ldr	r3, [pc, #76]	; (8002554 <MX_SPI1_Init+0x74>)
 8002508:	2201      	movs	r2, #1
 800250a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800250c:	4b11      	ldr	r3, [pc, #68]	; (8002554 <MX_SPI1_Init+0x74>)
 800250e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002512:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002514:	4b0f      	ldr	r3, [pc, #60]	; (8002554 <MX_SPI1_Init+0x74>)
 8002516:	2208      	movs	r2, #8
 8002518:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800251a:	4b0e      	ldr	r3, [pc, #56]	; (8002554 <MX_SPI1_Init+0x74>)
 800251c:	2200      	movs	r2, #0
 800251e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002520:	4b0c      	ldr	r3, [pc, #48]	; (8002554 <MX_SPI1_Init+0x74>)
 8002522:	2200      	movs	r2, #0
 8002524:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002526:	4b0b      	ldr	r3, [pc, #44]	; (8002554 <MX_SPI1_Init+0x74>)
 8002528:	2200      	movs	r2, #0
 800252a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800252c:	4b09      	ldr	r3, [pc, #36]	; (8002554 <MX_SPI1_Init+0x74>)
 800252e:	2207      	movs	r2, #7
 8002530:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002532:	4b08      	ldr	r3, [pc, #32]	; (8002554 <MX_SPI1_Init+0x74>)
 8002534:	2200      	movs	r2, #0
 8002536:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002538:	4b06      	ldr	r3, [pc, #24]	; (8002554 <MX_SPI1_Init+0x74>)
 800253a:	2200      	movs	r2, #0
 800253c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800253e:	4805      	ldr	r0, [pc, #20]	; (8002554 <MX_SPI1_Init+0x74>)
 8002540:	f005 faed 	bl	8007b1e <HAL_SPI_Init>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800254a:	f000 fb11 	bl	8002b70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800254e:	bf00      	nop
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	200003d8 	.word	0x200003d8
 8002558:	40013000 	.word	0x40013000

0800255c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002560:	4b1b      	ldr	r3, [pc, #108]	; (80025d0 <MX_SPI2_Init+0x74>)
 8002562:	4a1c      	ldr	r2, [pc, #112]	; (80025d4 <MX_SPI2_Init+0x78>)
 8002564:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002566:	4b1a      	ldr	r3, [pc, #104]	; (80025d0 <MX_SPI2_Init+0x74>)
 8002568:	f44f 7282 	mov.w	r2, #260	; 0x104
 800256c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800256e:	4b18      	ldr	r3, [pc, #96]	; (80025d0 <MX_SPI2_Init+0x74>)
 8002570:	2200      	movs	r2, #0
 8002572:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8002574:	4b16      	ldr	r3, [pc, #88]	; (80025d0 <MX_SPI2_Init+0x74>)
 8002576:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800257a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800257c:	4b14      	ldr	r3, [pc, #80]	; (80025d0 <MX_SPI2_Init+0x74>)
 800257e:	2200      	movs	r2, #0
 8002580:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002582:	4b13      	ldr	r3, [pc, #76]	; (80025d0 <MX_SPI2_Init+0x74>)
 8002584:	2201      	movs	r2, #1
 8002586:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002588:	4b11      	ldr	r3, [pc, #68]	; (80025d0 <MX_SPI2_Init+0x74>)
 800258a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800258e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002590:	4b0f      	ldr	r3, [pc, #60]	; (80025d0 <MX_SPI2_Init+0x74>)
 8002592:	2208      	movs	r2, #8
 8002594:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002596:	4b0e      	ldr	r3, [pc, #56]	; (80025d0 <MX_SPI2_Init+0x74>)
 8002598:	2200      	movs	r2, #0
 800259a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800259c:	4b0c      	ldr	r3, [pc, #48]	; (80025d0 <MX_SPI2_Init+0x74>)
 800259e:	2200      	movs	r2, #0
 80025a0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025a2:	4b0b      	ldr	r3, [pc, #44]	; (80025d0 <MX_SPI2_Init+0x74>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80025a8:	4b09      	ldr	r3, [pc, #36]	; (80025d0 <MX_SPI2_Init+0x74>)
 80025aa:	2207      	movs	r2, #7
 80025ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80025ae:	4b08      	ldr	r3, [pc, #32]	; (80025d0 <MX_SPI2_Init+0x74>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80025b4:	4b06      	ldr	r3, [pc, #24]	; (80025d0 <MX_SPI2_Init+0x74>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80025ba:	4805      	ldr	r0, [pc, #20]	; (80025d0 <MX_SPI2_Init+0x74>)
 80025bc:	f005 faaf 	bl	8007b1e <HAL_SPI_Init>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80025c6:	f000 fad3 	bl	8002b70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80025ca:	bf00      	nop
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	20000260 	.word	0x20000260
 80025d4:	40003800 	.word	0x40003800

080025d8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80025dc:	4b1b      	ldr	r3, [pc, #108]	; (800264c <MX_SPI3_Init+0x74>)
 80025de:	4a1c      	ldr	r2, [pc, #112]	; (8002650 <MX_SPI3_Init+0x78>)
 80025e0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80025e2:	4b1a      	ldr	r3, [pc, #104]	; (800264c <MX_SPI3_Init+0x74>)
 80025e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80025e8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80025ea:	4b18      	ldr	r3, [pc, #96]	; (800264c <MX_SPI3_Init+0x74>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80025f0:	4b16      	ldr	r3, [pc, #88]	; (800264c <MX_SPI3_Init+0x74>)
 80025f2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80025f6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025f8:	4b14      	ldr	r3, [pc, #80]	; (800264c <MX_SPI3_Init+0x74>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025fe:	4b13      	ldr	r3, [pc, #76]	; (800264c <MX_SPI3_Init+0x74>)
 8002600:	2200      	movs	r2, #0
 8002602:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002604:	4b11      	ldr	r3, [pc, #68]	; (800264c <MX_SPI3_Init+0x74>)
 8002606:	f44f 7200 	mov.w	r2, #512	; 0x200
 800260a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800260c:	4b0f      	ldr	r3, [pc, #60]	; (800264c <MX_SPI3_Init+0x74>)
 800260e:	2238      	movs	r2, #56	; 0x38
 8002610:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002612:	4b0e      	ldr	r3, [pc, #56]	; (800264c <MX_SPI3_Init+0x74>)
 8002614:	2200      	movs	r2, #0
 8002616:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002618:	4b0c      	ldr	r3, [pc, #48]	; (800264c <MX_SPI3_Init+0x74>)
 800261a:	2200      	movs	r2, #0
 800261c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800261e:	4b0b      	ldr	r3, [pc, #44]	; (800264c <MX_SPI3_Init+0x74>)
 8002620:	2200      	movs	r2, #0
 8002622:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002624:	4b09      	ldr	r3, [pc, #36]	; (800264c <MX_SPI3_Init+0x74>)
 8002626:	2207      	movs	r2, #7
 8002628:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800262a:	4b08      	ldr	r3, [pc, #32]	; (800264c <MX_SPI3_Init+0x74>)
 800262c:	2200      	movs	r2, #0
 800262e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002630:	4b06      	ldr	r3, [pc, #24]	; (800264c <MX_SPI3_Init+0x74>)
 8002632:	2200      	movs	r2, #0
 8002634:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002636:	4805      	ldr	r0, [pc, #20]	; (800264c <MX_SPI3_Init+0x74>)
 8002638:	f005 fa71 	bl	8007b1e <HAL_SPI_Init>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8002642:	f000 fa95 	bl	8002b70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002646:	bf00      	nop
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	200004c4 	.word	0x200004c4
 8002650:	40003c00 	.word	0x40003c00

08002654 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b096      	sub	sp, #88	; 0x58
 8002658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800265a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800265e:	2200      	movs	r2, #0
 8002660:	601a      	str	r2, [r3, #0]
 8002662:	605a      	str	r2, [r3, #4]
 8002664:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002666:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800266a:	2200      	movs	r2, #0
 800266c:	601a      	str	r2, [r3, #0]
 800266e:	605a      	str	r2, [r3, #4]
 8002670:	609a      	str	r2, [r3, #8]
 8002672:	60da      	str	r2, [r3, #12]
 8002674:	611a      	str	r2, [r3, #16]
 8002676:	615a      	str	r2, [r3, #20]
 8002678:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800267a:	1d3b      	adds	r3, r7, #4
 800267c:	222c      	movs	r2, #44	; 0x2c
 800267e:	2100      	movs	r1, #0
 8002680:	4618      	mov	r0, r3
 8002682:	f009 fce9 	bl	800c058 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002686:	4b39      	ldr	r3, [pc, #228]	; (800276c <MX_TIM1_Init+0x118>)
 8002688:	4a39      	ldr	r2, [pc, #228]	; (8002770 <MX_TIM1_Init+0x11c>)
 800268a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 530;
 800268c:	4b37      	ldr	r3, [pc, #220]	; (800276c <MX_TIM1_Init+0x118>)
 800268e:	f240 2212 	movw	r2, #530	; 0x212
 8002692:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002694:	4b35      	ldr	r3, [pc, #212]	; (800276c <MX_TIM1_Init+0x118>)
 8002696:	2200      	movs	r2, #0
 8002698:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 800269a:	4b34      	ldr	r3, [pc, #208]	; (800276c <MX_TIM1_Init+0x118>)
 800269c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80026a0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026a2:	4b32      	ldr	r3, [pc, #200]	; (800276c <MX_TIM1_Init+0x118>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80026a8:	4b30      	ldr	r3, [pc, #192]	; (800276c <MX_TIM1_Init+0x118>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026ae:	4b2f      	ldr	r3, [pc, #188]	; (800276c <MX_TIM1_Init+0x118>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80026b4:	482d      	ldr	r0, [pc, #180]	; (800276c <MX_TIM1_Init+0x118>)
 80026b6:	f006 fa46 	bl	8008b46 <HAL_TIM_PWM_Init>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 80026c0:	f000 fa56 	bl	8002b70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026c4:	2300      	movs	r3, #0
 80026c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80026c8:	2300      	movs	r3, #0
 80026ca:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026cc:	2300      	movs	r3, #0
 80026ce:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80026d0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80026d4:	4619      	mov	r1, r3
 80026d6:	4825      	ldr	r0, [pc, #148]	; (800276c <MX_TIM1_Init+0x118>)
 80026d8:	f007 fa62 	bl	8009ba0 <HAL_TIMEx_MasterConfigSynchronization>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80026e2:	f000 fa45 	bl	8002b70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026e6:	2360      	movs	r3, #96	; 0x60
 80026e8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80026ea:	2300      	movs	r3, #0
 80026ec:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026ee:	2300      	movs	r3, #0
 80026f0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80026f2:	2300      	movs	r3, #0
 80026f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026f6:	2300      	movs	r3, #0
 80026f8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80026fa:	2300      	movs	r3, #0
 80026fc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80026fe:	2300      	movs	r3, #0
 8002700:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002702:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002706:	2200      	movs	r2, #0
 8002708:	4619      	mov	r1, r3
 800270a:	4818      	ldr	r0, [pc, #96]	; (800276c <MX_TIM1_Init+0x118>)
 800270c:	f006 fc8c 	bl	8009028 <HAL_TIM_PWM_ConfigChannel>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8002716:	f000 fa2b 	bl	8002b70 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800271a:	2300      	movs	r3, #0
 800271c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800271e:	2300      	movs	r3, #0
 8002720:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002722:	2300      	movs	r3, #0
 8002724:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002726:	2300      	movs	r3, #0
 8002728:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800272a:	2300      	movs	r3, #0
 800272c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800272e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002732:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002734:	2300      	movs	r3, #0
 8002736:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002738:	2300      	movs	r3, #0
 800273a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800273c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002740:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002742:	2300      	movs	r3, #0
 8002744:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002746:	2300      	movs	r3, #0
 8002748:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800274a:	1d3b      	adds	r3, r7, #4
 800274c:	4619      	mov	r1, r3
 800274e:	4807      	ldr	r0, [pc, #28]	; (800276c <MX_TIM1_Init+0x118>)
 8002750:	f007 fab4 	bl	8009cbc <HAL_TIMEx_ConfigBreakDeadTime>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 800275a:	f000 fa09 	bl	8002b70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800275e:	4803      	ldr	r0, [pc, #12]	; (800276c <MX_TIM1_Init+0x118>)
 8002760:	f000 fd6a 	bl	8003238 <HAL_TIM_MspPostInit>

}
 8002764:	bf00      	nop
 8002766:	3758      	adds	r7, #88	; 0x58
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	20000384 	.word	0x20000384
 8002770:	40010000 	.word	0x40010000

08002774 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b08a      	sub	sp, #40	; 0x28
 8002778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800277a:	f107 031c 	add.w	r3, r7, #28
 800277e:	2200      	movs	r2, #0
 8002780:	601a      	str	r2, [r3, #0]
 8002782:	605a      	str	r2, [r3, #4]
 8002784:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002786:	463b      	mov	r3, r7
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	605a      	str	r2, [r3, #4]
 800278e:	609a      	str	r2, [r3, #8]
 8002790:	60da      	str	r2, [r3, #12]
 8002792:	611a      	str	r2, [r3, #16]
 8002794:	615a      	str	r2, [r3, #20]
 8002796:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002798:	4b22      	ldr	r3, [pc, #136]	; (8002824 <MX_TIM2_Init+0xb0>)
 800279a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800279e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 530;
 80027a0:	4b20      	ldr	r3, [pc, #128]	; (8002824 <MX_TIM2_Init+0xb0>)
 80027a2:	f240 2212 	movw	r2, #530	; 0x212
 80027a6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027a8:	4b1e      	ldr	r3, [pc, #120]	; (8002824 <MX_TIM2_Init+0xb0>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80027ae:	4b1d      	ldr	r3, [pc, #116]	; (8002824 <MX_TIM2_Init+0xb0>)
 80027b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80027b4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027b6:	4b1b      	ldr	r3, [pc, #108]	; (8002824 <MX_TIM2_Init+0xb0>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027bc:	4b19      	ldr	r3, [pc, #100]	; (8002824 <MX_TIM2_Init+0xb0>)
 80027be:	2200      	movs	r2, #0
 80027c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80027c2:	4818      	ldr	r0, [pc, #96]	; (8002824 <MX_TIM2_Init+0xb0>)
 80027c4:	f006 f9bf 	bl	8008b46 <HAL_TIM_PWM_Init>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 80027ce:	f000 f9cf 	bl	8002b70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027d2:	2300      	movs	r3, #0
 80027d4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027d6:	2300      	movs	r3, #0
 80027d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80027da:	f107 031c 	add.w	r3, r7, #28
 80027de:	4619      	mov	r1, r3
 80027e0:	4810      	ldr	r0, [pc, #64]	; (8002824 <MX_TIM2_Init+0xb0>)
 80027e2:	f007 f9dd 	bl	8009ba0 <HAL_TIMEx_MasterConfigSynchronization>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80027ec:	f000 f9c0 	bl	8002b70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027f0:	2360      	movs	r3, #96	; 0x60
 80027f2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80027f4:	2300      	movs	r3, #0
 80027f6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027f8:	2300      	movs	r3, #0
 80027fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027fc:	2300      	movs	r3, #0
 80027fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002800:	463b      	mov	r3, r7
 8002802:	2200      	movs	r2, #0
 8002804:	4619      	mov	r1, r3
 8002806:	4807      	ldr	r0, [pc, #28]	; (8002824 <MX_TIM2_Init+0xb0>)
 8002808:	f006 fc0e 	bl	8009028 <HAL_TIM_PWM_ConfigChannel>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8002812:	f000 f9ad 	bl	8002b70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002816:	4803      	ldr	r0, [pc, #12]	; (8002824 <MX_TIM2_Init+0xb0>)
 8002818:	f000 fd0e 	bl	8003238 <HAL_TIM_MspPostInit>

}
 800281c:	bf00      	nop
 800281e:	3728      	adds	r7, #40	; 0x28
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	2000043c 	.word	0x2000043c

08002828 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b088      	sub	sp, #32
 800282c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800282e:	f107 0310 	add.w	r3, r7, #16
 8002832:	2200      	movs	r2, #0
 8002834:	601a      	str	r2, [r3, #0]
 8002836:	605a      	str	r2, [r3, #4]
 8002838:	609a      	str	r2, [r3, #8]
 800283a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800283c:	1d3b      	adds	r3, r7, #4
 800283e:	2200      	movs	r2, #0
 8002840:	601a      	str	r2, [r3, #0]
 8002842:	605a      	str	r2, [r3, #4]
 8002844:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002846:	4b1d      	ldr	r3, [pc, #116]	; (80028bc <MX_TIM3_Init+0x94>)
 8002848:	4a1d      	ldr	r2, [pc, #116]	; (80028c0 <MX_TIM3_Init+0x98>)
 800284a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 800284c:	4b1b      	ldr	r3, [pc, #108]	; (80028bc <MX_TIM3_Init+0x94>)
 800284e:	2263      	movs	r2, #99	; 0x63
 8002850:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002852:	4b1a      	ldr	r3, [pc, #104]	; (80028bc <MX_TIM3_Init+0x94>)
 8002854:	2200      	movs	r2, #0
 8002856:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 66;
 8002858:	4b18      	ldr	r3, [pc, #96]	; (80028bc <MX_TIM3_Init+0x94>)
 800285a:	2242      	movs	r2, #66	; 0x42
 800285c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800285e:	4b17      	ldr	r3, [pc, #92]	; (80028bc <MX_TIM3_Init+0x94>)
 8002860:	2200      	movs	r2, #0
 8002862:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002864:	4b15      	ldr	r3, [pc, #84]	; (80028bc <MX_TIM3_Init+0x94>)
 8002866:	2200      	movs	r2, #0
 8002868:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800286a:	4814      	ldr	r0, [pc, #80]	; (80028bc <MX_TIM3_Init+0x94>)
 800286c:	f006 f86c 	bl	8008948 <HAL_TIM_Base_Init>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002876:	f000 f97b 	bl	8002b70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800287a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800287e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002880:	f107 0310 	add.w	r3, r7, #16
 8002884:	4619      	mov	r1, r3
 8002886:	480d      	ldr	r0, [pc, #52]	; (80028bc <MX_TIM3_Init+0x94>)
 8002888:	f006 fcde 	bl	8009248 <HAL_TIM_ConfigClockSource>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002892:	f000 f96d 	bl	8002b70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002896:	2300      	movs	r3, #0
 8002898:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800289a:	2300      	movs	r3, #0
 800289c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800289e:	1d3b      	adds	r3, r7, #4
 80028a0:	4619      	mov	r1, r3
 80028a2:	4806      	ldr	r0, [pc, #24]	; (80028bc <MX_TIM3_Init+0x94>)
 80028a4:	f007 f97c 	bl	8009ba0 <HAL_TIMEx_MasterConfigSynchronization>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80028ae:	f000 f95f 	bl	8002b70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80028b2:	bf00      	nop
 80028b4:	3720      	adds	r7, #32
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	20000318 	.word	0x20000318
 80028c0:	40000400 	.word	0x40000400

080028c4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b088      	sub	sp, #32
 80028c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028ca:	f107 0310 	add.w	r3, r7, #16
 80028ce:	2200      	movs	r2, #0
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	605a      	str	r2, [r3, #4]
 80028d4:	609a      	str	r2, [r3, #8]
 80028d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028d8:	1d3b      	adds	r3, r7, #4
 80028da:	2200      	movs	r2, #0
 80028dc:	601a      	str	r2, [r3, #0]
 80028de:	605a      	str	r2, [r3, #4]
 80028e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80028e2:	4b1d      	ldr	r3, [pc, #116]	; (8002958 <MX_TIM4_Init+0x94>)
 80028e4:	4a1d      	ldr	r2, [pc, #116]	; (800295c <MX_TIM4_Init+0x98>)
 80028e6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9999;
 80028e8:	4b1b      	ldr	r3, [pc, #108]	; (8002958 <MX_TIM4_Init+0x94>)
 80028ea:	f242 720f 	movw	r2, #9999	; 0x270f
 80028ee:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028f0:	4b19      	ldr	r3, [pc, #100]	; (8002958 <MX_TIM4_Init+0x94>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 12;
 80028f6:	4b18      	ldr	r3, [pc, #96]	; (8002958 <MX_TIM4_Init+0x94>)
 80028f8:	220c      	movs	r2, #12
 80028fa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028fc:	4b16      	ldr	r3, [pc, #88]	; (8002958 <MX_TIM4_Init+0x94>)
 80028fe:	2200      	movs	r2, #0
 8002900:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002902:	4b15      	ldr	r3, [pc, #84]	; (8002958 <MX_TIM4_Init+0x94>)
 8002904:	2200      	movs	r2, #0
 8002906:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002908:	4813      	ldr	r0, [pc, #76]	; (8002958 <MX_TIM4_Init+0x94>)
 800290a:	f006 f81d 	bl	8008948 <HAL_TIM_Base_Init>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002914:	f000 f92c 	bl	8002b70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002918:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800291c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800291e:	f107 0310 	add.w	r3, r7, #16
 8002922:	4619      	mov	r1, r3
 8002924:	480c      	ldr	r0, [pc, #48]	; (8002958 <MX_TIM4_Init+0x94>)
 8002926:	f006 fc8f 	bl	8009248 <HAL_TIM_ConfigClockSource>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002930:	f000 f91e 	bl	8002b70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002934:	2300      	movs	r3, #0
 8002936:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002938:	2300      	movs	r3, #0
 800293a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800293c:	1d3b      	adds	r3, r7, #4
 800293e:	4619      	mov	r1, r3
 8002940:	4805      	ldr	r0, [pc, #20]	; (8002958 <MX_TIM4_Init+0x94>)
 8002942:	f007 f92d 	bl	8009ba0 <HAL_TIMEx_MasterConfigSynchronization>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800294c:	f000 f910 	bl	8002b70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002950:	bf00      	nop
 8002952:	3720      	adds	r7, #32
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	200002c4 	.word	0x200002c4
 800295c:	40000800 	.word	0x40000800

08002960 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002964:	4b14      	ldr	r3, [pc, #80]	; (80029b8 <MX_USART1_UART_Init+0x58>)
 8002966:	4a15      	ldr	r2, [pc, #84]	; (80029bc <MX_USART1_UART_Init+0x5c>)
 8002968:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800296a:	4b13      	ldr	r3, [pc, #76]	; (80029b8 <MX_USART1_UART_Init+0x58>)
 800296c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002970:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002972:	4b11      	ldr	r3, [pc, #68]	; (80029b8 <MX_USART1_UART_Init+0x58>)
 8002974:	2200      	movs	r2, #0
 8002976:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002978:	4b0f      	ldr	r3, [pc, #60]	; (80029b8 <MX_USART1_UART_Init+0x58>)
 800297a:	2200      	movs	r2, #0
 800297c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800297e:	4b0e      	ldr	r3, [pc, #56]	; (80029b8 <MX_USART1_UART_Init+0x58>)
 8002980:	2200      	movs	r2, #0
 8002982:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002984:	4b0c      	ldr	r3, [pc, #48]	; (80029b8 <MX_USART1_UART_Init+0x58>)
 8002986:	220c      	movs	r2, #12
 8002988:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800298a:	4b0b      	ldr	r3, [pc, #44]	; (80029b8 <MX_USART1_UART_Init+0x58>)
 800298c:	2200      	movs	r2, #0
 800298e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002990:	4b09      	ldr	r3, [pc, #36]	; (80029b8 <MX_USART1_UART_Init+0x58>)
 8002992:	2200      	movs	r2, #0
 8002994:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002996:	4b08      	ldr	r3, [pc, #32]	; (80029b8 <MX_USART1_UART_Init+0x58>)
 8002998:	2200      	movs	r2, #0
 800299a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800299c:	4b06      	ldr	r3, [pc, #24]	; (80029b8 <MX_USART1_UART_Init+0x58>)
 800299e:	2200      	movs	r2, #0
 80029a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80029a2:	4805      	ldr	r0, [pc, #20]	; (80029b8 <MX_USART1_UART_Init+0x58>)
 80029a4:	f007 fa26 	bl	8009df4 <HAL_UART_Init>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80029ae:	f000 f8df 	bl	8002b70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80029b2:	bf00      	nop
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	200006d0 	.word	0x200006d0
 80029bc:	40011000 	.word	0x40011000

080029c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80029c6:	4b14      	ldr	r3, [pc, #80]	; (8002a18 <MX_DMA_Init+0x58>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ca:	4a13      	ldr	r2, [pc, #76]	; (8002a18 <MX_DMA_Init+0x58>)
 80029cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80029d0:	6313      	str	r3, [r2, #48]	; 0x30
 80029d2:	4b11      	ldr	r3, [pc, #68]	; (8002a18 <MX_DMA_Init+0x58>)
 80029d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029da:	607b      	str	r3, [r7, #4]
 80029dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80029de:	2200      	movs	r2, #0
 80029e0:	2100      	movs	r1, #0
 80029e2:	2038      	movs	r0, #56	; 0x38
 80029e4:	f001 fe6d 	bl	80046c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80029e8:	2038      	movs	r0, #56	; 0x38
 80029ea:	f001 fe86 	bl	80046fa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80029ee:	2200      	movs	r2, #0
 80029f0:	2100      	movs	r1, #0
 80029f2:	203b      	movs	r0, #59	; 0x3b
 80029f4:	f001 fe65 	bl	80046c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80029f8:	203b      	movs	r0, #59	; 0x3b
 80029fa:	f001 fe7e 	bl	80046fa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80029fe:	2200      	movs	r2, #0
 8002a00:	2100      	movs	r1, #0
 8002a02:	2045      	movs	r0, #69	; 0x45
 8002a04:	f001 fe5d 	bl	80046c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002a08:	2045      	movs	r0, #69	; 0x45
 8002a0a:	f001 fe76 	bl	80046fa <HAL_NVIC_EnableIRQ>

}
 8002a0e:	bf00      	nop
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	40023800 	.word	0x40023800

08002a1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b08a      	sub	sp, #40	; 0x28
 8002a20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a22:	f107 0314 	add.w	r3, r7, #20
 8002a26:	2200      	movs	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]
 8002a2a:	605a      	str	r2, [r3, #4]
 8002a2c:	609a      	str	r2, [r3, #8]
 8002a2e:	60da      	str	r2, [r3, #12]
 8002a30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a32:	4b4a      	ldr	r3, [pc, #296]	; (8002b5c <MX_GPIO_Init+0x140>)
 8002a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a36:	4a49      	ldr	r2, [pc, #292]	; (8002b5c <MX_GPIO_Init+0x140>)
 8002a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a3e:	4b47      	ldr	r3, [pc, #284]	; (8002b5c <MX_GPIO_Init+0x140>)
 8002a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a46:	613b      	str	r3, [r7, #16]
 8002a48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a4a:	4b44      	ldr	r3, [pc, #272]	; (8002b5c <MX_GPIO_Init+0x140>)
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4e:	4a43      	ldr	r2, [pc, #268]	; (8002b5c <MX_GPIO_Init+0x140>)
 8002a50:	f043 0304 	orr.w	r3, r3, #4
 8002a54:	6313      	str	r3, [r2, #48]	; 0x30
 8002a56:	4b41      	ldr	r3, [pc, #260]	; (8002b5c <MX_GPIO_Init+0x140>)
 8002a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5a:	f003 0304 	and.w	r3, r3, #4
 8002a5e:	60fb      	str	r3, [r7, #12]
 8002a60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a62:	4b3e      	ldr	r3, [pc, #248]	; (8002b5c <MX_GPIO_Init+0x140>)
 8002a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a66:	4a3d      	ldr	r2, [pc, #244]	; (8002b5c <MX_GPIO_Init+0x140>)
 8002a68:	f043 0301 	orr.w	r3, r3, #1
 8002a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a6e:	4b3b      	ldr	r3, [pc, #236]	; (8002b5c <MX_GPIO_Init+0x140>)
 8002a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	60bb      	str	r3, [r7, #8]
 8002a78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a7a:	4b38      	ldr	r3, [pc, #224]	; (8002b5c <MX_GPIO_Init+0x140>)
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7e:	4a37      	ldr	r2, [pc, #220]	; (8002b5c <MX_GPIO_Init+0x140>)
 8002a80:	f043 0302 	orr.w	r3, r3, #2
 8002a84:	6313      	str	r3, [r2, #48]	; 0x30
 8002a86:	4b35      	ldr	r3, [pc, #212]	; (8002b5c <MX_GPIO_Init+0x140>)
 8002a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	607b      	str	r3, [r7, #4]
 8002a90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a92:	4b32      	ldr	r3, [pc, #200]	; (8002b5c <MX_GPIO_Init+0x140>)
 8002a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a96:	4a31      	ldr	r2, [pc, #196]	; (8002b5c <MX_GPIO_Init+0x140>)
 8002a98:	f043 0308 	orr.w	r3, r3, #8
 8002a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a9e:	4b2f      	ldr	r3, [pc, #188]	; (8002b5c <MX_GPIO_Init+0x140>)
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa2:	f003 0308 	and.w	r3, r3, #8
 8002aa6:	603b      	str	r3, [r7, #0]
 8002aa8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_CS_Pin|AIN1_Pin|AIN2_Pin|SPI2_CS_Pin
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f641 4144 	movw	r1, #7236	; 0x1c44
 8002ab0:	482b      	ldr	r0, [pc, #172]	; (8002b60 <MX_GPIO_Init+0x144>)
 8002ab2:	f002 fc07 	bl	80052c4 <HAL_GPIO_WritePin>
                          |SPI3_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BIN2_Pin|BIN1_Pin, GPIO_PIN_RESET);
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	21c0      	movs	r1, #192	; 0xc0
 8002aba:	482a      	ldr	r0, [pc, #168]	; (8002b64 <MX_GPIO_Init+0x148>)
 8002abc:	f002 fc02 	bl	80052c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI1_CS_Pin AIN1_Pin AIN2_Pin SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|AIN1_Pin|AIN2_Pin|SPI2_CS_Pin;
 8002ac0:	f641 4304 	movw	r3, #7172	; 0x1c04
 8002ac4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aca:	2300      	movs	r3, #0
 8002acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ad2:	f107 0314 	add.w	r3, r7, #20
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4821      	ldr	r0, [pc, #132]	; (8002b60 <MX_GPIO_Init+0x144>)
 8002ada:	f002 fa3f 	bl	8004f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : BIN2_Pin BIN1_Pin */
  GPIO_InitStruct.Pin = BIN2_Pin|BIN1_Pin;
 8002ade:	23c0      	movs	r3, #192	; 0xc0
 8002ae0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aea:	2300      	movs	r3, #0
 8002aec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aee:	f107 0314 	add.w	r3, r7, #20
 8002af2:	4619      	mov	r1, r3
 8002af4:	481b      	ldr	r0, [pc, #108]	; (8002b64 <MX_GPIO_Init+0x148>)
 8002af6:	f002 fa31 	bl	8004f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002afa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002afe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b00:	2300      	movs	r3, #0
 8002b02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b04:	2300      	movs	r3, #0
 8002b06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b08:	f107 0314 	add.w	r3, r7, #20
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	4816      	ldr	r0, [pc, #88]	; (8002b68 <MX_GPIO_Init+0x14c>)
 8002b10:	f002 fa24 	bl	8004f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8002b14:	2340      	movs	r3, #64	; 0x40
 8002b16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b20:	2300      	movs	r3, #0
 8002b22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8002b24:	f107 0314 	add.w	r3, r7, #20
 8002b28:	4619      	mov	r1, r3
 8002b2a:	480d      	ldr	r0, [pc, #52]	; (8002b60 <MX_GPIO_Init+0x144>)
 8002b2c:	f002 fa16 	bl	8004f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT_Pin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8002b30:	2380      	movs	r3, #128	; 0x80
 8002b32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b34:	4b0d      	ldr	r3, [pc, #52]	; (8002b6c <MX_GPIO_Init+0x150>)
 8002b36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002b38:	2302      	movs	r3, #2
 8002b3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8002b3c:	f107 0314 	add.w	r3, r7, #20
 8002b40:	4619      	mov	r1, r3
 8002b42:	4807      	ldr	r0, [pc, #28]	; (8002b60 <MX_GPIO_Init+0x144>)
 8002b44:	f002 fa0a 	bl	8004f5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002b48:	2200      	movs	r2, #0
 8002b4a:	2100      	movs	r1, #0
 8002b4c:	2017      	movs	r0, #23
 8002b4e:	f001 fdb8 	bl	80046c2 <HAL_NVIC_SetPriority>
  //HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);

}
 8002b52:	bf00      	nop
 8002b54:	3728      	adds	r7, #40	; 0x28
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	40023800 	.word	0x40023800
 8002b60:	40020400 	.word	0x40020400
 8002b64:	40020800 	.word	0x40020800
 8002b68:	40020000 	.word	0x40020000
 8002b6c:	10110000 	.word	0x10110000

08002b70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b74:	b672      	cpsid	i
}
 8002b76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b78:	e7fe      	b.n	8002b78 <Error_Handler+0x8>
	...

08002b7c <MOTORS_SetVelocity>:
#include "motors.h"



void MOTORS_SetVelocity(int16_t left_motor, int16_t right_motor)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	4603      	mov	r3, r0
 8002b84:	460a      	mov	r2, r1
 8002b86:	80fb      	strh	r3, [r7, #6]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	80bb      	strh	r3, [r7, #4]
	if(left_motor>=0)
 8002b8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	db14      	blt.n	8002bbe <MOTORS_SetVelocity+0x42>
	{
		HAL_GPIO_WritePin(AIN1_GPIO_Port, AIN1_Pin, GPIO_PIN_RESET);
 8002b94:	2200      	movs	r2, #0
 8002b96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b9a:	482e      	ldr	r0, [pc, #184]	; (8002c54 <MOTORS_SetVelocity+0xd8>)
 8002b9c:	f002 fb92 	bl	80052c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AIN2_GPIO_Port, AIN2_Pin, GPIO_PIN_SET);
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002ba6:	482b      	ldr	r0, [pc, #172]	; (8002c54 <MOTORS_SetVelocity+0xd8>)
 8002ba8:	f002 fb8c 	bl	80052c4 <HAL_GPIO_WritePin>
		if(left_motor>1000)
 8002bac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bb4:	dd17      	ble.n	8002be6 <MOTORS_SetVelocity+0x6a>
			left_motor=1000;
 8002bb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bba:	80fb      	strh	r3, [r7, #6]
 8002bbc:	e013      	b.n	8002be6 <MOTORS_SetVelocity+0x6a>
	}
	else
	{
		HAL_GPIO_WritePin(AIN1_GPIO_Port, AIN1_Pin, GPIO_PIN_SET);
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002bc4:	4823      	ldr	r0, [pc, #140]	; (8002c54 <MOTORS_SetVelocity+0xd8>)
 8002bc6:	f002 fb7d 	bl	80052c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AIN2_GPIO_Port, AIN2_Pin, GPIO_PIN_RESET);
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002bd0:	4820      	ldr	r0, [pc, #128]	; (8002c54 <MOTORS_SetVelocity+0xd8>)
 8002bd2:	f002 fb77 	bl	80052c4 <HAL_GPIO_WritePin>
		if(left_motor<-1000)
 8002bd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bda:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8002bde:	da02      	bge.n	8002be6 <MOTORS_SetVelocity+0x6a>
			left_motor=-1000;
 8002be0:	f64f 4318 	movw	r3, #64536	; 0xfc18
 8002be4:	80fb      	strh	r3, [r7, #6]
	}

	if(right_motor>=0)
 8002be6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	db12      	blt.n	8002c14 <MOTORS_SetVelocity+0x98>
	{
		HAL_GPIO_WritePin(BIN1_GPIO_Port, BIN1_Pin, GPIO_PIN_RESET);
 8002bee:	2200      	movs	r2, #0
 8002bf0:	2180      	movs	r1, #128	; 0x80
 8002bf2:	4819      	ldr	r0, [pc, #100]	; (8002c58 <MOTORS_SetVelocity+0xdc>)
 8002bf4:	f002 fb66 	bl	80052c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BIN2_GPIO_Port, BIN2_Pin, GPIO_PIN_SET);
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	2140      	movs	r1, #64	; 0x40
 8002bfc:	4816      	ldr	r0, [pc, #88]	; (8002c58 <MOTORS_SetVelocity+0xdc>)
 8002bfe:	f002 fb61 	bl	80052c4 <HAL_GPIO_WritePin>
		if(right_motor>1000)
 8002c02:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002c06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c0a:	dd15      	ble.n	8002c38 <MOTORS_SetVelocity+0xbc>
			right_motor=1000;
 8002c0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c10:	80bb      	strh	r3, [r7, #4]
 8002c12:	e011      	b.n	8002c38 <MOTORS_SetVelocity+0xbc>
	}
	else
	{
		HAL_GPIO_WritePin(BIN1_GPIO_Port, BIN1_Pin, GPIO_PIN_SET);
 8002c14:	2201      	movs	r2, #1
 8002c16:	2180      	movs	r1, #128	; 0x80
 8002c18:	480f      	ldr	r0, [pc, #60]	; (8002c58 <MOTORS_SetVelocity+0xdc>)
 8002c1a:	f002 fb53 	bl	80052c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BIN2_GPIO_Port, BIN2_Pin, GPIO_PIN_RESET);
 8002c1e:	2200      	movs	r2, #0
 8002c20:	2140      	movs	r1, #64	; 0x40
 8002c22:	480d      	ldr	r0, [pc, #52]	; (8002c58 <MOTORS_SetVelocity+0xdc>)
 8002c24:	f002 fb4e 	bl	80052c4 <HAL_GPIO_WritePin>
		if(right_motor<-1000)
 8002c28:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002c2c:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8002c30:	da02      	bge.n	8002c38 <MOTORS_SetVelocity+0xbc>
			right_motor=-1000;
 8002c32:	f64f 4318 	movw	r3, #64536	; 0xfc18
 8002c36:	80bb      	strh	r3, [r7, #4]
	}

	TIM1->CCR1 = left_motor;
 8002c38:	4a08      	ldr	r2, [pc, #32]	; (8002c5c <MOTORS_SetVelocity+0xe0>)
 8002c3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c3e:	6353      	str	r3, [r2, #52]	; 0x34
	TIM2->CCR1 = right_motor;
 8002c40:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c44:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002c48:	6353      	str	r3, [r2, #52]	; 0x34

}
 8002c4a:	bf00      	nop
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	40020400 	.word	0x40020400
 8002c58:	40020800 	.word	0x40020800
 8002c5c:	40010000 	.word	0x40010000

08002c60 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002c66:	4b0f      	ldr	r3, [pc, #60]	; (8002ca4 <HAL_MspInit+0x44>)
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	4a0e      	ldr	r2, [pc, #56]	; (8002ca4 <HAL_MspInit+0x44>)
 8002c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c70:	6413      	str	r3, [r2, #64]	; 0x40
 8002c72:	4b0c      	ldr	r3, [pc, #48]	; (8002ca4 <HAL_MspInit+0x44>)
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c7a:	607b      	str	r3, [r7, #4]
 8002c7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c7e:	4b09      	ldr	r3, [pc, #36]	; (8002ca4 <HAL_MspInit+0x44>)
 8002c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c82:	4a08      	ldr	r2, [pc, #32]	; (8002ca4 <HAL_MspInit+0x44>)
 8002c84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c88:	6453      	str	r3, [r2, #68]	; 0x44
 8002c8a:	4b06      	ldr	r3, [pc, #24]	; (8002ca4 <HAL_MspInit+0x44>)
 8002c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c92:	603b      	str	r3, [r7, #0]
 8002c94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c96:	bf00      	nop
 8002c98:	370c      	adds	r7, #12
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	40023800 	.word	0x40023800

08002ca8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b08c      	sub	sp, #48	; 0x30
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb0:	f107 031c 	add.w	r3, r7, #28
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	601a      	str	r2, [r3, #0]
 8002cb8:	605a      	str	r2, [r3, #4]
 8002cba:	609a      	str	r2, [r3, #8]
 8002cbc:	60da      	str	r2, [r3, #12]
 8002cbe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a46      	ldr	r2, [pc, #280]	; (8002de0 <HAL_ADC_MspInit+0x138>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	f040 8085 	bne.w	8002dd6 <HAL_ADC_MspInit+0x12e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002ccc:	4b45      	ldr	r3, [pc, #276]	; (8002de4 <HAL_ADC_MspInit+0x13c>)
 8002cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd0:	4a44      	ldr	r2, [pc, #272]	; (8002de4 <HAL_ADC_MspInit+0x13c>)
 8002cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cd6:	6453      	str	r3, [r2, #68]	; 0x44
 8002cd8:	4b42      	ldr	r3, [pc, #264]	; (8002de4 <HAL_ADC_MspInit+0x13c>)
 8002cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce0:	61bb      	str	r3, [r7, #24]
 8002ce2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ce4:	4b3f      	ldr	r3, [pc, #252]	; (8002de4 <HAL_ADC_MspInit+0x13c>)
 8002ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce8:	4a3e      	ldr	r2, [pc, #248]	; (8002de4 <HAL_ADC_MspInit+0x13c>)
 8002cea:	f043 0304 	orr.w	r3, r3, #4
 8002cee:	6313      	str	r3, [r2, #48]	; 0x30
 8002cf0:	4b3c      	ldr	r3, [pc, #240]	; (8002de4 <HAL_ADC_MspInit+0x13c>)
 8002cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf4:	f003 0304 	and.w	r3, r3, #4
 8002cf8:	617b      	str	r3, [r7, #20]
 8002cfa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cfc:	4b39      	ldr	r3, [pc, #228]	; (8002de4 <HAL_ADC_MspInit+0x13c>)
 8002cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d00:	4a38      	ldr	r2, [pc, #224]	; (8002de4 <HAL_ADC_MspInit+0x13c>)
 8002d02:	f043 0301 	orr.w	r3, r3, #1
 8002d06:	6313      	str	r3, [r2, #48]	; 0x30
 8002d08:	4b36      	ldr	r3, [pc, #216]	; (8002de4 <HAL_ADC_MspInit+0x13c>)
 8002d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0c:	f003 0301 	and.w	r3, r3, #1
 8002d10:	613b      	str	r3, [r7, #16]
 8002d12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d14:	4b33      	ldr	r3, [pc, #204]	; (8002de4 <HAL_ADC_MspInit+0x13c>)
 8002d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d18:	4a32      	ldr	r2, [pc, #200]	; (8002de4 <HAL_ADC_MspInit+0x13c>)
 8002d1a:	f043 0302 	orr.w	r3, r3, #2
 8002d1e:	6313      	str	r3, [r2, #48]	; 0x30
 8002d20:	4b30      	ldr	r3, [pc, #192]	; (8002de4 <HAL_ADC_MspInit+0x13c>)
 8002d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	60fb      	str	r3, [r7, #12]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PC4     ------> ADC1_IN14
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002d2c:	231f      	movs	r3, #31
 8002d2e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d30:	2303      	movs	r3, #3
 8002d32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d34:	2300      	movs	r3, #0
 8002d36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d38:	f107 031c 	add.w	r3, r7, #28
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	482a      	ldr	r0, [pc, #168]	; (8002de8 <HAL_ADC_MspInit+0x140>)
 8002d40:	f002 f90c 	bl	8004f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002d44:	231f      	movs	r3, #31
 8002d46:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d50:	f107 031c 	add.w	r3, r7, #28
 8002d54:	4619      	mov	r1, r3
 8002d56:	4825      	ldr	r0, [pc, #148]	; (8002dec <HAL_ADC_MspInit+0x144>)
 8002d58:	f002 f900 	bl	8004f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d60:	2303      	movs	r3, #3
 8002d62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d64:	2300      	movs	r3, #0
 8002d66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d68:	f107 031c 	add.w	r3, r7, #28
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	4820      	ldr	r0, [pc, #128]	; (8002df0 <HAL_ADC_MspInit+0x148>)
 8002d70:	f002 f8f4 	bl	8004f5c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002d74:	4b1f      	ldr	r3, [pc, #124]	; (8002df4 <HAL_ADC_MspInit+0x14c>)
 8002d76:	4a20      	ldr	r2, [pc, #128]	; (8002df8 <HAL_ADC_MspInit+0x150>)
 8002d78:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002d7a:	4b1e      	ldr	r3, [pc, #120]	; (8002df4 <HAL_ADC_MspInit+0x14c>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d80:	4b1c      	ldr	r3, [pc, #112]	; (8002df4 <HAL_ADC_MspInit+0x14c>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d86:	4b1b      	ldr	r3, [pc, #108]	; (8002df4 <HAL_ADC_MspInit+0x14c>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002d8c:	4b19      	ldr	r3, [pc, #100]	; (8002df4 <HAL_ADC_MspInit+0x14c>)
 8002d8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d92:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002d94:	4b17      	ldr	r3, [pc, #92]	; (8002df4 <HAL_ADC_MspInit+0x14c>)
 8002d96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d9a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002d9c:	4b15      	ldr	r3, [pc, #84]	; (8002df4 <HAL_ADC_MspInit+0x14c>)
 8002d9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002da2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002da4:	4b13      	ldr	r3, [pc, #76]	; (8002df4 <HAL_ADC_MspInit+0x14c>)
 8002da6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002daa:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8002dac:	4b11      	ldr	r3, [pc, #68]	; (8002df4 <HAL_ADC_MspInit+0x14c>)
 8002dae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002db2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002db4:	4b0f      	ldr	r3, [pc, #60]	; (8002df4 <HAL_ADC_MspInit+0x14c>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002dba:	480e      	ldr	r0, [pc, #56]	; (8002df4 <HAL_ADC_MspInit+0x14c>)
 8002dbc:	f001 fcb8 	bl	8004730 <HAL_DMA_Init>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <HAL_ADC_MspInit+0x122>
    {
      Error_Handler();
 8002dc6:	f7ff fed3 	bl	8002b70 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a09      	ldr	r2, [pc, #36]	; (8002df4 <HAL_ADC_MspInit+0x14c>)
 8002dce:	639a      	str	r2, [r3, #56]	; 0x38
 8002dd0:	4a08      	ldr	r2, [pc, #32]	; (8002df4 <HAL_ADC_MspInit+0x14c>)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002dd6:	bf00      	nop
 8002dd8:	3730      	adds	r7, #48	; 0x30
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	40012000 	.word	0x40012000
 8002de4:	40023800 	.word	0x40023800
 8002de8:	40020800 	.word	0x40020800
 8002dec:	40020000 	.word	0x40020000
 8002df0:	40020400 	.word	0x40020400
 8002df4:	20000754 	.word	0x20000754
 8002df8:	40026410 	.word	0x40026410

08002dfc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a07      	ldr	r2, [pc, #28]	; (8002e28 <HAL_RTC_MspInit+0x2c>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d105      	bne.n	8002e1a <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002e0e:	4b07      	ldr	r3, [pc, #28]	; (8002e2c <HAL_RTC_MspInit+0x30>)
 8002e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e12:	4a06      	ldr	r2, [pc, #24]	; (8002e2c <HAL_RTC_MspInit+0x30>)
 8002e14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e18:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002e1a:	bf00      	nop
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	40002800 	.word	0x40002800
 8002e2c:	40023800 	.word	0x40023800

08002e30 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b08a      	sub	sp, #40	; 0x28
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e38:	f107 0314 	add.w	r3, r7, #20
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]
 8002e40:	605a      	str	r2, [r3, #4]
 8002e42:	609a      	str	r2, [r3, #8]
 8002e44:	60da      	str	r2, [r3, #12]
 8002e46:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a65      	ldr	r2, [pc, #404]	; (8002fe4 <HAL_SD_MspInit+0x1b4>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	f040 80c3 	bne.w	8002fda <HAL_SD_MspInit+0x1aa>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002e54:	4b64      	ldr	r3, [pc, #400]	; (8002fe8 <HAL_SD_MspInit+0x1b8>)
 8002e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e58:	4a63      	ldr	r2, [pc, #396]	; (8002fe8 <HAL_SD_MspInit+0x1b8>)
 8002e5a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e5e:	6453      	str	r3, [r2, #68]	; 0x44
 8002e60:	4b61      	ldr	r3, [pc, #388]	; (8002fe8 <HAL_SD_MspInit+0x1b8>)
 8002e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e68:	613b      	str	r3, [r7, #16]
 8002e6a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e6c:	4b5e      	ldr	r3, [pc, #376]	; (8002fe8 <HAL_SD_MspInit+0x1b8>)
 8002e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e70:	4a5d      	ldr	r2, [pc, #372]	; (8002fe8 <HAL_SD_MspInit+0x1b8>)
 8002e72:	f043 0304 	orr.w	r3, r3, #4
 8002e76:	6313      	str	r3, [r2, #48]	; 0x30
 8002e78:	4b5b      	ldr	r3, [pc, #364]	; (8002fe8 <HAL_SD_MspInit+0x1b8>)
 8002e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7c:	f003 0304 	and.w	r3, r3, #4
 8002e80:	60fb      	str	r3, [r7, #12]
 8002e82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e84:	4b58      	ldr	r3, [pc, #352]	; (8002fe8 <HAL_SD_MspInit+0x1b8>)
 8002e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e88:	4a57      	ldr	r2, [pc, #348]	; (8002fe8 <HAL_SD_MspInit+0x1b8>)
 8002e8a:	f043 0308 	orr.w	r3, r3, #8
 8002e8e:	6313      	str	r3, [r2, #48]	; 0x30
 8002e90:	4b55      	ldr	r3, [pc, #340]	; (8002fe8 <HAL_SD_MspInit+0x1b8>)
 8002e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e94:	f003 0308 	and.w	r3, r3, #8
 8002e98:	60bb      	str	r3, [r7, #8]
 8002e9a:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002e9c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002ea0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002eae:	230c      	movs	r3, #12
 8002eb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002eb2:	f107 0314 	add.w	r3, r7, #20
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	484c      	ldr	r0, [pc, #304]	; (8002fec <HAL_SD_MspInit+0x1bc>)
 8002eba:	f002 f84f 	bl	8004f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002ebe:	2304      	movs	r3, #4
 8002ec0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002ece:	230c      	movs	r3, #12
 8002ed0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ed2:	f107 0314 	add.w	r3, r7, #20
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	4845      	ldr	r0, [pc, #276]	; (8002ff0 <HAL_SD_MspInit+0x1c0>)
 8002eda:	f002 f83f 	bl	8004f5c <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8002ede:	4b45      	ldr	r3, [pc, #276]	; (8002ff4 <HAL_SD_MspInit+0x1c4>)
 8002ee0:	4a45      	ldr	r2, [pc, #276]	; (8002ff8 <HAL_SD_MspInit+0x1c8>)
 8002ee2:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8002ee4:	4b43      	ldr	r3, [pc, #268]	; (8002ff4 <HAL_SD_MspInit+0x1c4>)
 8002ee6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002eea:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002eec:	4b41      	ldr	r3, [pc, #260]	; (8002ff4 <HAL_SD_MspInit+0x1c4>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ef2:	4b40      	ldr	r3, [pc, #256]	; (8002ff4 <HAL_SD_MspInit+0x1c4>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ef8:	4b3e      	ldr	r3, [pc, #248]	; (8002ff4 <HAL_SD_MspInit+0x1c4>)
 8002efa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002efe:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002f00:	4b3c      	ldr	r3, [pc, #240]	; (8002ff4 <HAL_SD_MspInit+0x1c4>)
 8002f02:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f06:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002f08:	4b3a      	ldr	r3, [pc, #232]	; (8002ff4 <HAL_SD_MspInit+0x1c4>)
 8002f0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f0e:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8002f10:	4b38      	ldr	r3, [pc, #224]	; (8002ff4 <HAL_SD_MspInit+0x1c4>)
 8002f12:	2220      	movs	r2, #32
 8002f14:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002f16:	4b37      	ldr	r3, [pc, #220]	; (8002ff4 <HAL_SD_MspInit+0x1c4>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002f1c:	4b35      	ldr	r3, [pc, #212]	; (8002ff4 <HAL_SD_MspInit+0x1c4>)
 8002f1e:	2204      	movs	r2, #4
 8002f20:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002f22:	4b34      	ldr	r3, [pc, #208]	; (8002ff4 <HAL_SD_MspInit+0x1c4>)
 8002f24:	2203      	movs	r2, #3
 8002f26:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8002f28:	4b32      	ldr	r3, [pc, #200]	; (8002ff4 <HAL_SD_MspInit+0x1c4>)
 8002f2a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002f2e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002f30:	4b30      	ldr	r3, [pc, #192]	; (8002ff4 <HAL_SD_MspInit+0x1c4>)
 8002f32:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002f36:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8002f38:	482e      	ldr	r0, [pc, #184]	; (8002ff4 <HAL_SD_MspInit+0x1c4>)
 8002f3a:	f001 fbf9 	bl	8004730 <HAL_DMA_Init>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <HAL_SD_MspInit+0x118>
    {
      Error_Handler();
 8002f44:	f7ff fe14 	bl	8002b70 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a2a      	ldr	r2, [pc, #168]	; (8002ff4 <HAL_SD_MspInit+0x1c4>)
 8002f4c:	641a      	str	r2, [r3, #64]	; 0x40
 8002f4e:	4a29      	ldr	r2, [pc, #164]	; (8002ff4 <HAL_SD_MspInit+0x1c4>)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8002f54:	4b29      	ldr	r3, [pc, #164]	; (8002ffc <HAL_SD_MspInit+0x1cc>)
 8002f56:	4a2a      	ldr	r2, [pc, #168]	; (8003000 <HAL_SD_MspInit+0x1d0>)
 8002f58:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8002f5a:	4b28      	ldr	r3, [pc, #160]	; (8002ffc <HAL_SD_MspInit+0x1cc>)
 8002f5c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f60:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f62:	4b26      	ldr	r3, [pc, #152]	; (8002ffc <HAL_SD_MspInit+0x1cc>)
 8002f64:	2240      	movs	r2, #64	; 0x40
 8002f66:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f68:	4b24      	ldr	r3, [pc, #144]	; (8002ffc <HAL_SD_MspInit+0x1cc>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f6e:	4b23      	ldr	r3, [pc, #140]	; (8002ffc <HAL_SD_MspInit+0x1cc>)
 8002f70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f74:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002f76:	4b21      	ldr	r3, [pc, #132]	; (8002ffc <HAL_SD_MspInit+0x1cc>)
 8002f78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f7c:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002f7e:	4b1f      	ldr	r3, [pc, #124]	; (8002ffc <HAL_SD_MspInit+0x1cc>)
 8002f80:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f84:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8002f86:	4b1d      	ldr	r3, [pc, #116]	; (8002ffc <HAL_SD_MspInit+0x1cc>)
 8002f88:	2220      	movs	r2, #32
 8002f8a:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f8c:	4b1b      	ldr	r3, [pc, #108]	; (8002ffc <HAL_SD_MspInit+0x1cc>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002f92:	4b1a      	ldr	r3, [pc, #104]	; (8002ffc <HAL_SD_MspInit+0x1cc>)
 8002f94:	2204      	movs	r2, #4
 8002f96:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002f98:	4b18      	ldr	r3, [pc, #96]	; (8002ffc <HAL_SD_MspInit+0x1cc>)
 8002f9a:	2203      	movs	r2, #3
 8002f9c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8002f9e:	4b17      	ldr	r3, [pc, #92]	; (8002ffc <HAL_SD_MspInit+0x1cc>)
 8002fa0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002fa4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002fa6:	4b15      	ldr	r3, [pc, #84]	; (8002ffc <HAL_SD_MspInit+0x1cc>)
 8002fa8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002fac:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8002fae:	4813      	ldr	r0, [pc, #76]	; (8002ffc <HAL_SD_MspInit+0x1cc>)
 8002fb0:	f001 fbbe 	bl	8004730 <HAL_DMA_Init>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <HAL_SD_MspInit+0x18e>
    {
      Error_Handler();
 8002fba:	f7ff fdd9 	bl	8002b70 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a0e      	ldr	r2, [pc, #56]	; (8002ffc <HAL_SD_MspInit+0x1cc>)
 8002fc2:	63da      	str	r2, [r3, #60]	; 0x3c
 8002fc4:	4a0d      	ldr	r2, [pc, #52]	; (8002ffc <HAL_SD_MspInit+0x1cc>)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8002fca:	2200      	movs	r2, #0
 8002fcc:	2100      	movs	r1, #0
 8002fce:	2031      	movs	r0, #49	; 0x31
 8002fd0:	f001 fb77 	bl	80046c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8002fd4:	2031      	movs	r0, #49	; 0x31
 8002fd6:	f001 fb90 	bl	80046fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002fda:	bf00      	nop
 8002fdc:	3728      	adds	r7, #40	; 0x28
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	40012c00 	.word	0x40012c00
 8002fe8:	40023800 	.word	0x40023800
 8002fec:	40020800 	.word	0x40020800
 8002ff0:	40020c00 	.word	0x40020c00
 8002ff4:	200007d4 	.word	0x200007d4
 8002ff8:	40026458 	.word	0x40026458
 8002ffc:	20000834 	.word	0x20000834
 8003000:	400264a0 	.word	0x400264a0

08003004 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b08e      	sub	sp, #56	; 0x38
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800300c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]
 8003014:	605a      	str	r2, [r3, #4]
 8003016:	609a      	str	r2, [r3, #8]
 8003018:	60da      	str	r2, [r3, #12]
 800301a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a45      	ldr	r2, [pc, #276]	; (8003138 <HAL_SPI_MspInit+0x134>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d128      	bne.n	8003078 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003026:	4b45      	ldr	r3, [pc, #276]	; (800313c <HAL_SPI_MspInit+0x138>)
 8003028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800302a:	4a44      	ldr	r2, [pc, #272]	; (800313c <HAL_SPI_MspInit+0x138>)
 800302c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003030:	6453      	str	r3, [r2, #68]	; 0x44
 8003032:	4b42      	ldr	r3, [pc, #264]	; (800313c <HAL_SPI_MspInit+0x138>)
 8003034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003036:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800303a:	623b      	str	r3, [r7, #32]
 800303c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800303e:	4b3f      	ldr	r3, [pc, #252]	; (800313c <HAL_SPI_MspInit+0x138>)
 8003040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003042:	4a3e      	ldr	r2, [pc, #248]	; (800313c <HAL_SPI_MspInit+0x138>)
 8003044:	f043 0301 	orr.w	r3, r3, #1
 8003048:	6313      	str	r3, [r2, #48]	; 0x30
 800304a:	4b3c      	ldr	r3, [pc, #240]	; (800313c <HAL_SPI_MspInit+0x138>)
 800304c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	61fb      	str	r3, [r7, #28]
 8003054:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003056:	23e0      	movs	r3, #224	; 0xe0
 8003058:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800305a:	2302      	movs	r3, #2
 800305c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305e:	2300      	movs	r3, #0
 8003060:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003062:	2303      	movs	r3, #3
 8003064:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003066:	2305      	movs	r3, #5
 8003068:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800306a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800306e:	4619      	mov	r1, r3
 8003070:	4833      	ldr	r0, [pc, #204]	; (8003140 <HAL_SPI_MspInit+0x13c>)
 8003072:	f001 ff73 	bl	8004f5c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003076:	e05b      	b.n	8003130 <HAL_SPI_MspInit+0x12c>
  else if(hspi->Instance==SPI2)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a31      	ldr	r2, [pc, #196]	; (8003144 <HAL_SPI_MspInit+0x140>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d129      	bne.n	80030d6 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003082:	4b2e      	ldr	r3, [pc, #184]	; (800313c <HAL_SPI_MspInit+0x138>)
 8003084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003086:	4a2d      	ldr	r2, [pc, #180]	; (800313c <HAL_SPI_MspInit+0x138>)
 8003088:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800308c:	6413      	str	r3, [r2, #64]	; 0x40
 800308e:	4b2b      	ldr	r3, [pc, #172]	; (800313c <HAL_SPI_MspInit+0x138>)
 8003090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003092:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003096:	61bb      	str	r3, [r7, #24]
 8003098:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800309a:	4b28      	ldr	r3, [pc, #160]	; (800313c <HAL_SPI_MspInit+0x138>)
 800309c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309e:	4a27      	ldr	r2, [pc, #156]	; (800313c <HAL_SPI_MspInit+0x138>)
 80030a0:	f043 0302 	orr.w	r3, r3, #2
 80030a4:	6313      	str	r3, [r2, #48]	; 0x30
 80030a6:	4b25      	ldr	r3, [pc, #148]	; (800313c <HAL_SPI_MspInit+0x138>)
 80030a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	617b      	str	r3, [r7, #20]
 80030b0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80030b2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80030b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030b8:	2302      	movs	r3, #2
 80030ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030bc:	2300      	movs	r3, #0
 80030be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030c0:	2303      	movs	r3, #3
 80030c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80030c4:	2305      	movs	r3, #5
 80030c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030cc:	4619      	mov	r1, r3
 80030ce:	481e      	ldr	r0, [pc, #120]	; (8003148 <HAL_SPI_MspInit+0x144>)
 80030d0:	f001 ff44 	bl	8004f5c <HAL_GPIO_Init>
}
 80030d4:	e02c      	b.n	8003130 <HAL_SPI_MspInit+0x12c>
  else if(hspi->Instance==SPI3)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a1c      	ldr	r2, [pc, #112]	; (800314c <HAL_SPI_MspInit+0x148>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d127      	bne.n	8003130 <HAL_SPI_MspInit+0x12c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80030e0:	4b16      	ldr	r3, [pc, #88]	; (800313c <HAL_SPI_MspInit+0x138>)
 80030e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e4:	4a15      	ldr	r2, [pc, #84]	; (800313c <HAL_SPI_MspInit+0x138>)
 80030e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030ea:	6413      	str	r3, [r2, #64]	; 0x40
 80030ec:	4b13      	ldr	r3, [pc, #76]	; (800313c <HAL_SPI_MspInit+0x138>)
 80030ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030f4:	613b      	str	r3, [r7, #16]
 80030f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030f8:	4b10      	ldr	r3, [pc, #64]	; (800313c <HAL_SPI_MspInit+0x138>)
 80030fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fc:	4a0f      	ldr	r2, [pc, #60]	; (800313c <HAL_SPI_MspInit+0x138>)
 80030fe:	f043 0302 	orr.w	r3, r3, #2
 8003102:	6313      	str	r3, [r2, #48]	; 0x30
 8003104:	4b0d      	ldr	r3, [pc, #52]	; (800313c <HAL_SPI_MspInit+0x138>)
 8003106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003108:	f003 0302 	and.w	r3, r3, #2
 800310c:	60fb      	str	r3, [r7, #12]
 800310e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003110:	2338      	movs	r3, #56	; 0x38
 8003112:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003114:	2302      	movs	r3, #2
 8003116:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003118:	2300      	movs	r3, #0
 800311a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800311c:	2303      	movs	r3, #3
 800311e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003120:	2306      	movs	r3, #6
 8003122:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003124:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003128:	4619      	mov	r1, r3
 800312a:	4807      	ldr	r0, [pc, #28]	; (8003148 <HAL_SPI_MspInit+0x144>)
 800312c:	f001 ff16 	bl	8004f5c <HAL_GPIO_Init>
}
 8003130:	bf00      	nop
 8003132:	3738      	adds	r7, #56	; 0x38
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	40013000 	.word	0x40013000
 800313c:	40023800 	.word	0x40023800
 8003140:	40020000 	.word	0x40020000
 8003144:	40003800 	.word	0x40003800
 8003148:	40020400 	.word	0x40020400
 800314c:	40003c00 	.word	0x40003c00

08003150 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003150:	b480      	push	{r7}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a13      	ldr	r2, [pc, #76]	; (80031ac <HAL_TIM_PWM_MspInit+0x5c>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d10c      	bne.n	800317c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003162:	4b13      	ldr	r3, [pc, #76]	; (80031b0 <HAL_TIM_PWM_MspInit+0x60>)
 8003164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003166:	4a12      	ldr	r2, [pc, #72]	; (80031b0 <HAL_TIM_PWM_MspInit+0x60>)
 8003168:	f043 0301 	orr.w	r3, r3, #1
 800316c:	6453      	str	r3, [r2, #68]	; 0x44
 800316e:	4b10      	ldr	r3, [pc, #64]	; (80031b0 <HAL_TIM_PWM_MspInit+0x60>)
 8003170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	60fb      	str	r3, [r7, #12]
 8003178:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800317a:	e010      	b.n	800319e <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM2)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003184:	d10b      	bne.n	800319e <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003186:	4b0a      	ldr	r3, [pc, #40]	; (80031b0 <HAL_TIM_PWM_MspInit+0x60>)
 8003188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318a:	4a09      	ldr	r2, [pc, #36]	; (80031b0 <HAL_TIM_PWM_MspInit+0x60>)
 800318c:	f043 0301 	orr.w	r3, r3, #1
 8003190:	6413      	str	r3, [r2, #64]	; 0x40
 8003192:	4b07      	ldr	r3, [pc, #28]	; (80031b0 <HAL_TIM_PWM_MspInit+0x60>)
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	60bb      	str	r3, [r7, #8]
 800319c:	68bb      	ldr	r3, [r7, #8]
}
 800319e:	bf00      	nop
 80031a0:	3714      	adds	r7, #20
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	40010000 	.word	0x40010000
 80031b0:	40023800 	.word	0x40023800

080031b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a1a      	ldr	r2, [pc, #104]	; (800322c <HAL_TIM_Base_MspInit+0x78>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d114      	bne.n	80031f0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80031c6:	4b1a      	ldr	r3, [pc, #104]	; (8003230 <HAL_TIM_Base_MspInit+0x7c>)
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	4a19      	ldr	r2, [pc, #100]	; (8003230 <HAL_TIM_Base_MspInit+0x7c>)
 80031cc:	f043 0302 	orr.w	r3, r3, #2
 80031d0:	6413      	str	r3, [r2, #64]	; 0x40
 80031d2:	4b17      	ldr	r3, [pc, #92]	; (8003230 <HAL_TIM_Base_MspInit+0x7c>)
 80031d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	60fb      	str	r3, [r7, #12]
 80031dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80031de:	2200      	movs	r2, #0
 80031e0:	2100      	movs	r1, #0
 80031e2:	201d      	movs	r0, #29
 80031e4:	f001 fa6d 	bl	80046c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80031e8:	201d      	movs	r0, #29
 80031ea:	f001 fa86 	bl	80046fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80031ee:	e018      	b.n	8003222 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a0f      	ldr	r2, [pc, #60]	; (8003234 <HAL_TIM_Base_MspInit+0x80>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d113      	bne.n	8003222 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80031fa:	4b0d      	ldr	r3, [pc, #52]	; (8003230 <HAL_TIM_Base_MspInit+0x7c>)
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fe:	4a0c      	ldr	r2, [pc, #48]	; (8003230 <HAL_TIM_Base_MspInit+0x7c>)
 8003200:	f043 0304 	orr.w	r3, r3, #4
 8003204:	6413      	str	r3, [r2, #64]	; 0x40
 8003206:	4b0a      	ldr	r3, [pc, #40]	; (8003230 <HAL_TIM_Base_MspInit+0x7c>)
 8003208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320a:	f003 0304 	and.w	r3, r3, #4
 800320e:	60bb      	str	r3, [r7, #8]
 8003210:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003212:	2200      	movs	r2, #0
 8003214:	2100      	movs	r1, #0
 8003216:	201e      	movs	r0, #30
 8003218:	f001 fa53 	bl	80046c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800321c:	201e      	movs	r0, #30
 800321e:	f001 fa6c 	bl	80046fa <HAL_NVIC_EnableIRQ>
}
 8003222:	bf00      	nop
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	40000400 	.word	0x40000400
 8003230:	40023800 	.word	0x40023800
 8003234:	40000800 	.word	0x40000800

08003238 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b08a      	sub	sp, #40	; 0x28
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003240:	f107 0314 	add.w	r3, r7, #20
 8003244:	2200      	movs	r2, #0
 8003246:	601a      	str	r2, [r3, #0]
 8003248:	605a      	str	r2, [r3, #4]
 800324a:	609a      	str	r2, [r3, #8]
 800324c:	60da      	str	r2, [r3, #12]
 800324e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a23      	ldr	r2, [pc, #140]	; (80032e4 <HAL_TIM_MspPostInit+0xac>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d11d      	bne.n	8003296 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800325a:	4b23      	ldr	r3, [pc, #140]	; (80032e8 <HAL_TIM_MspPostInit+0xb0>)
 800325c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325e:	4a22      	ldr	r2, [pc, #136]	; (80032e8 <HAL_TIM_MspPostInit+0xb0>)
 8003260:	f043 0301 	orr.w	r3, r3, #1
 8003264:	6313      	str	r3, [r2, #48]	; 0x30
 8003266:	4b20      	ldr	r3, [pc, #128]	; (80032e8 <HAL_TIM_MspPostInit+0xb0>)
 8003268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	613b      	str	r3, [r7, #16]
 8003270:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003272:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003276:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003278:	2302      	movs	r3, #2
 800327a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800327c:	2300      	movs	r3, #0
 800327e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003280:	2300      	movs	r3, #0
 8003282:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003284:	2301      	movs	r3, #1
 8003286:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003288:	f107 0314 	add.w	r3, r7, #20
 800328c:	4619      	mov	r1, r3
 800328e:	4817      	ldr	r0, [pc, #92]	; (80032ec <HAL_TIM_MspPostInit+0xb4>)
 8003290:	f001 fe64 	bl	8004f5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003294:	e021      	b.n	80032da <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM2)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800329e:	d11c      	bne.n	80032da <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032a0:	4b11      	ldr	r3, [pc, #68]	; (80032e8 <HAL_TIM_MspPostInit+0xb0>)
 80032a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a4:	4a10      	ldr	r2, [pc, #64]	; (80032e8 <HAL_TIM_MspPostInit+0xb0>)
 80032a6:	f043 0301 	orr.w	r3, r3, #1
 80032aa:	6313      	str	r3, [r2, #48]	; 0x30
 80032ac:	4b0e      	ldr	r3, [pc, #56]	; (80032e8 <HAL_TIM_MspPostInit+0xb0>)
 80032ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	60fb      	str	r3, [r7, #12]
 80032b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80032b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032be:	2302      	movs	r3, #2
 80032c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c2:	2300      	movs	r3, #0
 80032c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032c6:	2300      	movs	r3, #0
 80032c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80032ca:	2301      	movs	r3, #1
 80032cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ce:	f107 0314 	add.w	r3, r7, #20
 80032d2:	4619      	mov	r1, r3
 80032d4:	4805      	ldr	r0, [pc, #20]	; (80032ec <HAL_TIM_MspPostInit+0xb4>)
 80032d6:	f001 fe41 	bl	8004f5c <HAL_GPIO_Init>
}
 80032da:	bf00      	nop
 80032dc:	3728      	adds	r7, #40	; 0x28
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	40010000 	.word	0x40010000
 80032e8:	40023800 	.word	0x40023800
 80032ec:	40020000 	.word	0x40020000

080032f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b08a      	sub	sp, #40	; 0x28
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032f8:	f107 0314 	add.w	r3, r7, #20
 80032fc:	2200      	movs	r2, #0
 80032fe:	601a      	str	r2, [r3, #0]
 8003300:	605a      	str	r2, [r3, #4]
 8003302:	609a      	str	r2, [r3, #8]
 8003304:	60da      	str	r2, [r3, #12]
 8003306:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a1b      	ldr	r2, [pc, #108]	; (800337c <HAL_UART_MspInit+0x8c>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d130      	bne.n	8003374 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003312:	4b1b      	ldr	r3, [pc, #108]	; (8003380 <HAL_UART_MspInit+0x90>)
 8003314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003316:	4a1a      	ldr	r2, [pc, #104]	; (8003380 <HAL_UART_MspInit+0x90>)
 8003318:	f043 0310 	orr.w	r3, r3, #16
 800331c:	6453      	str	r3, [r2, #68]	; 0x44
 800331e:	4b18      	ldr	r3, [pc, #96]	; (8003380 <HAL_UART_MspInit+0x90>)
 8003320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003322:	f003 0310 	and.w	r3, r3, #16
 8003326:	613b      	str	r3, [r7, #16]
 8003328:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800332a:	4b15      	ldr	r3, [pc, #84]	; (8003380 <HAL_UART_MspInit+0x90>)
 800332c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332e:	4a14      	ldr	r2, [pc, #80]	; (8003380 <HAL_UART_MspInit+0x90>)
 8003330:	f043 0301 	orr.w	r3, r3, #1
 8003334:	6313      	str	r3, [r2, #48]	; 0x30
 8003336:	4b12      	ldr	r3, [pc, #72]	; (8003380 <HAL_UART_MspInit+0x90>)
 8003338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	60fb      	str	r3, [r7, #12]
 8003340:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003342:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003346:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003348:	2302      	movs	r3, #2
 800334a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800334c:	2300      	movs	r3, #0
 800334e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003350:	2303      	movs	r3, #3
 8003352:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003354:	2307      	movs	r3, #7
 8003356:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003358:	f107 0314 	add.w	r3, r7, #20
 800335c:	4619      	mov	r1, r3
 800335e:	4809      	ldr	r0, [pc, #36]	; (8003384 <HAL_UART_MspInit+0x94>)
 8003360:	f001 fdfc 	bl	8004f5c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003364:	2200      	movs	r2, #0
 8003366:	2100      	movs	r1, #0
 8003368:	2025      	movs	r0, #37	; 0x25
 800336a:	f001 f9aa 	bl	80046c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800336e:	2025      	movs	r0, #37	; 0x25
 8003370:	f001 f9c3 	bl	80046fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003374:	bf00      	nop
 8003376:	3728      	adds	r7, #40	; 0x28
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	40011000 	.word	0x40011000
 8003380:	40023800 	.word	0x40023800
 8003384:	40020000 	.word	0x40020000

08003388 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800338c:	e7fe      	b.n	800338c <NMI_Handler+0x4>

0800338e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800338e:	b480      	push	{r7}
 8003390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003392:	e7fe      	b.n	8003392 <HardFault_Handler+0x4>

08003394 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003398:	e7fe      	b.n	8003398 <MemManage_Handler+0x4>

0800339a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800339a:	b480      	push	{r7}
 800339c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800339e:	e7fe      	b.n	800339e <BusFault_Handler+0x4>

080033a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033a4:	e7fe      	b.n	80033a4 <UsageFault_Handler+0x4>

080033a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033a6:	b480      	push	{r7}
 80033a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033aa:	bf00      	nop
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033b4:	b480      	push	{r7}
 80033b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033b8:	bf00      	nop
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr

080033c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033c2:	b480      	push	{r7}
 80033c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033c6:	bf00      	nop
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033d4:	f000 fc34 	bl	8003c40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033d8:	bf00      	nop
 80033da:	bd80      	pop	{r7, pc}

080033dc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80033e0:	2080      	movs	r0, #128	; 0x80
 80033e2:	f001 ff89 	bl	80052f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80033e6:	bf00      	nop
 80033e8:	bd80      	pop	{r7, pc}
	...

080033ec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80033f0:	4802      	ldr	r0, [pc, #8]	; (80033fc <TIM3_IRQHandler+0x10>)
 80033f2:	f005 fcf9 	bl	8008de8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80033f6:	bf00      	nop
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	20000318 	.word	0x20000318

08003400 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003404:	4802      	ldr	r0, [pc, #8]	; (8003410 <TIM4_IRQHandler+0x10>)
 8003406:	f005 fcef 	bl	8008de8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800340a:	bf00      	nop
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	200002c4 	.word	0x200002c4

08003414 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003418:	4802      	ldr	r0, [pc, #8]	; (8003424 <USART1_IRQHandler+0x10>)
 800341a:	f006 fdd3 	bl	8009fc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800341e:	bf00      	nop
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	200006d0 	.word	0x200006d0

08003428 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 800342c:	4802      	ldr	r0, [pc, #8]	; (8003438 <SDMMC1_IRQHandler+0x10>)
 800342e:	f003 facd 	bl	80069cc <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8003432:	bf00      	nop
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	20000534 	.word	0x20000534

0800343c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003440:	4802      	ldr	r0, [pc, #8]	; (800344c <DMA2_Stream0_IRQHandler+0x10>)
 8003442:	f001 fb15 	bl	8004a70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003446:	bf00      	nop
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	20000754 	.word	0x20000754

08003450 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8003454:	4802      	ldr	r0, [pc, #8]	; (8003460 <DMA2_Stream3_IRQHandler+0x10>)
 8003456:	f001 fb0b 	bl	8004a70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800345a:	bf00      	nop
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	200007d4 	.word	0x200007d4

08003464 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8003468:	4802      	ldr	r0, [pc, #8]	; (8003474 <DMA2_Stream6_IRQHandler+0x10>)
 800346a:	f001 fb01 	bl	8004a70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800346e:	bf00      	nop
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	20000834 	.word	0x20000834

08003478 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003478:	b480      	push	{r7}
 800347a:	af00      	add	r7, sp, #0
	return 1;
 800347c:	2301      	movs	r3, #1
}
 800347e:	4618      	mov	r0, r3
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <_kill>:

int _kill(int pid, int sig)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003492:	f008 fdb7 	bl	800c004 <__errno>
 8003496:	4603      	mov	r3, r0
 8003498:	2216      	movs	r2, #22
 800349a:	601a      	str	r2, [r3, #0]
	return -1;
 800349c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3708      	adds	r7, #8
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <_exit>:

void _exit (int status)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80034b0:	f04f 31ff 	mov.w	r1, #4294967295
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f7ff ffe7 	bl	8003488 <_kill>
	while (1) {}		/* Make sure we hang here */
 80034ba:	e7fe      	b.n	80034ba <_exit+0x12>

080034bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b086      	sub	sp, #24
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034c8:	2300      	movs	r3, #0
 80034ca:	617b      	str	r3, [r7, #20]
 80034cc:	e00a      	b.n	80034e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80034ce:	f3af 8000 	nop.w
 80034d2:	4601      	mov	r1, r0
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	1c5a      	adds	r2, r3, #1
 80034d8:	60ba      	str	r2, [r7, #8]
 80034da:	b2ca      	uxtb	r2, r1
 80034dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	3301      	adds	r3, #1
 80034e2:	617b      	str	r3, [r7, #20]
 80034e4:	697a      	ldr	r2, [r7, #20]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	dbf0      	blt.n	80034ce <_read+0x12>
	}

return len;
 80034ec:	687b      	ldr	r3, [r7, #4]
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3718      	adds	r7, #24
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b086      	sub	sp, #24
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	60f8      	str	r0, [r7, #12]
 80034fe:	60b9      	str	r1, [r7, #8]
 8003500:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003502:	2300      	movs	r3, #0
 8003504:	617b      	str	r3, [r7, #20]
 8003506:	e009      	b.n	800351c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	1c5a      	adds	r2, r3, #1
 800350c:	60ba      	str	r2, [r7, #8]
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	4618      	mov	r0, r3
 8003512:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	3301      	adds	r3, #1
 800351a:	617b      	str	r3, [r7, #20]
 800351c:	697a      	ldr	r2, [r7, #20]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	429a      	cmp	r2, r3
 8003522:	dbf1      	blt.n	8003508 <_write+0x12>
	}
	return len;
 8003524:	687b      	ldr	r3, [r7, #4]
}
 8003526:	4618      	mov	r0, r3
 8003528:	3718      	adds	r7, #24
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <_close>:

int _close(int file)
{
 800352e:	b480      	push	{r7}
 8003530:	b083      	sub	sp, #12
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
	return -1;
 8003536:	f04f 33ff 	mov.w	r3, #4294967295
}
 800353a:	4618      	mov	r0, r3
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr

08003546 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003546:	b480      	push	{r7}
 8003548:	b083      	sub	sp, #12
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
 800354e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003556:	605a      	str	r2, [r3, #4]
	return 0;
 8003558:	2300      	movs	r3, #0
}
 800355a:	4618      	mov	r0, r3
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr

08003566 <_isatty>:

int _isatty(int file)
{
 8003566:	b480      	push	{r7}
 8003568:	b083      	sub	sp, #12
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
	return 1;
 800356e:	2301      	movs	r3, #1
}
 8003570:	4618      	mov	r0, r3
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
	return 0;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3714      	adds	r7, #20
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
	...

08003598 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b086      	sub	sp, #24
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035a0:	4a14      	ldr	r2, [pc, #80]	; (80035f4 <_sbrk+0x5c>)
 80035a2:	4b15      	ldr	r3, [pc, #84]	; (80035f8 <_sbrk+0x60>)
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035ac:	4b13      	ldr	r3, [pc, #76]	; (80035fc <_sbrk+0x64>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d102      	bne.n	80035ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035b4:	4b11      	ldr	r3, [pc, #68]	; (80035fc <_sbrk+0x64>)
 80035b6:	4a12      	ldr	r2, [pc, #72]	; (8003600 <_sbrk+0x68>)
 80035b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035ba:	4b10      	ldr	r3, [pc, #64]	; (80035fc <_sbrk+0x64>)
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4413      	add	r3, r2
 80035c2:	693a      	ldr	r2, [r7, #16]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d207      	bcs.n	80035d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035c8:	f008 fd1c 	bl	800c004 <__errno>
 80035cc:	4603      	mov	r3, r0
 80035ce:	220c      	movs	r2, #12
 80035d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80035d2:	f04f 33ff 	mov.w	r3, #4294967295
 80035d6:	e009      	b.n	80035ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80035d8:	4b08      	ldr	r3, [pc, #32]	; (80035fc <_sbrk+0x64>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80035de:	4b07      	ldr	r3, [pc, #28]	; (80035fc <_sbrk+0x64>)
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4413      	add	r3, r2
 80035e6:	4a05      	ldr	r2, [pc, #20]	; (80035fc <_sbrk+0x64>)
 80035e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80035ea:	68fb      	ldr	r3, [r7, #12]
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3718      	adds	r7, #24
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	20040000 	.word	0x20040000
 80035f8:	00000800 	.word	0x00000800
 80035fc:	20000234 	.word	0x20000234
 8003600:	20000d18 	.word	0x20000d18

08003604 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003604:	b480      	push	{r7}
 8003606:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003608:	4b06      	ldr	r3, [pc, #24]	; (8003624 <SystemInit+0x20>)
 800360a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800360e:	4a05      	ldr	r2, [pc, #20]	; (8003624 <SystemInit+0x20>)
 8003610:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003614:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003618:	bf00      	nop
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	e000ed00 	.word	0xe000ed00

08003628 <HAL_UART_RxCpltCallback>:
 */

#include "uart.h"

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003628:	b5f0      	push	{r4, r5, r6, r7, lr}
 800362a:	b087      	sub	sp, #28
 800362c:	af04      	add	r7, sp, #16
 800362e:	6078      	str	r0, [r7, #4]
	switch(uart_received[0])
 8003630:	4b84      	ldr	r3, [pc, #528]	; (8003844 <HAL_UART_RxCpltCallback+0x21c>)
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	3b62      	subs	r3, #98	; 0x62
 8003636:	2b16      	cmp	r3, #22
 8003638:	f200 81b2 	bhi.w	80039a0 <HAL_UART_RxCpltCallback+0x378>
 800363c:	a201      	add	r2, pc, #4	; (adr r2, 8003644 <HAL_UART_RxCpltCallback+0x1c>)
 800363e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003642:	bf00      	nop
 8003644:	080039a1 	.word	0x080039a1
 8003648:	080039a1 	.word	0x080039a1
 800364c:	08003741 	.word	0x08003741
 8003650:	080039a1 	.word	0x080039a1
 8003654:	08003955 	.word	0x08003955
 8003658:	080039a1 	.word	0x080039a1
 800365c:	080039a1 	.word	0x080039a1
 8003660:	0800377b 	.word	0x0800377b
 8003664:	080039a1 	.word	0x080039a1
 8003668:	080036cd 	.word	0x080036cd
 800366c:	080039a1 	.word	0x080039a1
 8003670:	080039a1 	.word	0x080039a1
 8003674:	080039a1 	.word	0x080039a1
 8003678:	080039a1 	.word	0x080039a1
 800367c:	080036af 	.word	0x080036af
 8003680:	080039a1 	.word	0x080039a1
 8003684:	080039a1 	.word	0x080039a1
 8003688:	080039a1 	.word	0x080039a1
 800368c:	080036a1 	.word	0x080036a1
 8003690:	0800386d 	.word	0x0800386d
 8003694:	08003795 	.word	0x08003795
 8003698:	080039a1 	.word	0x080039a1
 800369c:	080037e9 	.word	0x080037e9
	{
		case 't':
			HAL_TIM_Base_Start_IT(&htim3);
 80036a0:	4869      	ldr	r0, [pc, #420]	; (8003848 <HAL_UART_RxCpltCallback+0x220>)
 80036a2:	f005 f9a9 	bl	80089f8 <HAL_TIM_Base_Start_IT>
			HAL_TIM_Base_Start_IT(&htim4);
 80036a6:	4869      	ldr	r0, [pc, #420]	; (800384c <HAL_UART_RxCpltCallback+0x224>)
 80036a8:	f005 f9a6 	bl	80089f8 <HAL_TIM_Base_Start_IT>
			//mode_ride=1;
			//lama=50;
			break;
 80036ac:	e178      	b.n	80039a0 <HAL_UART_RxCpltCallback+0x378>

		case 'p':
			HAL_TIM_Base_Stop_IT(&htim3);
 80036ae:	4866      	ldr	r0, [pc, #408]	; (8003848 <HAL_UART_RxCpltCallback+0x220>)
 80036b0:	f005 fa1a 	bl	8008ae8 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Stop_IT(&htim4);
 80036b4:	4865      	ldr	r0, [pc, #404]	; (800384c <HAL_UART_RxCpltCallback+0x224>)
 80036b6:	f005 fa17 	bl	8008ae8 <HAL_TIM_Base_Stop_IT>
			MOTORS_SetVelocity(0, 0);
 80036ba:	2100      	movs	r1, #0
 80036bc:	2000      	movs	r0, #0
 80036be:	f7ff fa5d 	bl	8002b7c <MOTORS_SetVelocity>
			MOTORS_SetVelocity(0, 0);
 80036c2:	2100      	movs	r1, #0
 80036c4:	2000      	movs	r0, #0
 80036c6:	f7ff fa59 	bl	8002b7c <MOTORS_SetVelocity>
			//mode_ride=0;
			break;
 80036ca:	e169      	b.n	80039a0 <HAL_UART_RxCpltCallback+0x378>
		case 'b':
			//motor_basic_speed=UART_FrameToNumber(uart_received);
			break;

		case 'k':
			if(uart_received[1]=='g')
 80036cc:	4b5d      	ldr	r3, [pc, #372]	; (8003844 <HAL_UART_RxCpltCallback+0x21c>)
 80036ce:	785b      	ldrb	r3, [r3, #1]
 80036d0:	2b67      	cmp	r3, #103	; 0x67
 80036d2:	d117      	bne.n	8003704 <HAL_UART_RxCpltCallback+0xdc>
			{
				if(uart_received[2]=='.')
 80036d4:	4b5b      	ldr	r3, [pc, #364]	; (8003844 <HAL_UART_RxCpltCallback+0x21c>)
 80036d6:	789b      	ldrb	r3, [r3, #2]
 80036d8:	2b2e      	cmp	r3, #46	; 0x2e
 80036da:	d108      	bne.n	80036ee <HAL_UART_RxCpltCallback+0xc6>
					pid_k_coefficient=UART_FrameToFloat3(uart_received);
 80036dc:	4859      	ldr	r0, [pc, #356]	; (8003844 <HAL_UART_RxCpltCallback+0x21c>)
 80036de:	f000 fa1d 	bl	8003b1c <UART_FrameToFloat3>
 80036e2:	eef0 7a40 	vmov.f32	s15, s0
 80036e6:	4b5a      	ldr	r3, [pc, #360]	; (8003850 <HAL_UART_RxCpltCallback+0x228>)
 80036e8:	edc3 7a00 	vstr	s15, [r3]
 80036ec:	e00a      	b.n	8003704 <HAL_UART_RxCpltCallback+0xdc>
				else
					pid_k_coefficient=UART_FrameToNumber(uart_received);
 80036ee:	4855      	ldr	r0, [pc, #340]	; (8003844 <HAL_UART_RxCpltCallback+0x21c>)
 80036f0:	f000 f97c 	bl	80039ec <UART_FrameToNumber>
 80036f4:	4603      	mov	r3, r0
 80036f6:	ee07 3a90 	vmov	s15, r3
 80036fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036fe:	4b54      	ldr	r3, [pc, #336]	; (8003850 <HAL_UART_RxCpltCallback+0x228>)
 8003700:	edc3 7a00 	vstr	s15, [r3]
			}
			if(uart_received[1]=='m')
 8003704:	4b4f      	ldr	r3, [pc, #316]	; (8003844 <HAL_UART_RxCpltCallback+0x21c>)
 8003706:	785b      	ldrb	r3, [r3, #1]
 8003708:	2b6d      	cmp	r3, #109	; 0x6d
 800370a:	f040 813c 	bne.w	8003986 <HAL_UART_RxCpltCallback+0x35e>
			{
				if(uart_received[2]=='.')
 800370e:	4b4d      	ldr	r3, [pc, #308]	; (8003844 <HAL_UART_RxCpltCallback+0x21c>)
 8003710:	789b      	ldrb	r3, [r3, #2]
 8003712:	2b2e      	cmp	r3, #46	; 0x2e
 8003714:	d108      	bne.n	8003728 <HAL_UART_RxCpltCallback+0x100>
					pid_motor_k=UART_FrameToFloat(uart_received);
 8003716:	484b      	ldr	r0, [pc, #300]	; (8003844 <HAL_UART_RxCpltCallback+0x21c>)
 8003718:	f000 f9a4 	bl	8003a64 <UART_FrameToFloat>
 800371c:	eef0 7a40 	vmov.f32	s15, s0
 8003720:	4b4c      	ldr	r3, [pc, #304]	; (8003854 <HAL_UART_RxCpltCallback+0x22c>)
 8003722:	edc3 7a00 	vstr	s15, [r3]
				else
					pid_motor_k=UART_FrameToNumber(uart_received);
			}
			break;
 8003726:	e12e      	b.n	8003986 <HAL_UART_RxCpltCallback+0x35e>
					pid_motor_k=UART_FrameToNumber(uart_received);
 8003728:	4846      	ldr	r0, [pc, #280]	; (8003844 <HAL_UART_RxCpltCallback+0x21c>)
 800372a:	f000 f95f 	bl	80039ec <UART_FrameToNumber>
 800372e:	4603      	mov	r3, r0
 8003730:	ee07 3a90 	vmov	s15, r3
 8003734:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003738:	4b46      	ldr	r3, [pc, #280]	; (8003854 <HAL_UART_RxCpltCallback+0x22c>)
 800373a:	edc3 7a00 	vstr	s15, [r3]
			break;
 800373e:	e122      	b.n	8003986 <HAL_UART_RxCpltCallback+0x35e>

		case 'd':
			if(uart_received[1]=='g')
 8003740:	4b40      	ldr	r3, [pc, #256]	; (8003844 <HAL_UART_RxCpltCallback+0x21c>)
 8003742:	785b      	ldrb	r3, [r3, #1]
 8003744:	2b67      	cmp	r3, #103	; 0x67
 8003746:	d107      	bne.n	8003758 <HAL_UART_RxCpltCallback+0x130>
				pid_Td_coefficient=UART_FrameToFloat3(uart_received);
 8003748:	483e      	ldr	r0, [pc, #248]	; (8003844 <HAL_UART_RxCpltCallback+0x21c>)
 800374a:	f000 f9e7 	bl	8003b1c <UART_FrameToFloat3>
 800374e:	eef0 7a40 	vmov.f32	s15, s0
 8003752:	4b41      	ldr	r3, [pc, #260]	; (8003858 <HAL_UART_RxCpltCallback+0x230>)
 8003754:	edc3 7a00 	vstr	s15, [r3]
			if(uart_received[1]=='m')
 8003758:	4b3a      	ldr	r3, [pc, #232]	; (8003844 <HAL_UART_RxCpltCallback+0x21c>)
 800375a:	785b      	ldrb	r3, [r3, #1]
 800375c:	2b6d      	cmp	r3, #109	; 0x6d
 800375e:	f040 8114 	bne.w	800398a <HAL_UART_RxCpltCallback+0x362>
				pid_motor_Td=UART_FrameToNumber(uart_received);
 8003762:	4838      	ldr	r0, [pc, #224]	; (8003844 <HAL_UART_RxCpltCallback+0x21c>)
 8003764:	f000 f942 	bl	80039ec <UART_FrameToNumber>
 8003768:	4603      	mov	r3, r0
 800376a:	ee07 3a90 	vmov	s15, r3
 800376e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003772:	4b3a      	ldr	r3, [pc, #232]	; (800385c <HAL_UART_RxCpltCallback+0x234>)
 8003774:	edc3 7a00 	vstr	s15, [r3]
			break;
 8003778:	e107      	b.n	800398a <HAL_UART_RxCpltCallback+0x362>

		case 'i':
			if(uart_received[1]=='m')
 800377a:	4b32      	ldr	r3, [pc, #200]	; (8003844 <HAL_UART_RxCpltCallback+0x21c>)
 800377c:	785b      	ldrb	r3, [r3, #1]
 800377e:	2b6d      	cmp	r3, #109	; 0x6d
 8003780:	f040 8105 	bne.w	800398e <HAL_UART_RxCpltCallback+0x366>
				pid_motor_Ti=UART_FrameToNumber(uart_received);
 8003784:	482f      	ldr	r0, [pc, #188]	; (8003844 <HAL_UART_RxCpltCallback+0x21c>)
 8003786:	f000 f931 	bl	80039ec <UART_FrameToNumber>
 800378a:	4603      	mov	r3, r0
 800378c:	461a      	mov	r2, r3
 800378e:	4b34      	ldr	r3, [pc, #208]	; (8003860 <HAL_UART_RxCpltCallback+0x238>)
 8003790:	801a      	strh	r2, [r3, #0]
			break;
 8003792:	e0fc      	b.n	800398e <HAL_UART_RxCpltCallback+0x366>
		case 'l':
			//track_lost=UART_FrameToNumber(uart_received);
			break;

		case 'v':
			if(uart_received[1]=='g')
 8003794:	4b2b      	ldr	r3, [pc, #172]	; (8003844 <HAL_UART_RxCpltCallback+0x21c>)
 8003796:	785b      	ldrb	r3, [r3, #1]
 8003798:	2b67      	cmp	r3, #103	; 0x67
 800379a:	d10d      	bne.n	80037b8 <HAL_UART_RxCpltCallback+0x190>
				MOTORS_SetVelocity(UART_FrameToNumber(uart_received), UART_FrameToNumber(uart_received));
 800379c:	4829      	ldr	r0, [pc, #164]	; (8003844 <HAL_UART_RxCpltCallback+0x21c>)
 800379e:	f000 f925 	bl	80039ec <UART_FrameToNumber>
 80037a2:	4603      	mov	r3, r0
 80037a4:	b21c      	sxth	r4, r3
 80037a6:	4827      	ldr	r0, [pc, #156]	; (8003844 <HAL_UART_RxCpltCallback+0x21c>)
 80037a8:	f000 f920 	bl	80039ec <UART_FrameToNumber>
 80037ac:	4603      	mov	r3, r0
 80037ae:	b21b      	sxth	r3, r3
 80037b0:	4619      	mov	r1, r3
 80037b2:	4620      	mov	r0, r4
 80037b4:	f7ff f9e2 	bl	8002b7c <MOTORS_SetVelocity>
			if(uart_received[1]=='l')
 80037b8:	4b22      	ldr	r3, [pc, #136]	; (8003844 <HAL_UART_RxCpltCallback+0x21c>)
 80037ba:	785b      	ldrb	r3, [r3, #1]
 80037bc:	2b6c      	cmp	r3, #108	; 0x6c
 80037be:	d106      	bne.n	80037ce <HAL_UART_RxCpltCallback+0x1a6>
				pid_target_l=UART_FrameToNumber(uart_received);
 80037c0:	4820      	ldr	r0, [pc, #128]	; (8003844 <HAL_UART_RxCpltCallback+0x21c>)
 80037c2:	f000 f913 	bl	80039ec <UART_FrameToNumber>
 80037c6:	4603      	mov	r3, r0
 80037c8:	b21a      	sxth	r2, r3
 80037ca:	4b26      	ldr	r3, [pc, #152]	; (8003864 <HAL_UART_RxCpltCallback+0x23c>)
 80037cc:	801a      	strh	r2, [r3, #0]
			if(uart_received[1]=='r')
 80037ce:	4b1d      	ldr	r3, [pc, #116]	; (8003844 <HAL_UART_RxCpltCallback+0x21c>)
 80037d0:	785b      	ldrb	r3, [r3, #1]
 80037d2:	2b72      	cmp	r3, #114	; 0x72
 80037d4:	f040 80dd 	bne.w	8003992 <HAL_UART_RxCpltCallback+0x36a>
				pid_target_r=UART_FrameToNumber(uart_received);
 80037d8:	481a      	ldr	r0, [pc, #104]	; (8003844 <HAL_UART_RxCpltCallback+0x21c>)
 80037da:	f000 f907 	bl	80039ec <UART_FrameToNumber>
 80037de:	4603      	mov	r3, r0
 80037e0:	b21a      	sxth	r2, r3
 80037e2:	4b21      	ldr	r3, [pc, #132]	; (8003868 <HAL_UART_RxCpltCallback+0x240>)
 80037e4:	801a      	strh	r2, [r3, #0]
			break;
 80037e6:	e0d4      	b.n	8003992 <HAL_UART_RxCpltCallback+0x36a>

		case 'x':
			if(uart_received[1]=='g')
 80037e8:	4b16      	ldr	r3, [pc, #88]	; (8003844 <HAL_UART_RxCpltCallback+0x21c>)
 80037ea:	785b      	ldrb	r3, [r3, #1]
 80037ec:	2b67      	cmp	r3, #103	; 0x67
 80037ee:	d10d      	bne.n	800380c <HAL_UART_RxCpltCallback+0x1e4>
				MOTORS_SetVelocity(UART_FrameToNumber(uart_received), UART_FrameToNumber(uart_received));
 80037f0:	4814      	ldr	r0, [pc, #80]	; (8003844 <HAL_UART_RxCpltCallback+0x21c>)
 80037f2:	f000 f8fb 	bl	80039ec <UART_FrameToNumber>
 80037f6:	4603      	mov	r3, r0
 80037f8:	b21c      	sxth	r4, r3
 80037fa:	4812      	ldr	r0, [pc, #72]	; (8003844 <HAL_UART_RxCpltCallback+0x21c>)
 80037fc:	f000 f8f6 	bl	80039ec <UART_FrameToNumber>
 8003800:	4603      	mov	r3, r0
 8003802:	b21b      	sxth	r3, r3
 8003804:	4619      	mov	r1, r3
 8003806:	4620      	mov	r0, r4
 8003808:	f7ff f9b8 	bl	8002b7c <MOTORS_SetVelocity>
			if(uart_received[1]=='l')
 800380c:	4b0d      	ldr	r3, [pc, #52]	; (8003844 <HAL_UART_RxCpltCallback+0x21c>)
 800380e:	785b      	ldrb	r3, [r3, #1]
 8003810:	2b6c      	cmp	r3, #108	; 0x6c
 8003812:	d108      	bne.n	8003826 <HAL_UART_RxCpltCallback+0x1fe>
				MOTORS_SetVelocity(UART_FrameToNumber(uart_received), 0);
 8003814:	480b      	ldr	r0, [pc, #44]	; (8003844 <HAL_UART_RxCpltCallback+0x21c>)
 8003816:	f000 f8e9 	bl	80039ec <UART_FrameToNumber>
 800381a:	4603      	mov	r3, r0
 800381c:	b21b      	sxth	r3, r3
 800381e:	2100      	movs	r1, #0
 8003820:	4618      	mov	r0, r3
 8003822:	f7ff f9ab 	bl	8002b7c <MOTORS_SetVelocity>
			if(uart_received[1]=='r')
 8003826:	4b07      	ldr	r3, [pc, #28]	; (8003844 <HAL_UART_RxCpltCallback+0x21c>)
 8003828:	785b      	ldrb	r3, [r3, #1]
 800382a:	2b72      	cmp	r3, #114	; 0x72
 800382c:	f040 80b3 	bne.w	8003996 <HAL_UART_RxCpltCallback+0x36e>
				MOTORS_SetVelocity(0, UART_FrameToNumber(uart_received));
 8003830:	4804      	ldr	r0, [pc, #16]	; (8003844 <HAL_UART_RxCpltCallback+0x21c>)
 8003832:	f000 f8db 	bl	80039ec <UART_FrameToNumber>
 8003836:	4603      	mov	r3, r0
 8003838:	b21b      	sxth	r3, r3
 800383a:	4619      	mov	r1, r3
 800383c:	2000      	movs	r0, #0
 800383e:	f7ff f99d 	bl	8002b7c <MOTORS_SetVelocity>
			break;
 8003842:	e0a8      	b.n	8003996 <HAL_UART_RxCpltCallback+0x36e>
 8003844:	200006c8 	.word	0x200006c8
 8003848:	20000318 	.word	0x20000318
 800384c:	200002c4 	.word	0x200002c4
 8003850:	20000258 	.word	0x20000258
 8003854:	20000254 	.word	0x20000254
 8003858:	200004b0 	.word	0x200004b0
 800385c:	20000364 	.word	0x20000364
 8003860:	200003d4 	.word	0x200003d4
 8003864:	2000037e 	.word	0x2000037e
 8003868:	2000048a 	.word	0x2000048a

		case 'u':
			if(uart_received[1]=='1')
 800386c:	4b51      	ldr	r3, [pc, #324]	; (80039b4 <HAL_UART_RxCpltCallback+0x38c>)
 800386e:	785b      	ldrb	r3, [r3, #1]
 8003870:	2b31      	cmp	r3, #49	; 0x31
 8003872:	d120      	bne.n	80038b6 <HAL_UART_RxCpltCallback+0x28e>
			{
				uart_size=sprintf(uart_data, "pid_k_coefficient: %4.2f \n\rpid_Td_coefficient: %4.2f \n\r", pid_k_coefficient, pid_Td_coefficient);
 8003874:	4b50      	ldr	r3, [pc, #320]	; (80039b8 <HAL_UART_RxCpltCallback+0x390>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4618      	mov	r0, r3
 800387a:	f7fc fe8d 	bl	8000598 <__aeabi_f2d>
 800387e:	4604      	mov	r4, r0
 8003880:	460d      	mov	r5, r1
 8003882:	4b4e      	ldr	r3, [pc, #312]	; (80039bc <HAL_UART_RxCpltCallback+0x394>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4618      	mov	r0, r3
 8003888:	f7fc fe86 	bl	8000598 <__aeabi_f2d>
 800388c:	4602      	mov	r2, r0
 800388e:	460b      	mov	r3, r1
 8003890:	e9cd 2300 	strd	r2, r3, [sp]
 8003894:	4622      	mov	r2, r4
 8003896:	462b      	mov	r3, r5
 8003898:	4949      	ldr	r1, [pc, #292]	; (80039c0 <HAL_UART_RxCpltCallback+0x398>)
 800389a:	484a      	ldr	r0, [pc, #296]	; (80039c4 <HAL_UART_RxCpltCallback+0x39c>)
 800389c:	f009 f84e 	bl	800c93c <siprintf>
 80038a0:	4603      	mov	r3, r0
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	4b48      	ldr	r3, [pc, #288]	; (80039c8 <HAL_UART_RxCpltCallback+0x3a0>)
 80038a6:	801a      	strh	r2, [r3, #0]
				HAL_UART_Transmit_IT(&huart1, uart_data, uart_size);
 80038a8:	4b47      	ldr	r3, [pc, #284]	; (80039c8 <HAL_UART_RxCpltCallback+0x3a0>)
 80038aa:	881b      	ldrh	r3, [r3, #0]
 80038ac:	461a      	mov	r2, r3
 80038ae:	4945      	ldr	r1, [pc, #276]	; (80039c4 <HAL_UART_RxCpltCallback+0x39c>)
 80038b0:	4846      	ldr	r0, [pc, #280]	; (80039cc <HAL_UART_RxCpltCallback+0x3a4>)
 80038b2:	f006 faed 	bl	8009e90 <HAL_UART_Transmit_IT>
			}
			if(uart_received[1]=='2')
 80038b6:	4b3f      	ldr	r3, [pc, #252]	; (80039b4 <HAL_UART_RxCpltCallback+0x38c>)
 80038b8:	785b      	ldrb	r3, [r3, #1]
 80038ba:	2b32      	cmp	r3, #50	; 0x32
 80038bc:	d124      	bne.n	8003908 <HAL_UART_RxCpltCallback+0x2e0>
			{
				uart_size=sprintf(uart_data, "pid_motor_k: %4.8f \n\rpid_motor_Ti: %d \n\rpid_motor_Td: %4.8f \n\r", pid_motor_k, pid_motor_Ti, pid_motor_Td);
 80038be:	4b44      	ldr	r3, [pc, #272]	; (80039d0 <HAL_UART_RxCpltCallback+0x3a8>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7fc fe68 	bl	8000598 <__aeabi_f2d>
 80038c8:	4604      	mov	r4, r0
 80038ca:	460d      	mov	r5, r1
 80038cc:	4b41      	ldr	r3, [pc, #260]	; (80039d4 <HAL_UART_RxCpltCallback+0x3ac>)
 80038ce:	881b      	ldrh	r3, [r3, #0]
 80038d0:	461e      	mov	r6, r3
 80038d2:	4b41      	ldr	r3, [pc, #260]	; (80039d8 <HAL_UART_RxCpltCallback+0x3b0>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7fc fe5e 	bl	8000598 <__aeabi_f2d>
 80038dc:	4602      	mov	r2, r0
 80038de:	460b      	mov	r3, r1
 80038e0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80038e4:	9600      	str	r6, [sp, #0]
 80038e6:	4622      	mov	r2, r4
 80038e8:	462b      	mov	r3, r5
 80038ea:	493c      	ldr	r1, [pc, #240]	; (80039dc <HAL_UART_RxCpltCallback+0x3b4>)
 80038ec:	4835      	ldr	r0, [pc, #212]	; (80039c4 <HAL_UART_RxCpltCallback+0x39c>)
 80038ee:	f009 f825 	bl	800c93c <siprintf>
 80038f2:	4603      	mov	r3, r0
 80038f4:	b29a      	uxth	r2, r3
 80038f6:	4b34      	ldr	r3, [pc, #208]	; (80039c8 <HAL_UART_RxCpltCallback+0x3a0>)
 80038f8:	801a      	strh	r2, [r3, #0]
				HAL_UART_Transmit_IT(&huart1, uart_data, uart_size);
 80038fa:	4b33      	ldr	r3, [pc, #204]	; (80039c8 <HAL_UART_RxCpltCallback+0x3a0>)
 80038fc:	881b      	ldrh	r3, [r3, #0]
 80038fe:	461a      	mov	r2, r3
 8003900:	4930      	ldr	r1, [pc, #192]	; (80039c4 <HAL_UART_RxCpltCallback+0x39c>)
 8003902:	4832      	ldr	r0, [pc, #200]	; (80039cc <HAL_UART_RxCpltCallback+0x3a4>)
 8003904:	f006 fac4 	bl	8009e90 <HAL_UART_Transmit_IT>
			}
			if(uart_received[1]=='3')
 8003908:	4b2a      	ldr	r3, [pc, #168]	; (80039b4 <HAL_UART_RxCpltCallback+0x38c>)
 800390a:	785b      	ldrb	r3, [r3, #1]
 800390c:	2b33      	cmp	r3, #51	; 0x33
 800390e:	d144      	bne.n	800399a <HAL_UART_RxCpltCallback+0x372>
			{
				uart_size=sprintf(uart_data, "pid_alpha: %4.8f \n\rpid_beta: %4.8f \n\r", pid_alpha, pid_beta);
 8003910:	4b33      	ldr	r3, [pc, #204]	; (80039e0 <HAL_UART_RxCpltCallback+0x3b8>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4618      	mov	r0, r3
 8003916:	f7fc fe3f 	bl	8000598 <__aeabi_f2d>
 800391a:	4604      	mov	r4, r0
 800391c:	460d      	mov	r5, r1
 800391e:	4b31      	ldr	r3, [pc, #196]	; (80039e4 <HAL_UART_RxCpltCallback+0x3bc>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4618      	mov	r0, r3
 8003924:	f7fc fe38 	bl	8000598 <__aeabi_f2d>
 8003928:	4602      	mov	r2, r0
 800392a:	460b      	mov	r3, r1
 800392c:	e9cd 2300 	strd	r2, r3, [sp]
 8003930:	4622      	mov	r2, r4
 8003932:	462b      	mov	r3, r5
 8003934:	492c      	ldr	r1, [pc, #176]	; (80039e8 <HAL_UART_RxCpltCallback+0x3c0>)
 8003936:	4823      	ldr	r0, [pc, #140]	; (80039c4 <HAL_UART_RxCpltCallback+0x39c>)
 8003938:	f009 f800 	bl	800c93c <siprintf>
 800393c:	4603      	mov	r3, r0
 800393e:	b29a      	uxth	r2, r3
 8003940:	4b21      	ldr	r3, [pc, #132]	; (80039c8 <HAL_UART_RxCpltCallback+0x3a0>)
 8003942:	801a      	strh	r2, [r3, #0]
				HAL_UART_Transmit_IT(&huart1, uart_data, uart_size);
 8003944:	4b20      	ldr	r3, [pc, #128]	; (80039c8 <HAL_UART_RxCpltCallback+0x3a0>)
 8003946:	881b      	ldrh	r3, [r3, #0]
 8003948:	461a      	mov	r2, r3
 800394a:	491e      	ldr	r1, [pc, #120]	; (80039c4 <HAL_UART_RxCpltCallback+0x39c>)
 800394c:	481f      	ldr	r0, [pc, #124]	; (80039cc <HAL_UART_RxCpltCallback+0x3a4>)
 800394e:	f006 fa9f 	bl	8009e90 <HAL_UART_Transmit_IT>
			}

			break;
 8003952:	e022      	b.n	800399a <HAL_UART_RxCpltCallback+0x372>

		case 'f':
			if(uart_received[1]=='a')
 8003954:	4b17      	ldr	r3, [pc, #92]	; (80039b4 <HAL_UART_RxCpltCallback+0x38c>)
 8003956:	785b      	ldrb	r3, [r3, #1]
 8003958:	2b61      	cmp	r3, #97	; 0x61
 800395a:	d107      	bne.n	800396c <HAL_UART_RxCpltCallback+0x344>
				pid_alpha=UART_FrameToFloat(uart_received);
 800395c:	4815      	ldr	r0, [pc, #84]	; (80039b4 <HAL_UART_RxCpltCallback+0x38c>)
 800395e:	f000 f881 	bl	8003a64 <UART_FrameToFloat>
 8003962:	eef0 7a40 	vmov.f32	s15, s0
 8003966:	4b1e      	ldr	r3, [pc, #120]	; (80039e0 <HAL_UART_RxCpltCallback+0x3b8>)
 8003968:	edc3 7a00 	vstr	s15, [r3]
			if(uart_received[1]=='b')
 800396c:	4b11      	ldr	r3, [pc, #68]	; (80039b4 <HAL_UART_RxCpltCallback+0x38c>)
 800396e:	785b      	ldrb	r3, [r3, #1]
 8003970:	2b62      	cmp	r3, #98	; 0x62
 8003972:	d114      	bne.n	800399e <HAL_UART_RxCpltCallback+0x376>
				pid_beta=UART_FrameToFloat2(uart_received);
 8003974:	480f      	ldr	r0, [pc, #60]	; (80039b4 <HAL_UART_RxCpltCallback+0x38c>)
 8003976:	f000 f8a3 	bl	8003ac0 <UART_FrameToFloat2>
 800397a:	eef0 7a40 	vmov.f32	s15, s0
 800397e:	4b19      	ldr	r3, [pc, #100]	; (80039e4 <HAL_UART_RxCpltCallback+0x3bc>)
 8003980:	edc3 7a00 	vstr	s15, [r3]
			break;
 8003984:	e00b      	b.n	800399e <HAL_UART_RxCpltCallback+0x376>
			break;
 8003986:	bf00      	nop
 8003988:	e00a      	b.n	80039a0 <HAL_UART_RxCpltCallback+0x378>
			break;
 800398a:	bf00      	nop
 800398c:	e008      	b.n	80039a0 <HAL_UART_RxCpltCallback+0x378>
			break;
 800398e:	bf00      	nop
 8003990:	e006      	b.n	80039a0 <HAL_UART_RxCpltCallback+0x378>
			break;
 8003992:	bf00      	nop
 8003994:	e004      	b.n	80039a0 <HAL_UART_RxCpltCallback+0x378>
			break;
 8003996:	bf00      	nop
 8003998:	e002      	b.n	80039a0 <HAL_UART_RxCpltCallback+0x378>
			break;
 800399a:	bf00      	nop
 800399c:	e000      	b.n	80039a0 <HAL_UART_RxCpltCallback+0x378>
			break;
 800399e:	bf00      	nop

	}

	//uart_size=sprintf(uart_data, "OK\n\r");
	//HAL_UART_Transmit_IT(&huart3, uart_data, uart_size);
	HAL_UART_Receive_IT(&huart1, uart_received, 6);
 80039a0:	2206      	movs	r2, #6
 80039a2:	4904      	ldr	r1, [pc, #16]	; (80039b4 <HAL_UART_RxCpltCallback+0x38c>)
 80039a4:	4809      	ldr	r0, [pc, #36]	; (80039cc <HAL_UART_RxCpltCallback+0x3a4>)
 80039a6:	f006 facf 	bl	8009f48 <HAL_UART_Receive_IT>
	//lama=100;

}
 80039aa:	bf00      	nop
 80039ac:	370c      	adds	r7, #12
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039b2:	bf00      	nop
 80039b4:	200006c8 	.word	0x200006c8
 80039b8:	20000258 	.word	0x20000258
 80039bc:	200004b0 	.word	0x200004b0
 80039c0:	0800ede4 	.word	0x0800ede4
 80039c4:	200005b8 	.word	0x200005b8
 80039c8:	20000530 	.word	0x20000530
 80039cc:	200006d0 	.word	0x200006d0
 80039d0:	20000254 	.word	0x20000254
 80039d4:	200003d4 	.word	0x200003d4
 80039d8:	20000364 	.word	0x20000364
 80039dc:	0800ee1c 	.word	0x0800ee1c
 80039e0:	20000490 	.word	0x20000490
 80039e4:	200003d0 	.word	0x200003d0
 80039e8:	0800ee5c 	.word	0x0800ee5c

080039ec <UART_FrameToNumber>:

uint16_t UART_FrameToNumber(uint8_t frame[])
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
	return (frame[5]-'0')+(10*(frame[4]-'0'))+(100*(frame[3]-'0'))+(1000*(frame[2]-'0'));
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	3305      	adds	r3, #5
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	b29a      	uxth	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	3304      	adds	r3, #4
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	3b30      	subs	r3, #48	; 0x30
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	4619      	mov	r1, r3
 8003a08:	0089      	lsls	r1, r1, #2
 8003a0a:	440b      	add	r3, r1
 8003a0c:	005b      	lsls	r3, r3, #1
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	4413      	add	r3, r2
 8003a12:	b29a      	uxth	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	3303      	adds	r3, #3
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	3b30      	subs	r3, #48	; 0x30
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	4619      	mov	r1, r3
 8003a20:	0089      	lsls	r1, r1, #2
 8003a22:	440b      	add	r3, r1
 8003a24:	4619      	mov	r1, r3
 8003a26:	0088      	lsls	r0, r1, #2
 8003a28:	4619      	mov	r1, r3
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	440b      	add	r3, r1
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	4413      	add	r3, r2
 8003a34:	b29a      	uxth	r2, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	3302      	adds	r3, #2
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	3b30      	subs	r3, #48	; 0x30
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	4619      	mov	r1, r3
 8003a42:	0149      	lsls	r1, r1, #5
 8003a44:	1ac9      	subs	r1, r1, r3
 8003a46:	0089      	lsls	r1, r1, #2
 8003a48:	440b      	add	r3, r1
 8003a4a:	00db      	lsls	r3, r3, #3
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	4413      	add	r3, r2
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	3b30      	subs	r3, #48	; 0x30
 8003a54:	b29b      	uxth	r3, r3
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	370c      	adds	r7, #12
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
	...

08003a64 <UART_FrameToFloat>:

float UART_FrameToFloat(uint8_t frame[])
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
	return (((frame[5]-'0')+(10*(frame[4]-'0'))+(100*(frame[3]-'0')))/1000.0f);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3305      	adds	r3, #5
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	3304      	adds	r3, #4
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003a80:	4613      	mov	r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	4413      	add	r3, r2
 8003a86:	005b      	lsls	r3, r3, #1
 8003a88:	18ca      	adds	r2, r1, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	3303      	adds	r3, #3
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	3b30      	subs	r3, #48	; 0x30
 8003a92:	2164      	movs	r1, #100	; 0x64
 8003a94:	fb01 f303 	mul.w	r3, r1, r3
 8003a98:	4413      	add	r3, r2
 8003a9a:	ee07 3a90 	vmov	s15, r3
 8003a9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003aa2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8003abc <UART_FrameToFloat+0x58>
 8003aa6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003aaa:	eef0 7a66 	vmov.f32	s15, s13
}
 8003aae:	eeb0 0a67 	vmov.f32	s0, s15
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr
 8003abc:	447a0000 	.word	0x447a0000

08003ac0 <UART_FrameToFloat2>:

float UART_FrameToFloat2(uint8_t frame[])
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
	return (((frame[5]-'0')+(10*(frame[4]-'0'))+(100*(frame[3]-'0')))/1000000000.0f);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	3305      	adds	r3, #5
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	3304      	adds	r3, #4
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003adc:	4613      	mov	r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	4413      	add	r3, r2
 8003ae2:	005b      	lsls	r3, r3, #1
 8003ae4:	18ca      	adds	r2, r1, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	3303      	adds	r3, #3
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	3b30      	subs	r3, #48	; 0x30
 8003aee:	2164      	movs	r1, #100	; 0x64
 8003af0:	fb01 f303 	mul.w	r3, r1, r3
 8003af4:	4413      	add	r3, r2
 8003af6:	ee07 3a90 	vmov	s15, r3
 8003afa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003afe:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8003b18 <UART_FrameToFloat2+0x58>
 8003b02:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003b06:	eef0 7a66 	vmov.f32	s15, s13
}
 8003b0a:	eeb0 0a67 	vmov.f32	s0, s15
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr
 8003b18:	4e6e6b28 	.word	0x4e6e6b28

08003b1c <UART_FrameToFloat3>:

float UART_FrameToFloat3(uint8_t frame[])
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
	return (((frame[5]-'0')+(10*(frame[4]-'0'))+(100*(frame[3]-'0')))/10.0f);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	3305      	adds	r3, #5
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	3304      	adds	r3, #4
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003b38:	4613      	mov	r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	4413      	add	r3, r2
 8003b3e:	005b      	lsls	r3, r3, #1
 8003b40:	18ca      	adds	r2, r1, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	3303      	adds	r3, #3
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	3b30      	subs	r3, #48	; 0x30
 8003b4a:	2164      	movs	r1, #100	; 0x64
 8003b4c:	fb01 f303 	mul.w	r3, r1, r3
 8003b50:	4413      	add	r3, r2
 8003b52:	ee07 3a90 	vmov	s15, r3
 8003b56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b5a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003b5e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003b62:	eef0 7a66 	vmov.f32	s15, s13
}
 8003b66:	eeb0 0a67 	vmov.f32	s0, s15
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003b74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003bac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003b78:	480d      	ldr	r0, [pc, #52]	; (8003bb0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003b7a:	490e      	ldr	r1, [pc, #56]	; (8003bb4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003b7c:	4a0e      	ldr	r2, [pc, #56]	; (8003bb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003b7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b80:	e002      	b.n	8003b88 <LoopCopyDataInit>

08003b82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b86:	3304      	adds	r3, #4

08003b88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b8c:	d3f9      	bcc.n	8003b82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b8e:	4a0b      	ldr	r2, [pc, #44]	; (8003bbc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003b90:	4c0b      	ldr	r4, [pc, #44]	; (8003bc0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003b92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b94:	e001      	b.n	8003b9a <LoopFillZerobss>

08003b96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b98:	3204      	adds	r2, #4

08003b9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b9c:	d3fb      	bcc.n	8003b96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003b9e:	f7ff fd31 	bl	8003604 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003ba2:	f008 fa35 	bl	800c010 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ba6:	f7fe f99f 	bl	8001ee8 <main>
  bx  lr    
 8003baa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003bac:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8003bb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003bb4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8003bb8:	0800f2ac 	.word	0x0800f2ac
  ldr r2, =_sbss
 8003bbc:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003bc0:	20000d14 	.word	0x20000d14

08003bc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003bc4:	e7fe      	b.n	8003bc4 <ADC_IRQHandler>

08003bc6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bc6:	b580      	push	{r7, lr}
 8003bc8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bca:	2003      	movs	r0, #3
 8003bcc:	f000 fd6e 	bl	80046ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003bd0:	2000      	movs	r0, #0
 8003bd2:	f000 f805 	bl	8003be0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003bd6:	f7ff f843 	bl	8002c60 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003be8:	4b12      	ldr	r3, [pc, #72]	; (8003c34 <HAL_InitTick+0x54>)
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	4b12      	ldr	r3, [pc, #72]	; (8003c38 <HAL_InitTick+0x58>)
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003bf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f000 fd89 	bl	8004716 <HAL_SYSTICK_Config>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d001      	beq.n	8003c0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e00e      	b.n	8003c2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2b0f      	cmp	r3, #15
 8003c12:	d80a      	bhi.n	8003c2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c14:	2200      	movs	r2, #0
 8003c16:	6879      	ldr	r1, [r7, #4]
 8003c18:	f04f 30ff 	mov.w	r0, #4294967295
 8003c1c:	f000 fd51 	bl	80046c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c20:	4a06      	ldr	r2, [pc, #24]	; (8003c3c <HAL_InitTick+0x5c>)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c26:	2300      	movs	r3, #0
 8003c28:	e000      	b.n	8003c2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3708      	adds	r7, #8
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	20000004 	.word	0x20000004
 8003c38:	2000000c 	.word	0x2000000c
 8003c3c:	20000008 	.word	0x20000008

08003c40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c40:	b480      	push	{r7}
 8003c42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c44:	4b06      	ldr	r3, [pc, #24]	; (8003c60 <HAL_IncTick+0x20>)
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	461a      	mov	r2, r3
 8003c4a:	4b06      	ldr	r3, [pc, #24]	; (8003c64 <HAL_IncTick+0x24>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4413      	add	r3, r2
 8003c50:	4a04      	ldr	r2, [pc, #16]	; (8003c64 <HAL_IncTick+0x24>)
 8003c52:	6013      	str	r3, [r2, #0]
}
 8003c54:	bf00      	nop
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	2000000c 	.word	0x2000000c
 8003c64:	20000898 	.word	0x20000898

08003c68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	af00      	add	r7, sp, #0
  return uwTick;
 8003c6c:	4b03      	ldr	r3, [pc, #12]	; (8003c7c <HAL_GetTick+0x14>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	20000898 	.word	0x20000898

08003c80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c88:	f7ff ffee 	bl	8003c68 <HAL_GetTick>
 8003c8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c98:	d005      	beq.n	8003ca6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c9a:	4b0a      	ldr	r3, [pc, #40]	; (8003cc4 <HAL_Delay+0x44>)
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003ca6:	bf00      	nop
 8003ca8:	f7ff ffde 	bl	8003c68 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d8f7      	bhi.n	8003ca8 <HAL_Delay+0x28>
  {
  }
}
 8003cb8:	bf00      	nop
 8003cba:	bf00      	nop
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	2000000c 	.word	0x2000000c

08003cc8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d101      	bne.n	8003cde <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e031      	b.n	8003d42 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d109      	bne.n	8003cfa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f7fe ffde 	bl	8002ca8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfe:	f003 0310 	and.w	r3, r3, #16
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d116      	bne.n	8003d34 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d0a:	4b10      	ldr	r3, [pc, #64]	; (8003d4c <HAL_ADC_Init+0x84>)
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	f043 0202 	orr.w	r2, r3, #2
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 fa7c 	bl	8004214 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d26:	f023 0303 	bic.w	r3, r3, #3
 8003d2a:	f043 0201 	orr.w	r2, r3, #1
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	641a      	str	r2, [r3, #64]	; 0x40
 8003d32:	e001      	b.n	8003d38 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	ffffeefd 	.word	0xffffeefd

08003d50 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b086      	sub	sp, #24
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d101      	bne.n	8003d6e <HAL_ADC_Start_DMA+0x1e>
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	e0d4      	b.n	8003f18 <HAL_ADC_Start_DMA+0x1c8>
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f003 0301 	and.w	r3, r3, #1
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d018      	beq.n	8003db6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	689a      	ldr	r2, [r3, #8]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f042 0201 	orr.w	r2, r2, #1
 8003d92:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8003d94:	4b62      	ldr	r3, [pc, #392]	; (8003f20 <HAL_ADC_Start_DMA+0x1d0>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a62      	ldr	r2, [pc, #392]	; (8003f24 <HAL_ADC_Start_DMA+0x1d4>)
 8003d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d9e:	0c9a      	lsrs	r2, r3, #18
 8003da0:	4613      	mov	r3, r2
 8003da2:	005b      	lsls	r3, r3, #1
 8003da4:	4413      	add	r3, r2
 8003da6:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8003da8:	e002      	b.n	8003db0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	3b01      	subs	r3, #1
 8003dae:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1f9      	bne.n	8003daa <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f003 0301 	and.w	r3, r3, #1
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	f040 809c 	bne.w	8003efe <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dca:	4b57      	ldr	r3, [pc, #348]	; (8003f28 <HAL_ADC_Start_DMA+0x1d8>)
 8003dcc:	4013      	ands	r3, r2
 8003dce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d007      	beq.n	8003df4 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003dec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e00:	d106      	bne.n	8003e10 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e06:	f023 0206 	bic.w	r2, r3, #6
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	645a      	str	r2, [r3, #68]	; 0x44
 8003e0e:	e002      	b.n	8003e16 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2200      	movs	r2, #0
 8003e14:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e22:	4a42      	ldr	r2, [pc, #264]	; (8003f2c <HAL_ADC_Start_DMA+0x1dc>)
 8003e24:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2a:	4a41      	ldr	r2, [pc, #260]	; (8003f30 <HAL_ADC_Start_DMA+0x1e0>)
 8003e2c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e32:	4a40      	ldr	r2, [pc, #256]	; (8003f34 <HAL_ADC_Start_DMA+0x1e4>)
 8003e34:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003e3e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	685a      	ldr	r2, [r3, #4]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003e4e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	689a      	ldr	r2, [r3, #8]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e5e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	334c      	adds	r3, #76	; 0x4c
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	68ba      	ldr	r2, [r7, #8]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f000 fd0c 	bl	800488c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8003e74:	4b30      	ldr	r3, [pc, #192]	; (8003f38 <HAL_ADC_Start_DMA+0x1e8>)
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f003 031f 	and.w	r3, r3, #31
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d10f      	bne.n	8003ea0 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d143      	bne.n	8003f16 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	689a      	ldr	r2, [r3, #8]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003e9c:	609a      	str	r2, [r3, #8]
 8003e9e:	e03a      	b.n	8003f16 <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a25      	ldr	r2, [pc, #148]	; (8003f3c <HAL_ADC_Start_DMA+0x1ec>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d10e      	bne.n	8003ec8 <HAL_ADC_Start_DMA+0x178>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d107      	bne.n	8003ec8 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	689a      	ldr	r2, [r3, #8]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003ec6:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8003ec8:	4b1b      	ldr	r3, [pc, #108]	; (8003f38 <HAL_ADC_Start_DMA+0x1e8>)
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f003 0310 	and.w	r3, r3, #16
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d120      	bne.n	8003f16 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a19      	ldr	r2, [pc, #100]	; (8003f40 <HAL_ADC_Start_DMA+0x1f0>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d11b      	bne.n	8003f16 <HAL_ADC_Start_DMA+0x1c6>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d114      	bne.n	8003f16 <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	689a      	ldr	r2, [r3, #8]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003efa:	609a      	str	r2, [r3, #8]
 8003efc:	e00b      	b.n	8003f16 <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f02:	f043 0210 	orr.w	r2, r3, #16
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f0e:	f043 0201 	orr.w	r2, r3, #1
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3718      	adds	r7, #24
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	20000004 	.word	0x20000004
 8003f24:	431bde83 	.word	0x431bde83
 8003f28:	fffff8fe 	.word	0xfffff8fe
 8003f2c:	08004409 	.word	0x08004409
 8003f30:	080044c3 	.word	0x080044c3
 8003f34:	080044df 	.word	0x080044df
 8003f38:	40012300 	.word	0x40012300
 8003f3c:	40012000 	.word	0x40012000
 8003f40:	40012200 	.word	0x40012200

08003f44 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003f4c:	bf00      	nop
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b085      	sub	sp, #20
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d101      	bne.n	8003f9c <HAL_ADC_ConfigChannel+0x1c>
 8003f98:	2302      	movs	r3, #2
 8003f9a:	e12a      	b.n	80041f2 <HAL_ADC_ConfigChannel+0x272>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2b09      	cmp	r3, #9
 8003faa:	d93a      	bls.n	8004022 <HAL_ADC_ConfigChannel+0xa2>
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fb4:	d035      	beq.n	8004022 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68d9      	ldr	r1, [r3, #12]
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	005b      	lsls	r3, r3, #1
 8003fc8:	4413      	add	r3, r2
 8003fca:	3b1e      	subs	r3, #30
 8003fcc:	2207      	movs	r2, #7
 8003fce:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd2:	43da      	mvns	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	400a      	ands	r2, r1
 8003fda:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a87      	ldr	r2, [pc, #540]	; (8004200 <HAL_ADC_ConfigChannel+0x280>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d10a      	bne.n	8003ffc <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68d9      	ldr	r1, [r3, #12]
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	061a      	lsls	r2, r3, #24
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	430a      	orrs	r2, r1
 8003ff8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ffa:	e035      	b.n	8004068 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68d9      	ldr	r1, [r3, #12]
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	689a      	ldr	r2, [r3, #8]
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	b29b      	uxth	r3, r3
 800400c:	4618      	mov	r0, r3
 800400e:	4603      	mov	r3, r0
 8004010:	005b      	lsls	r3, r3, #1
 8004012:	4403      	add	r3, r0
 8004014:	3b1e      	subs	r3, #30
 8004016:	409a      	lsls	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	430a      	orrs	r2, r1
 800401e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004020:	e022      	b.n	8004068 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	6919      	ldr	r1, [r3, #16]
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	b29b      	uxth	r3, r3
 800402e:	461a      	mov	r2, r3
 8004030:	4613      	mov	r3, r2
 8004032:	005b      	lsls	r3, r3, #1
 8004034:	4413      	add	r3, r2
 8004036:	2207      	movs	r2, #7
 8004038:	fa02 f303 	lsl.w	r3, r2, r3
 800403c:	43da      	mvns	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	400a      	ands	r2, r1
 8004044:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	6919      	ldr	r1, [r3, #16]
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	689a      	ldr	r2, [r3, #8]
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	b29b      	uxth	r3, r3
 8004056:	4618      	mov	r0, r3
 8004058:	4603      	mov	r3, r0
 800405a:	005b      	lsls	r3, r3, #1
 800405c:	4403      	add	r3, r0
 800405e:	409a      	lsls	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	430a      	orrs	r2, r1
 8004066:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	2b06      	cmp	r3, #6
 800406e:	d824      	bhi.n	80040ba <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	685a      	ldr	r2, [r3, #4]
 800407a:	4613      	mov	r3, r2
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	4413      	add	r3, r2
 8004080:	3b05      	subs	r3, #5
 8004082:	221f      	movs	r2, #31
 8004084:	fa02 f303 	lsl.w	r3, r2, r3
 8004088:	43da      	mvns	r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	400a      	ands	r2, r1
 8004090:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	b29b      	uxth	r3, r3
 800409e:	4618      	mov	r0, r3
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	685a      	ldr	r2, [r3, #4]
 80040a4:	4613      	mov	r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	4413      	add	r3, r2
 80040aa:	3b05      	subs	r3, #5
 80040ac:	fa00 f203 	lsl.w	r2, r0, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	430a      	orrs	r2, r1
 80040b6:	635a      	str	r2, [r3, #52]	; 0x34
 80040b8:	e04c      	b.n	8004154 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	2b0c      	cmp	r3, #12
 80040c0:	d824      	bhi.n	800410c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	685a      	ldr	r2, [r3, #4]
 80040cc:	4613      	mov	r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	4413      	add	r3, r2
 80040d2:	3b23      	subs	r3, #35	; 0x23
 80040d4:	221f      	movs	r2, #31
 80040d6:	fa02 f303 	lsl.w	r3, r2, r3
 80040da:	43da      	mvns	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	400a      	ands	r2, r1
 80040e2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	4618      	mov	r0, r3
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	685a      	ldr	r2, [r3, #4]
 80040f6:	4613      	mov	r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	4413      	add	r3, r2
 80040fc:	3b23      	subs	r3, #35	; 0x23
 80040fe:	fa00 f203 	lsl.w	r2, r0, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	430a      	orrs	r2, r1
 8004108:	631a      	str	r2, [r3, #48]	; 0x30
 800410a:	e023      	b.n	8004154 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	685a      	ldr	r2, [r3, #4]
 8004116:	4613      	mov	r3, r2
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	4413      	add	r3, r2
 800411c:	3b41      	subs	r3, #65	; 0x41
 800411e:	221f      	movs	r2, #31
 8004120:	fa02 f303 	lsl.w	r3, r2, r3
 8004124:	43da      	mvns	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	400a      	ands	r2, r1
 800412c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	b29b      	uxth	r3, r3
 800413a:	4618      	mov	r0, r3
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	685a      	ldr	r2, [r3, #4]
 8004140:	4613      	mov	r3, r2
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	4413      	add	r3, r2
 8004146:	3b41      	subs	r3, #65	; 0x41
 8004148:	fa00 f203 	lsl.w	r2, r0, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	430a      	orrs	r2, r1
 8004152:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a2a      	ldr	r2, [pc, #168]	; (8004204 <HAL_ADC_ConfigChannel+0x284>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d10a      	bne.n	8004174 <HAL_ADC_ConfigChannel+0x1f4>
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004166:	d105      	bne.n	8004174 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8004168:	4b27      	ldr	r3, [pc, #156]	; (8004208 <HAL_ADC_ConfigChannel+0x288>)
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	4a26      	ldr	r2, [pc, #152]	; (8004208 <HAL_ADC_ConfigChannel+0x288>)
 800416e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004172:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a22      	ldr	r2, [pc, #136]	; (8004204 <HAL_ADC_ConfigChannel+0x284>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d109      	bne.n	8004192 <HAL_ADC_ConfigChannel+0x212>
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2b12      	cmp	r3, #18
 8004184:	d105      	bne.n	8004192 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8004186:	4b20      	ldr	r3, [pc, #128]	; (8004208 <HAL_ADC_ConfigChannel+0x288>)
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	4a1f      	ldr	r2, [pc, #124]	; (8004208 <HAL_ADC_ConfigChannel+0x288>)
 800418c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004190:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a1b      	ldr	r2, [pc, #108]	; (8004204 <HAL_ADC_ConfigChannel+0x284>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d125      	bne.n	80041e8 <HAL_ADC_ConfigChannel+0x268>
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a17      	ldr	r2, [pc, #92]	; (8004200 <HAL_ADC_ConfigChannel+0x280>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d003      	beq.n	80041ae <HAL_ADC_ConfigChannel+0x22e>
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2b11      	cmp	r3, #17
 80041ac:	d11c      	bne.n	80041e8 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80041ae:	4b16      	ldr	r3, [pc, #88]	; (8004208 <HAL_ADC_ConfigChannel+0x288>)
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	4a15      	ldr	r2, [pc, #84]	; (8004208 <HAL_ADC_ConfigChannel+0x288>)
 80041b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80041b8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a10      	ldr	r2, [pc, #64]	; (8004200 <HAL_ADC_ConfigChannel+0x280>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d111      	bne.n	80041e8 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80041c4:	4b11      	ldr	r3, [pc, #68]	; (800420c <HAL_ADC_ConfigChannel+0x28c>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a11      	ldr	r2, [pc, #68]	; (8004210 <HAL_ADC_ConfigChannel+0x290>)
 80041ca:	fba2 2303 	umull	r2, r3, r2, r3
 80041ce:	0c9a      	lsrs	r2, r3, #18
 80041d0:	4613      	mov	r3, r2
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	4413      	add	r3, r2
 80041d6:	005b      	lsls	r3, r3, #1
 80041d8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80041da:	e002      	b.n	80041e2 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	3b01      	subs	r3, #1
 80041e0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d1f9      	bne.n	80041dc <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3714      	adds	r7, #20
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	10000012 	.word	0x10000012
 8004204:	40012000 	.word	0x40012000
 8004208:	40012300 	.word	0x40012300
 800420c:	20000004 	.word	0x20000004
 8004210:	431bde83 	.word	0x431bde83

08004214 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800421c:	4b78      	ldr	r3, [pc, #480]	; (8004400 <ADC_Init+0x1ec>)
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	4a77      	ldr	r2, [pc, #476]	; (8004400 <ADC_Init+0x1ec>)
 8004222:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004226:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004228:	4b75      	ldr	r3, [pc, #468]	; (8004400 <ADC_Init+0x1ec>)
 800422a:	685a      	ldr	r2, [r3, #4]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	4973      	ldr	r1, [pc, #460]	; (8004400 <ADC_Init+0x1ec>)
 8004232:	4313      	orrs	r3, r2
 8004234:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	685a      	ldr	r2, [r3, #4]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004244:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	6859      	ldr	r1, [r3, #4]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	021a      	lsls	r2, r3, #8
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	430a      	orrs	r2, r1
 8004258:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	685a      	ldr	r2, [r3, #4]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004268:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	6859      	ldr	r1, [r3, #4]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689a      	ldr	r2, [r3, #8]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	430a      	orrs	r2, r1
 800427a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	689a      	ldr	r2, [r3, #8]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800428a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	6899      	ldr	r1, [r3, #8]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	68da      	ldr	r2, [r3, #12]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	430a      	orrs	r2, r1
 800429c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a2:	4a58      	ldr	r2, [pc, #352]	; (8004404 <ADC_Init+0x1f0>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d022      	beq.n	80042ee <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	689a      	ldr	r2, [r3, #8]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80042b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	6899      	ldr	r1, [r3, #8]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	430a      	orrs	r2, r1
 80042c8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	689a      	ldr	r2, [r3, #8]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80042d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	6899      	ldr	r1, [r3, #8]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	430a      	orrs	r2, r1
 80042ea:	609a      	str	r2, [r3, #8]
 80042ec:	e00f      	b.n	800430e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	689a      	ldr	r2, [r3, #8]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80042fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	689a      	ldr	r2, [r3, #8]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800430c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	689a      	ldr	r2, [r3, #8]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f022 0202 	bic.w	r2, r2, #2
 800431c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	6899      	ldr	r1, [r3, #8]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	699b      	ldr	r3, [r3, #24]
 8004328:	005a      	lsls	r2, r3, #1
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	430a      	orrs	r2, r1
 8004330:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d01b      	beq.n	8004374 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	685a      	ldr	r2, [r3, #4]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800434a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	685a      	ldr	r2, [r3, #4]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800435a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	6859      	ldr	r1, [r3, #4]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004366:	3b01      	subs	r3, #1
 8004368:	035a      	lsls	r2, r3, #13
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	430a      	orrs	r2, r1
 8004370:	605a      	str	r2, [r3, #4]
 8004372:	e007      	b.n	8004384 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	685a      	ldr	r2, [r3, #4]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004382:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004392:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	69db      	ldr	r3, [r3, #28]
 800439e:	3b01      	subs	r3, #1
 80043a0:	051a      	lsls	r2, r3, #20
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	430a      	orrs	r2, r1
 80043a8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	689a      	ldr	r2, [r3, #8]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80043b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	6899      	ldr	r1, [r3, #8]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80043c6:	025a      	lsls	r2, r3, #9
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	430a      	orrs	r2, r1
 80043ce:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	689a      	ldr	r2, [r3, #8]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	6899      	ldr	r1, [r3, #8]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	029a      	lsls	r2, r3, #10
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	430a      	orrs	r2, r1
 80043f2:	609a      	str	r2, [r3, #8]
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr
 8004400:	40012300 	.word	0x40012300
 8004404:	0f000001 	.word	0x0f000001

08004408 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004414:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800441e:	2b00      	cmp	r3, #0
 8004420:	d13c      	bne.n	800449c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004426:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d12b      	bne.n	8004494 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004440:	2b00      	cmp	r3, #0
 8004442:	d127      	bne.n	8004494 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800444e:	2b00      	cmp	r3, #0
 8004450:	d006      	beq.n	8004460 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800445c:	2b00      	cmp	r3, #0
 800445e:	d119      	bne.n	8004494 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	685a      	ldr	r2, [r3, #4]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f022 0220 	bic.w	r2, r2, #32
 800446e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004474:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004480:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d105      	bne.n	8004494 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448c:	f043 0201 	orr.w	r2, r3, #1
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f7ff fd55 	bl	8003f44 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800449a:	e00e      	b.n	80044ba <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a0:	f003 0310 	and.w	r3, r3, #16
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d003      	beq.n	80044b0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f7ff fd5f 	bl	8003f6c <HAL_ADC_ErrorCallback>
}
 80044ae:	e004      	b.n	80044ba <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	4798      	blx	r3
}
 80044ba:	bf00      	nop
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b084      	sub	sp, #16
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ce:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80044d0:	68f8      	ldr	r0, [r7, #12]
 80044d2:	f7ff fd41 	bl	8003f58 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80044d6:	bf00      	nop
 80044d8:	3710      	adds	r7, #16
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}

080044de <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80044de:	b580      	push	{r7, lr}
 80044e0:	b084      	sub	sp, #16
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ea:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2240      	movs	r2, #64	; 0x40
 80044f0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f6:	f043 0204 	orr.w	r2, r3, #4
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80044fe:	68f8      	ldr	r0, [r7, #12]
 8004500:	f7ff fd34 	bl	8003f6c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004504:	bf00      	nop
 8004506:	3710      	adds	r7, #16
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800450c:	b480      	push	{r7}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f003 0307 	and.w	r3, r3, #7
 800451a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800451c:	4b0b      	ldr	r3, [pc, #44]	; (800454c <__NVIC_SetPriorityGrouping+0x40>)
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004522:	68ba      	ldr	r2, [r7, #8]
 8004524:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004528:	4013      	ands	r3, r2
 800452a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004534:	4b06      	ldr	r3, [pc, #24]	; (8004550 <__NVIC_SetPriorityGrouping+0x44>)
 8004536:	4313      	orrs	r3, r2
 8004538:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800453a:	4a04      	ldr	r2, [pc, #16]	; (800454c <__NVIC_SetPriorityGrouping+0x40>)
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	60d3      	str	r3, [r2, #12]
}
 8004540:	bf00      	nop
 8004542:	3714      	adds	r7, #20
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr
 800454c:	e000ed00 	.word	0xe000ed00
 8004550:	05fa0000 	.word	0x05fa0000

08004554 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004554:	b480      	push	{r7}
 8004556:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004558:	4b04      	ldr	r3, [pc, #16]	; (800456c <__NVIC_GetPriorityGrouping+0x18>)
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	0a1b      	lsrs	r3, r3, #8
 800455e:	f003 0307 	and.w	r3, r3, #7
}
 8004562:	4618      	mov	r0, r3
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr
 800456c:	e000ed00 	.word	0xe000ed00

08004570 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	4603      	mov	r3, r0
 8004578:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800457a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800457e:	2b00      	cmp	r3, #0
 8004580:	db0b      	blt.n	800459a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004582:	79fb      	ldrb	r3, [r7, #7]
 8004584:	f003 021f 	and.w	r2, r3, #31
 8004588:	4907      	ldr	r1, [pc, #28]	; (80045a8 <__NVIC_EnableIRQ+0x38>)
 800458a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800458e:	095b      	lsrs	r3, r3, #5
 8004590:	2001      	movs	r0, #1
 8004592:	fa00 f202 	lsl.w	r2, r0, r2
 8004596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800459a:	bf00      	nop
 800459c:	370c      	adds	r7, #12
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	e000e100 	.word	0xe000e100

080045ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	4603      	mov	r3, r0
 80045b4:	6039      	str	r1, [r7, #0]
 80045b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	db0a      	blt.n	80045d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	b2da      	uxtb	r2, r3
 80045c4:	490c      	ldr	r1, [pc, #48]	; (80045f8 <__NVIC_SetPriority+0x4c>)
 80045c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ca:	0112      	lsls	r2, r2, #4
 80045cc:	b2d2      	uxtb	r2, r2
 80045ce:	440b      	add	r3, r1
 80045d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045d4:	e00a      	b.n	80045ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	b2da      	uxtb	r2, r3
 80045da:	4908      	ldr	r1, [pc, #32]	; (80045fc <__NVIC_SetPriority+0x50>)
 80045dc:	79fb      	ldrb	r3, [r7, #7]
 80045de:	f003 030f 	and.w	r3, r3, #15
 80045e2:	3b04      	subs	r3, #4
 80045e4:	0112      	lsls	r2, r2, #4
 80045e6:	b2d2      	uxtb	r2, r2
 80045e8:	440b      	add	r3, r1
 80045ea:	761a      	strb	r2, [r3, #24]
}
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr
 80045f8:	e000e100 	.word	0xe000e100
 80045fc:	e000ed00 	.word	0xe000ed00

08004600 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004600:	b480      	push	{r7}
 8004602:	b089      	sub	sp, #36	; 0x24
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f003 0307 	and.w	r3, r3, #7
 8004612:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	f1c3 0307 	rsb	r3, r3, #7
 800461a:	2b04      	cmp	r3, #4
 800461c:	bf28      	it	cs
 800461e:	2304      	movcs	r3, #4
 8004620:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	3304      	adds	r3, #4
 8004626:	2b06      	cmp	r3, #6
 8004628:	d902      	bls.n	8004630 <NVIC_EncodePriority+0x30>
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	3b03      	subs	r3, #3
 800462e:	e000      	b.n	8004632 <NVIC_EncodePriority+0x32>
 8004630:	2300      	movs	r3, #0
 8004632:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004634:	f04f 32ff 	mov.w	r2, #4294967295
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	fa02 f303 	lsl.w	r3, r2, r3
 800463e:	43da      	mvns	r2, r3
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	401a      	ands	r2, r3
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004648:	f04f 31ff 	mov.w	r1, #4294967295
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	fa01 f303 	lsl.w	r3, r1, r3
 8004652:	43d9      	mvns	r1, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004658:	4313      	orrs	r3, r2
         );
}
 800465a:	4618      	mov	r0, r3
 800465c:	3724      	adds	r7, #36	; 0x24
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
	...

08004668 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	3b01      	subs	r3, #1
 8004674:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004678:	d301      	bcc.n	800467e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800467a:	2301      	movs	r3, #1
 800467c:	e00f      	b.n	800469e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800467e:	4a0a      	ldr	r2, [pc, #40]	; (80046a8 <SysTick_Config+0x40>)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	3b01      	subs	r3, #1
 8004684:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004686:	210f      	movs	r1, #15
 8004688:	f04f 30ff 	mov.w	r0, #4294967295
 800468c:	f7ff ff8e 	bl	80045ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004690:	4b05      	ldr	r3, [pc, #20]	; (80046a8 <SysTick_Config+0x40>)
 8004692:	2200      	movs	r2, #0
 8004694:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004696:	4b04      	ldr	r3, [pc, #16]	; (80046a8 <SysTick_Config+0x40>)
 8004698:	2207      	movs	r2, #7
 800469a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3708      	adds	r7, #8
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	e000e010 	.word	0xe000e010

080046ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f7ff ff29 	bl	800450c <__NVIC_SetPriorityGrouping>
}
 80046ba:	bf00      	nop
 80046bc:	3708      	adds	r7, #8
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b086      	sub	sp, #24
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	4603      	mov	r3, r0
 80046ca:	60b9      	str	r1, [r7, #8]
 80046cc:	607a      	str	r2, [r7, #4]
 80046ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80046d0:	2300      	movs	r3, #0
 80046d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80046d4:	f7ff ff3e 	bl	8004554 <__NVIC_GetPriorityGrouping>
 80046d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	68b9      	ldr	r1, [r7, #8]
 80046de:	6978      	ldr	r0, [r7, #20]
 80046e0:	f7ff ff8e 	bl	8004600 <NVIC_EncodePriority>
 80046e4:	4602      	mov	r2, r0
 80046e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046ea:	4611      	mov	r1, r2
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7ff ff5d 	bl	80045ac <__NVIC_SetPriority>
}
 80046f2:	bf00      	nop
 80046f4:	3718      	adds	r7, #24
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b082      	sub	sp, #8
 80046fe:	af00      	add	r7, sp, #0
 8004700:	4603      	mov	r3, r0
 8004702:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004708:	4618      	mov	r0, r3
 800470a:	f7ff ff31 	bl	8004570 <__NVIC_EnableIRQ>
}
 800470e:	bf00      	nop
 8004710:	3708      	adds	r7, #8
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}

08004716 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004716:	b580      	push	{r7, lr}
 8004718:	b082      	sub	sp, #8
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f7ff ffa2 	bl	8004668 <SysTick_Config>
 8004724:	4603      	mov	r3, r0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3708      	adds	r7, #8
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
	...

08004730 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b086      	sub	sp, #24
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004738:	2300      	movs	r3, #0
 800473a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800473c:	f7ff fa94 	bl	8003c68 <HAL_GetTick>
 8004740:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d101      	bne.n	800474c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e099      	b.n	8004880 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2202      	movs	r2, #2
 8004758:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f022 0201 	bic.w	r2, r2, #1
 800476a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800476c:	e00f      	b.n	800478e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800476e:	f7ff fa7b 	bl	8003c68 <HAL_GetTick>
 8004772:	4602      	mov	r2, r0
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	2b05      	cmp	r3, #5
 800477a:	d908      	bls.n	800478e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2220      	movs	r2, #32
 8004780:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2203      	movs	r2, #3
 8004786:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e078      	b.n	8004880 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0301 	and.w	r3, r3, #1
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1e8      	bne.n	800476e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80047a4:	697a      	ldr	r2, [r7, #20]
 80047a6:	4b38      	ldr	r3, [pc, #224]	; (8004888 <HAL_DMA_Init+0x158>)
 80047a8:	4013      	ands	r3, r2
 80047aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80047ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a1b      	ldr	r3, [r3, #32]
 80047d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	4313      	orrs	r3, r2
 80047de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e4:	2b04      	cmp	r3, #4
 80047e6:	d107      	bne.n	80047f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f0:	4313      	orrs	r3, r2
 80047f2:	697a      	ldr	r2, [r7, #20]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	697a      	ldr	r2, [r7, #20]
 80047fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	f023 0307 	bic.w	r3, r3, #7
 800480e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	4313      	orrs	r3, r2
 8004818:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481e:	2b04      	cmp	r3, #4
 8004820:	d117      	bne.n	8004852 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004826:	697a      	ldr	r2, [r7, #20]
 8004828:	4313      	orrs	r3, r2
 800482a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004830:	2b00      	cmp	r3, #0
 8004832:	d00e      	beq.n	8004852 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f000 fb15 	bl	8004e64 <DMA_CheckFifoParam>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d008      	beq.n	8004852 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2240      	movs	r2, #64	; 0x40
 8004844:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2201      	movs	r2, #1
 800484a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800484e:	2301      	movs	r3, #1
 8004850:	e016      	b.n	8004880 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	697a      	ldr	r2, [r7, #20]
 8004858:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 facc 	bl	8004df8 <DMA_CalcBaseAndBitshift>
 8004860:	4603      	mov	r3, r0
 8004862:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004868:	223f      	movs	r2, #63	; 0x3f
 800486a:	409a      	lsls	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2201      	movs	r2, #1
 800487a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	3718      	adds	r7, #24
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}
 8004888:	e010803f 	.word	0xe010803f

0800488c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b086      	sub	sp, #24
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
 8004898:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800489a:	2300      	movs	r3, #0
 800489c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d101      	bne.n	80048b2 <HAL_DMA_Start_IT+0x26>
 80048ae:	2302      	movs	r3, #2
 80048b0:	e048      	b.n	8004944 <HAL_DMA_Start_IT+0xb8>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2201      	movs	r2, #1
 80048b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d137      	bne.n	8004936 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2202      	movs	r2, #2
 80048ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	68b9      	ldr	r1, [r7, #8]
 80048da:	68f8      	ldr	r0, [r7, #12]
 80048dc:	f000 fa5e 	bl	8004d9c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048e4:	223f      	movs	r2, #63	; 0x3f
 80048e6:	409a      	lsls	r2, r3
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f042 0216 	orr.w	r2, r2, #22
 80048fa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	695a      	ldr	r2, [r3, #20]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800490a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004910:	2b00      	cmp	r3, #0
 8004912:	d007      	beq.n	8004924 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f042 0208 	orr.w	r2, r2, #8
 8004922:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f042 0201 	orr.w	r2, r2, #1
 8004932:	601a      	str	r2, [r3, #0]
 8004934:	e005      	b.n	8004942 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800493e:	2302      	movs	r3, #2
 8004940:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004942:	7dfb      	ldrb	r3, [r7, #23]
}
 8004944:	4618      	mov	r0, r3
 8004946:	3718      	adds	r7, #24
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004958:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800495a:	f7ff f985 	bl	8003c68 <HAL_GetTick>
 800495e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004966:	b2db      	uxtb	r3, r3
 8004968:	2b02      	cmp	r3, #2
 800496a:	d008      	beq.n	800497e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2280      	movs	r2, #128	; 0x80
 8004970:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e052      	b.n	8004a24 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f022 0216 	bic.w	r2, r2, #22
 800498c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	695a      	ldr	r2, [r3, #20]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800499c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d103      	bne.n	80049ae <HAL_DMA_Abort+0x62>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d007      	beq.n	80049be <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f022 0208 	bic.w	r2, r2, #8
 80049bc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f022 0201 	bic.w	r2, r2, #1
 80049cc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049ce:	e013      	b.n	80049f8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80049d0:	f7ff f94a 	bl	8003c68 <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	2b05      	cmp	r3, #5
 80049dc:	d90c      	bls.n	80049f8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2220      	movs	r2, #32
 80049e2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2203      	movs	r2, #3
 80049f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e015      	b.n	8004a24 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d1e4      	bne.n	80049d0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a0a:	223f      	movs	r2, #63	; 0x3f
 8004a0c:	409a      	lsls	r2, r3
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8004a22:	2300      	movs	r3, #0
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3710      	adds	r7, #16
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d004      	beq.n	8004a4a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2280      	movs	r2, #128	; 0x80
 8004a44:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e00c      	b.n	8004a64 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2205      	movs	r2, #5
 8004a4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f022 0201 	bic.w	r2, r2, #1
 8004a60:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004a62:	2300      	movs	r3, #0
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b086      	sub	sp, #24
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004a7c:	4b92      	ldr	r3, [pc, #584]	; (8004cc8 <HAL_DMA_IRQHandler+0x258>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a92      	ldr	r2, [pc, #584]	; (8004ccc <HAL_DMA_IRQHandler+0x25c>)
 8004a82:	fba2 2303 	umull	r2, r3, r2, r3
 8004a86:	0a9b      	lsrs	r3, r3, #10
 8004a88:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a8e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a9a:	2208      	movs	r2, #8
 8004a9c:	409a      	lsls	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d01a      	beq.n	8004adc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0304 	and.w	r3, r3, #4
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d013      	beq.n	8004adc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f022 0204 	bic.w	r2, r2, #4
 8004ac2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ac8:	2208      	movs	r2, #8
 8004aca:	409a      	lsls	r2, r3
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ad4:	f043 0201 	orr.w	r2, r3, #1
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	409a      	lsls	r2, r3
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d012      	beq.n	8004b12 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	695b      	ldr	r3, [r3, #20]
 8004af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d00b      	beq.n	8004b12 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004afe:	2201      	movs	r2, #1
 8004b00:	409a      	lsls	r2, r3
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b0a:	f043 0202 	orr.w	r2, r3, #2
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b16:	2204      	movs	r2, #4
 8004b18:	409a      	lsls	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d012      	beq.n	8004b48 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0302 	and.w	r3, r3, #2
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00b      	beq.n	8004b48 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b34:	2204      	movs	r2, #4
 8004b36:	409a      	lsls	r2, r3
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b40:	f043 0204 	orr.w	r2, r3, #4
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b4c:	2210      	movs	r2, #16
 8004b4e:	409a      	lsls	r2, r3
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	4013      	ands	r3, r2
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d043      	beq.n	8004be0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0308 	and.w	r3, r3, #8
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d03c      	beq.n	8004be0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b6a:	2210      	movs	r2, #16
 8004b6c:	409a      	lsls	r2, r3
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d018      	beq.n	8004bb2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d108      	bne.n	8004ba0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d024      	beq.n	8004be0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	4798      	blx	r3
 8004b9e:	e01f      	b.n	8004be0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d01b      	beq.n	8004be0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	4798      	blx	r3
 8004bb0:	e016      	b.n	8004be0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d107      	bne.n	8004bd0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f022 0208 	bic.w	r2, r2, #8
 8004bce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d003      	beq.n	8004be0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004be4:	2220      	movs	r2, #32
 8004be6:	409a      	lsls	r2, r3
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	4013      	ands	r3, r2
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	f000 808e 	beq.w	8004d0e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0310 	and.w	r3, r3, #16
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	f000 8086 	beq.w	8004d0e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c06:	2220      	movs	r2, #32
 8004c08:	409a      	lsls	r2, r3
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	2b05      	cmp	r3, #5
 8004c18:	d136      	bne.n	8004c88 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f022 0216 	bic.w	r2, r2, #22
 8004c28:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	695a      	ldr	r2, [r3, #20]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c38:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d103      	bne.n	8004c4a <HAL_DMA_IRQHandler+0x1da>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d007      	beq.n	8004c5a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f022 0208 	bic.w	r2, r2, #8
 8004c58:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c5e:	223f      	movs	r2, #63	; 0x3f
 8004c60:	409a      	lsls	r2, r3
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2201      	movs	r2, #1
 8004c72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d07d      	beq.n	8004d7a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	4798      	blx	r3
        }
        return;
 8004c86:	e078      	b.n	8004d7a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d01c      	beq.n	8004cd0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d108      	bne.n	8004cb6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d030      	beq.n	8004d0e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	4798      	blx	r3
 8004cb4:	e02b      	b.n	8004d0e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d027      	beq.n	8004d0e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	4798      	blx	r3
 8004cc6:	e022      	b.n	8004d0e <HAL_DMA_IRQHandler+0x29e>
 8004cc8:	20000004 	.word	0x20000004
 8004ccc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d10f      	bne.n	8004cfe <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f022 0210 	bic.w	r2, r2, #16
 8004cec:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d003      	beq.n	8004d0e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d032      	beq.n	8004d7c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d1a:	f003 0301 	and.w	r3, r3, #1
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d022      	beq.n	8004d68 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2205      	movs	r2, #5
 8004d26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f022 0201 	bic.w	r2, r2, #1
 8004d38:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	60bb      	str	r3, [r7, #8]
 8004d40:	697a      	ldr	r2, [r7, #20]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d307      	bcc.n	8004d56 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0301 	and.w	r3, r3, #1
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d1f2      	bne.n	8004d3a <HAL_DMA_IRQHandler+0x2ca>
 8004d54:	e000      	b.n	8004d58 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004d56:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d005      	beq.n	8004d7c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	4798      	blx	r3
 8004d78:	e000      	b.n	8004d7c <HAL_DMA_IRQHandler+0x30c>
        return;
 8004d7a:	bf00      	nop
    }
  }
}
 8004d7c:	3718      	adds	r7, #24
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop

08004d84 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	607a      	str	r2, [r7, #4]
 8004da8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004db8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	683a      	ldr	r2, [r7, #0]
 8004dc0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	2b40      	cmp	r3, #64	; 0x40
 8004dc8:	d108      	bne.n	8004ddc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	68ba      	ldr	r2, [r7, #8]
 8004dd8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004dda:	e007      	b.n	8004dec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68ba      	ldr	r2, [r7, #8]
 8004de2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	60da      	str	r2, [r3, #12]
}
 8004dec:	bf00      	nop
 8004dee:	3714      	adds	r7, #20
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b085      	sub	sp, #20
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	3b10      	subs	r3, #16
 8004e08:	4a13      	ldr	r2, [pc, #76]	; (8004e58 <DMA_CalcBaseAndBitshift+0x60>)
 8004e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e0e:	091b      	lsrs	r3, r3, #4
 8004e10:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004e12:	4a12      	ldr	r2, [pc, #72]	; (8004e5c <DMA_CalcBaseAndBitshift+0x64>)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	4413      	add	r3, r2
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2b03      	cmp	r3, #3
 8004e24:	d908      	bls.n	8004e38 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	4b0c      	ldr	r3, [pc, #48]	; (8004e60 <DMA_CalcBaseAndBitshift+0x68>)
 8004e2e:	4013      	ands	r3, r2
 8004e30:	1d1a      	adds	r2, r3, #4
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	659a      	str	r2, [r3, #88]	; 0x58
 8004e36:	e006      	b.n	8004e46 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	4b08      	ldr	r3, [pc, #32]	; (8004e60 <DMA_CalcBaseAndBitshift+0x68>)
 8004e40:	4013      	ands	r3, r2
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3714      	adds	r7, #20
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	aaaaaaab 	.word	0xaaaaaaab
 8004e5c:	0800ee9c 	.word	0x0800ee9c
 8004e60:	fffffc00 	.word	0xfffffc00

08004e64 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b085      	sub	sp, #20
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e74:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d11f      	bne.n	8004ebe <DMA_CheckFifoParam+0x5a>
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	2b03      	cmp	r3, #3
 8004e82:	d856      	bhi.n	8004f32 <DMA_CheckFifoParam+0xce>
 8004e84:	a201      	add	r2, pc, #4	; (adr r2, 8004e8c <DMA_CheckFifoParam+0x28>)
 8004e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e8a:	bf00      	nop
 8004e8c:	08004e9d 	.word	0x08004e9d
 8004e90:	08004eaf 	.word	0x08004eaf
 8004e94:	08004e9d 	.word	0x08004e9d
 8004e98:	08004f33 	.word	0x08004f33
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d046      	beq.n	8004f36 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004eac:	e043      	b.n	8004f36 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004eb6:	d140      	bne.n	8004f3a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ebc:	e03d      	b.n	8004f3a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	699b      	ldr	r3, [r3, #24]
 8004ec2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ec6:	d121      	bne.n	8004f0c <DMA_CheckFifoParam+0xa8>
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	2b03      	cmp	r3, #3
 8004ecc:	d837      	bhi.n	8004f3e <DMA_CheckFifoParam+0xda>
 8004ece:	a201      	add	r2, pc, #4	; (adr r2, 8004ed4 <DMA_CheckFifoParam+0x70>)
 8004ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed4:	08004ee5 	.word	0x08004ee5
 8004ed8:	08004eeb 	.word	0x08004eeb
 8004edc:	08004ee5 	.word	0x08004ee5
 8004ee0:	08004efd 	.word	0x08004efd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ee8:	e030      	b.n	8004f4c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d025      	beq.n	8004f42 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004efa:	e022      	b.n	8004f42 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f00:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f04:	d11f      	bne.n	8004f46 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004f0a:	e01c      	b.n	8004f46 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d903      	bls.n	8004f1a <DMA_CheckFifoParam+0xb6>
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	2b03      	cmp	r3, #3
 8004f16:	d003      	beq.n	8004f20 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004f18:	e018      	b.n	8004f4c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	73fb      	strb	r3, [r7, #15]
      break;
 8004f1e:	e015      	b.n	8004f4c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d00e      	beq.n	8004f4a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	73fb      	strb	r3, [r7, #15]
      break;
 8004f30:	e00b      	b.n	8004f4a <DMA_CheckFifoParam+0xe6>
      break;
 8004f32:	bf00      	nop
 8004f34:	e00a      	b.n	8004f4c <DMA_CheckFifoParam+0xe8>
      break;
 8004f36:	bf00      	nop
 8004f38:	e008      	b.n	8004f4c <DMA_CheckFifoParam+0xe8>
      break;
 8004f3a:	bf00      	nop
 8004f3c:	e006      	b.n	8004f4c <DMA_CheckFifoParam+0xe8>
      break;
 8004f3e:	bf00      	nop
 8004f40:	e004      	b.n	8004f4c <DMA_CheckFifoParam+0xe8>
      break;
 8004f42:	bf00      	nop
 8004f44:	e002      	b.n	8004f4c <DMA_CheckFifoParam+0xe8>
      break;   
 8004f46:	bf00      	nop
 8004f48:	e000      	b.n	8004f4c <DMA_CheckFifoParam+0xe8>
      break;
 8004f4a:	bf00      	nop
    }
  } 
  
  return status; 
 8004f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3714      	adds	r7, #20
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr
 8004f5a:	bf00      	nop

08004f5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b089      	sub	sp, #36	; 0x24
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004f66:	2300      	movs	r3, #0
 8004f68:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004f72:	2300      	movs	r3, #0
 8004f74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004f76:	2300      	movs	r3, #0
 8004f78:	61fb      	str	r3, [r7, #28]
 8004f7a:	e169      	b.n	8005250 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	fa02 f303 	lsl.w	r3, r2, r3
 8004f84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	697a      	ldr	r2, [r7, #20]
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004f90:	693a      	ldr	r2, [r7, #16]
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	f040 8158 	bne.w	800524a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d00b      	beq.n	8004fba <HAL_GPIO_Init+0x5e>
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	d007      	beq.n	8004fba <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004fae:	2b11      	cmp	r3, #17
 8004fb0:	d003      	beq.n	8004fba <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	2b12      	cmp	r3, #18
 8004fb8:	d130      	bne.n	800501c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	005b      	lsls	r3, r3, #1
 8004fc4:	2203      	movs	r2, #3
 8004fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fca:	43db      	mvns	r3, r3
 8004fcc:	69ba      	ldr	r2, [r7, #24]
 8004fce:	4013      	ands	r3, r2
 8004fd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	68da      	ldr	r2, [r3, #12]
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	005b      	lsls	r3, r3, #1
 8004fda:	fa02 f303 	lsl.w	r3, r2, r3
 8004fde:	69ba      	ldr	r2, [r7, #24]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	69ba      	ldr	r2, [r7, #24]
 8004fe8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff8:	43db      	mvns	r3, r3
 8004ffa:	69ba      	ldr	r2, [r7, #24]
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	091b      	lsrs	r3, r3, #4
 8005006:	f003 0201 	and.w	r2, r3, #1
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	fa02 f303 	lsl.w	r3, r2, r3
 8005010:	69ba      	ldr	r2, [r7, #24]
 8005012:	4313      	orrs	r3, r2
 8005014:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	69ba      	ldr	r2, [r7, #24]
 800501a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	005b      	lsls	r3, r3, #1
 8005026:	2203      	movs	r2, #3
 8005028:	fa02 f303 	lsl.w	r3, r2, r3
 800502c:	43db      	mvns	r3, r3
 800502e:	69ba      	ldr	r2, [r7, #24]
 8005030:	4013      	ands	r3, r2
 8005032:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	689a      	ldr	r2, [r3, #8]
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	005b      	lsls	r3, r3, #1
 800503c:	fa02 f303 	lsl.w	r3, r2, r3
 8005040:	69ba      	ldr	r2, [r7, #24]
 8005042:	4313      	orrs	r3, r2
 8005044:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	69ba      	ldr	r2, [r7, #24]
 800504a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	2b02      	cmp	r3, #2
 8005052:	d003      	beq.n	800505c <HAL_GPIO_Init+0x100>
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	2b12      	cmp	r3, #18
 800505a:	d123      	bne.n	80050a4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	08da      	lsrs	r2, r3, #3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	3208      	adds	r2, #8
 8005064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005068:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	f003 0307 	and.w	r3, r3, #7
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	220f      	movs	r2, #15
 8005074:	fa02 f303 	lsl.w	r3, r2, r3
 8005078:	43db      	mvns	r3, r3
 800507a:	69ba      	ldr	r2, [r7, #24]
 800507c:	4013      	ands	r3, r2
 800507e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	691a      	ldr	r2, [r3, #16]
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	f003 0307 	and.w	r3, r3, #7
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	fa02 f303 	lsl.w	r3, r2, r3
 8005090:	69ba      	ldr	r2, [r7, #24]
 8005092:	4313      	orrs	r3, r2
 8005094:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	08da      	lsrs	r2, r3, #3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	3208      	adds	r2, #8
 800509e:	69b9      	ldr	r1, [r7, #24]
 80050a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	005b      	lsls	r3, r3, #1
 80050ae:	2203      	movs	r2, #3
 80050b0:	fa02 f303 	lsl.w	r3, r2, r3
 80050b4:	43db      	mvns	r3, r3
 80050b6:	69ba      	ldr	r2, [r7, #24]
 80050b8:	4013      	ands	r3, r2
 80050ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	f003 0203 	and.w	r2, r3, #3
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	005b      	lsls	r3, r3, #1
 80050c8:	fa02 f303 	lsl.w	r3, r2, r3
 80050cc:	69ba      	ldr	r2, [r7, #24]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	69ba      	ldr	r2, [r7, #24]
 80050d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	f000 80b2 	beq.w	800524a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050e6:	4b60      	ldr	r3, [pc, #384]	; (8005268 <HAL_GPIO_Init+0x30c>)
 80050e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ea:	4a5f      	ldr	r2, [pc, #380]	; (8005268 <HAL_GPIO_Init+0x30c>)
 80050ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80050f0:	6453      	str	r3, [r2, #68]	; 0x44
 80050f2:	4b5d      	ldr	r3, [pc, #372]	; (8005268 <HAL_GPIO_Init+0x30c>)
 80050f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050fa:	60fb      	str	r3, [r7, #12]
 80050fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80050fe:	4a5b      	ldr	r2, [pc, #364]	; (800526c <HAL_GPIO_Init+0x310>)
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	089b      	lsrs	r3, r3, #2
 8005104:	3302      	adds	r3, #2
 8005106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800510a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	f003 0303 	and.w	r3, r3, #3
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	220f      	movs	r2, #15
 8005116:	fa02 f303 	lsl.w	r3, r2, r3
 800511a:	43db      	mvns	r3, r3
 800511c:	69ba      	ldr	r2, [r7, #24]
 800511e:	4013      	ands	r3, r2
 8005120:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a52      	ldr	r2, [pc, #328]	; (8005270 <HAL_GPIO_Init+0x314>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d02b      	beq.n	8005182 <HAL_GPIO_Init+0x226>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a51      	ldr	r2, [pc, #324]	; (8005274 <HAL_GPIO_Init+0x318>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d025      	beq.n	800517e <HAL_GPIO_Init+0x222>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a50      	ldr	r2, [pc, #320]	; (8005278 <HAL_GPIO_Init+0x31c>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d01f      	beq.n	800517a <HAL_GPIO_Init+0x21e>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a4f      	ldr	r2, [pc, #316]	; (800527c <HAL_GPIO_Init+0x320>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d019      	beq.n	8005176 <HAL_GPIO_Init+0x21a>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a4e      	ldr	r2, [pc, #312]	; (8005280 <HAL_GPIO_Init+0x324>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d013      	beq.n	8005172 <HAL_GPIO_Init+0x216>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a4d      	ldr	r2, [pc, #308]	; (8005284 <HAL_GPIO_Init+0x328>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d00d      	beq.n	800516e <HAL_GPIO_Init+0x212>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a4c      	ldr	r2, [pc, #304]	; (8005288 <HAL_GPIO_Init+0x32c>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d007      	beq.n	800516a <HAL_GPIO_Init+0x20e>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a4b      	ldr	r2, [pc, #300]	; (800528c <HAL_GPIO_Init+0x330>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d101      	bne.n	8005166 <HAL_GPIO_Init+0x20a>
 8005162:	2307      	movs	r3, #7
 8005164:	e00e      	b.n	8005184 <HAL_GPIO_Init+0x228>
 8005166:	2308      	movs	r3, #8
 8005168:	e00c      	b.n	8005184 <HAL_GPIO_Init+0x228>
 800516a:	2306      	movs	r3, #6
 800516c:	e00a      	b.n	8005184 <HAL_GPIO_Init+0x228>
 800516e:	2305      	movs	r3, #5
 8005170:	e008      	b.n	8005184 <HAL_GPIO_Init+0x228>
 8005172:	2304      	movs	r3, #4
 8005174:	e006      	b.n	8005184 <HAL_GPIO_Init+0x228>
 8005176:	2303      	movs	r3, #3
 8005178:	e004      	b.n	8005184 <HAL_GPIO_Init+0x228>
 800517a:	2302      	movs	r3, #2
 800517c:	e002      	b.n	8005184 <HAL_GPIO_Init+0x228>
 800517e:	2301      	movs	r3, #1
 8005180:	e000      	b.n	8005184 <HAL_GPIO_Init+0x228>
 8005182:	2300      	movs	r3, #0
 8005184:	69fa      	ldr	r2, [r7, #28]
 8005186:	f002 0203 	and.w	r2, r2, #3
 800518a:	0092      	lsls	r2, r2, #2
 800518c:	4093      	lsls	r3, r2
 800518e:	69ba      	ldr	r2, [r7, #24]
 8005190:	4313      	orrs	r3, r2
 8005192:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005194:	4935      	ldr	r1, [pc, #212]	; (800526c <HAL_GPIO_Init+0x310>)
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	089b      	lsrs	r3, r3, #2
 800519a:	3302      	adds	r3, #2
 800519c:	69ba      	ldr	r2, [r7, #24]
 800519e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80051a2:	4b3b      	ldr	r3, [pc, #236]	; (8005290 <HAL_GPIO_Init+0x334>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	43db      	mvns	r3, r3
 80051ac:	69ba      	ldr	r2, [r7, #24]
 80051ae:	4013      	ands	r3, r2
 80051b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d003      	beq.n	80051c6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80051be:	69ba      	ldr	r2, [r7, #24]
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80051c6:	4a32      	ldr	r2, [pc, #200]	; (8005290 <HAL_GPIO_Init+0x334>)
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80051cc:	4b30      	ldr	r3, [pc, #192]	; (8005290 <HAL_GPIO_Init+0x334>)
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	43db      	mvns	r3, r3
 80051d6:	69ba      	ldr	r2, [r7, #24]
 80051d8:	4013      	ands	r3, r2
 80051da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d003      	beq.n	80051f0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80051e8:	69ba      	ldr	r2, [r7, #24]
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80051f0:	4a27      	ldr	r2, [pc, #156]	; (8005290 <HAL_GPIO_Init+0x334>)
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80051f6:	4b26      	ldr	r3, [pc, #152]	; (8005290 <HAL_GPIO_Init+0x334>)
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	43db      	mvns	r3, r3
 8005200:	69ba      	ldr	r2, [r7, #24]
 8005202:	4013      	ands	r3, r2
 8005204:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800520e:	2b00      	cmp	r3, #0
 8005210:	d003      	beq.n	800521a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005212:	69ba      	ldr	r2, [r7, #24]
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	4313      	orrs	r3, r2
 8005218:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800521a:	4a1d      	ldr	r2, [pc, #116]	; (8005290 <HAL_GPIO_Init+0x334>)
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005220:	4b1b      	ldr	r3, [pc, #108]	; (8005290 <HAL_GPIO_Init+0x334>)
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	43db      	mvns	r3, r3
 800522a:	69ba      	ldr	r2, [r7, #24]
 800522c:	4013      	ands	r3, r2
 800522e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d003      	beq.n	8005244 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800523c:	69ba      	ldr	r2, [r7, #24]
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	4313      	orrs	r3, r2
 8005242:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005244:	4a12      	ldr	r2, [pc, #72]	; (8005290 <HAL_GPIO_Init+0x334>)
 8005246:	69bb      	ldr	r3, [r7, #24]
 8005248:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	3301      	adds	r3, #1
 800524e:	61fb      	str	r3, [r7, #28]
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	2b0f      	cmp	r3, #15
 8005254:	f67f ae92 	bls.w	8004f7c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005258:	bf00      	nop
 800525a:	bf00      	nop
 800525c:	3724      	adds	r7, #36	; 0x24
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	40023800 	.word	0x40023800
 800526c:	40013800 	.word	0x40013800
 8005270:	40020000 	.word	0x40020000
 8005274:	40020400 	.word	0x40020400
 8005278:	40020800 	.word	0x40020800
 800527c:	40020c00 	.word	0x40020c00
 8005280:	40021000 	.word	0x40021000
 8005284:	40021400 	.word	0x40021400
 8005288:	40021800 	.word	0x40021800
 800528c:	40021c00 	.word	0x40021c00
 8005290:	40013c00 	.word	0x40013c00

08005294 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005294:	b480      	push	{r7}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	460b      	mov	r3, r1
 800529e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	691a      	ldr	r2, [r3, #16]
 80052a4:	887b      	ldrh	r3, [r7, #2]
 80052a6:	4013      	ands	r3, r2
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d002      	beq.n	80052b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80052ac:	2301      	movs	r3, #1
 80052ae:	73fb      	strb	r3, [r7, #15]
 80052b0:	e001      	b.n	80052b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80052b2:	2300      	movs	r3, #0
 80052b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80052b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3714      	adds	r7, #20
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	460b      	mov	r3, r1
 80052ce:	807b      	strh	r3, [r7, #2]
 80052d0:	4613      	mov	r3, r2
 80052d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80052d4:	787b      	ldrb	r3, [r7, #1]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d003      	beq.n	80052e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80052da:	887a      	ldrh	r2, [r7, #2]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80052e0:	e003      	b.n	80052ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80052e2:	887b      	ldrh	r3, [r7, #2]
 80052e4:	041a      	lsls	r2, r3, #16
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	619a      	str	r2, [r3, #24]
}
 80052ea:	bf00      	nop
 80052ec:	370c      	adds	r7, #12
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr
	...

080052f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	4603      	mov	r3, r0
 8005300:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005302:	4b08      	ldr	r3, [pc, #32]	; (8005324 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005304:	695a      	ldr	r2, [r3, #20]
 8005306:	88fb      	ldrh	r3, [r7, #6]
 8005308:	4013      	ands	r3, r2
 800530a:	2b00      	cmp	r3, #0
 800530c:	d006      	beq.n	800531c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800530e:	4a05      	ldr	r2, [pc, #20]	; (8005324 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005310:	88fb      	ldrh	r3, [r7, #6]
 8005312:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005314:	88fb      	ldrh	r3, [r7, #6]
 8005316:	4618      	mov	r0, r3
 8005318:	f7fc fd62 	bl	8001de0 <HAL_GPIO_EXTI_Callback>
  }
}
 800531c:	bf00      	nop
 800531e:	3708      	adds	r7, #8
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}
 8005324:	40013c00 	.word	0x40013c00

08005328 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b086      	sub	sp, #24
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005330:	2300      	movs	r3, #0
 8005332:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d101      	bne.n	800533e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e291      	b.n	8005862 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 0301 	and.w	r3, r3, #1
 8005346:	2b00      	cmp	r3, #0
 8005348:	f000 8087 	beq.w	800545a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800534c:	4b96      	ldr	r3, [pc, #600]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	f003 030c 	and.w	r3, r3, #12
 8005354:	2b04      	cmp	r3, #4
 8005356:	d00c      	beq.n	8005372 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005358:	4b93      	ldr	r3, [pc, #588]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	f003 030c 	and.w	r3, r3, #12
 8005360:	2b08      	cmp	r3, #8
 8005362:	d112      	bne.n	800538a <HAL_RCC_OscConfig+0x62>
 8005364:	4b90      	ldr	r3, [pc, #576]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800536c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005370:	d10b      	bne.n	800538a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005372:	4b8d      	ldr	r3, [pc, #564]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d06c      	beq.n	8005458 <HAL_RCC_OscConfig+0x130>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d168      	bne.n	8005458 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e26b      	b.n	8005862 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005392:	d106      	bne.n	80053a2 <HAL_RCC_OscConfig+0x7a>
 8005394:	4b84      	ldr	r3, [pc, #528]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a83      	ldr	r2, [pc, #524]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 800539a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800539e:	6013      	str	r3, [r2, #0]
 80053a0:	e02e      	b.n	8005400 <HAL_RCC_OscConfig+0xd8>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d10c      	bne.n	80053c4 <HAL_RCC_OscConfig+0x9c>
 80053aa:	4b7f      	ldr	r3, [pc, #508]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a7e      	ldr	r2, [pc, #504]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 80053b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053b4:	6013      	str	r3, [r2, #0]
 80053b6:	4b7c      	ldr	r3, [pc, #496]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a7b      	ldr	r2, [pc, #492]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 80053bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053c0:	6013      	str	r3, [r2, #0]
 80053c2:	e01d      	b.n	8005400 <HAL_RCC_OscConfig+0xd8>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053cc:	d10c      	bne.n	80053e8 <HAL_RCC_OscConfig+0xc0>
 80053ce:	4b76      	ldr	r3, [pc, #472]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a75      	ldr	r2, [pc, #468]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 80053d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053d8:	6013      	str	r3, [r2, #0]
 80053da:	4b73      	ldr	r3, [pc, #460]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a72      	ldr	r2, [pc, #456]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 80053e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053e4:	6013      	str	r3, [r2, #0]
 80053e6:	e00b      	b.n	8005400 <HAL_RCC_OscConfig+0xd8>
 80053e8:	4b6f      	ldr	r3, [pc, #444]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a6e      	ldr	r2, [pc, #440]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 80053ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053f2:	6013      	str	r3, [r2, #0]
 80053f4:	4b6c      	ldr	r3, [pc, #432]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a6b      	ldr	r2, [pc, #428]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 80053fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d013      	beq.n	8005430 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005408:	f7fe fc2e 	bl	8003c68 <HAL_GetTick>
 800540c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800540e:	e008      	b.n	8005422 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005410:	f7fe fc2a 	bl	8003c68 <HAL_GetTick>
 8005414:	4602      	mov	r2, r0
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	2b64      	cmp	r3, #100	; 0x64
 800541c:	d901      	bls.n	8005422 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800541e:	2303      	movs	r3, #3
 8005420:	e21f      	b.n	8005862 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005422:	4b61      	ldr	r3, [pc, #388]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d0f0      	beq.n	8005410 <HAL_RCC_OscConfig+0xe8>
 800542e:	e014      	b.n	800545a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005430:	f7fe fc1a 	bl	8003c68 <HAL_GetTick>
 8005434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005436:	e008      	b.n	800544a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005438:	f7fe fc16 	bl	8003c68 <HAL_GetTick>
 800543c:	4602      	mov	r2, r0
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	2b64      	cmp	r3, #100	; 0x64
 8005444:	d901      	bls.n	800544a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005446:	2303      	movs	r3, #3
 8005448:	e20b      	b.n	8005862 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800544a:	4b57      	ldr	r3, [pc, #348]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005452:	2b00      	cmp	r3, #0
 8005454:	d1f0      	bne.n	8005438 <HAL_RCC_OscConfig+0x110>
 8005456:	e000      	b.n	800545a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005458:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 0302 	and.w	r3, r3, #2
 8005462:	2b00      	cmp	r3, #0
 8005464:	d069      	beq.n	800553a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005466:	4b50      	ldr	r3, [pc, #320]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f003 030c 	and.w	r3, r3, #12
 800546e:	2b00      	cmp	r3, #0
 8005470:	d00b      	beq.n	800548a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005472:	4b4d      	ldr	r3, [pc, #308]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	f003 030c 	and.w	r3, r3, #12
 800547a:	2b08      	cmp	r3, #8
 800547c:	d11c      	bne.n	80054b8 <HAL_RCC_OscConfig+0x190>
 800547e:	4b4a      	ldr	r3, [pc, #296]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005486:	2b00      	cmp	r3, #0
 8005488:	d116      	bne.n	80054b8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800548a:	4b47      	ldr	r3, [pc, #284]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0302 	and.w	r3, r3, #2
 8005492:	2b00      	cmp	r3, #0
 8005494:	d005      	beq.n	80054a2 <HAL_RCC_OscConfig+0x17a>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	2b01      	cmp	r3, #1
 800549c:	d001      	beq.n	80054a2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e1df      	b.n	8005862 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054a2:	4b41      	ldr	r3, [pc, #260]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	00db      	lsls	r3, r3, #3
 80054b0:	493d      	ldr	r1, [pc, #244]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 80054b2:	4313      	orrs	r3, r2
 80054b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054b6:	e040      	b.n	800553a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d023      	beq.n	8005508 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054c0:	4b39      	ldr	r3, [pc, #228]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a38      	ldr	r2, [pc, #224]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 80054c6:	f043 0301 	orr.w	r3, r3, #1
 80054ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054cc:	f7fe fbcc 	bl	8003c68 <HAL_GetTick>
 80054d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054d2:	e008      	b.n	80054e6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054d4:	f7fe fbc8 	bl	8003c68 <HAL_GetTick>
 80054d8:	4602      	mov	r2, r0
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d901      	bls.n	80054e6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	e1bd      	b.n	8005862 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054e6:	4b30      	ldr	r3, [pc, #192]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 0302 	and.w	r3, r3, #2
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d0f0      	beq.n	80054d4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054f2:	4b2d      	ldr	r3, [pc, #180]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	00db      	lsls	r3, r3, #3
 8005500:	4929      	ldr	r1, [pc, #164]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 8005502:	4313      	orrs	r3, r2
 8005504:	600b      	str	r3, [r1, #0]
 8005506:	e018      	b.n	800553a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005508:	4b27      	ldr	r3, [pc, #156]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a26      	ldr	r2, [pc, #152]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 800550e:	f023 0301 	bic.w	r3, r3, #1
 8005512:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005514:	f7fe fba8 	bl	8003c68 <HAL_GetTick>
 8005518:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800551a:	e008      	b.n	800552e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800551c:	f7fe fba4 	bl	8003c68 <HAL_GetTick>
 8005520:	4602      	mov	r2, r0
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	2b02      	cmp	r3, #2
 8005528:	d901      	bls.n	800552e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800552a:	2303      	movs	r3, #3
 800552c:	e199      	b.n	8005862 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800552e:	4b1e      	ldr	r3, [pc, #120]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0302 	and.w	r3, r3, #2
 8005536:	2b00      	cmp	r3, #0
 8005538:	d1f0      	bne.n	800551c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 0308 	and.w	r3, r3, #8
 8005542:	2b00      	cmp	r3, #0
 8005544:	d038      	beq.n	80055b8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d019      	beq.n	8005582 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800554e:	4b16      	ldr	r3, [pc, #88]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 8005550:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005552:	4a15      	ldr	r2, [pc, #84]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 8005554:	f043 0301 	orr.w	r3, r3, #1
 8005558:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800555a:	f7fe fb85 	bl	8003c68 <HAL_GetTick>
 800555e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005560:	e008      	b.n	8005574 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005562:	f7fe fb81 	bl	8003c68 <HAL_GetTick>
 8005566:	4602      	mov	r2, r0
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	2b02      	cmp	r3, #2
 800556e:	d901      	bls.n	8005574 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	e176      	b.n	8005862 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005574:	4b0c      	ldr	r3, [pc, #48]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 8005576:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005578:	f003 0302 	and.w	r3, r3, #2
 800557c:	2b00      	cmp	r3, #0
 800557e:	d0f0      	beq.n	8005562 <HAL_RCC_OscConfig+0x23a>
 8005580:	e01a      	b.n	80055b8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005582:	4b09      	ldr	r3, [pc, #36]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 8005584:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005586:	4a08      	ldr	r2, [pc, #32]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 8005588:	f023 0301 	bic.w	r3, r3, #1
 800558c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800558e:	f7fe fb6b 	bl	8003c68 <HAL_GetTick>
 8005592:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005594:	e00a      	b.n	80055ac <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005596:	f7fe fb67 	bl	8003c68 <HAL_GetTick>
 800559a:	4602      	mov	r2, r0
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	1ad3      	subs	r3, r2, r3
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d903      	bls.n	80055ac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80055a4:	2303      	movs	r3, #3
 80055a6:	e15c      	b.n	8005862 <HAL_RCC_OscConfig+0x53a>
 80055a8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055ac:	4b91      	ldr	r3, [pc, #580]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 80055ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055b0:	f003 0302 	and.w	r3, r3, #2
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d1ee      	bne.n	8005596 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0304 	and.w	r3, r3, #4
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	f000 80a4 	beq.w	800570e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055c6:	4b8b      	ldr	r3, [pc, #556]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 80055c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d10d      	bne.n	80055ee <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80055d2:	4b88      	ldr	r3, [pc, #544]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 80055d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d6:	4a87      	ldr	r2, [pc, #540]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 80055d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055dc:	6413      	str	r3, [r2, #64]	; 0x40
 80055de:	4b85      	ldr	r3, [pc, #532]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 80055e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055e6:	60bb      	str	r3, [r7, #8]
 80055e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055ea:	2301      	movs	r3, #1
 80055ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055ee:	4b82      	ldr	r3, [pc, #520]	; (80057f8 <HAL_RCC_OscConfig+0x4d0>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d118      	bne.n	800562c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80055fa:	4b7f      	ldr	r3, [pc, #508]	; (80057f8 <HAL_RCC_OscConfig+0x4d0>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a7e      	ldr	r2, [pc, #504]	; (80057f8 <HAL_RCC_OscConfig+0x4d0>)
 8005600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005604:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005606:	f7fe fb2f 	bl	8003c68 <HAL_GetTick>
 800560a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800560c:	e008      	b.n	8005620 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800560e:	f7fe fb2b 	bl	8003c68 <HAL_GetTick>
 8005612:	4602      	mov	r2, r0
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	1ad3      	subs	r3, r2, r3
 8005618:	2b64      	cmp	r3, #100	; 0x64
 800561a:	d901      	bls.n	8005620 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800561c:	2303      	movs	r3, #3
 800561e:	e120      	b.n	8005862 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005620:	4b75      	ldr	r3, [pc, #468]	; (80057f8 <HAL_RCC_OscConfig+0x4d0>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005628:	2b00      	cmp	r3, #0
 800562a:	d0f0      	beq.n	800560e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	2b01      	cmp	r3, #1
 8005632:	d106      	bne.n	8005642 <HAL_RCC_OscConfig+0x31a>
 8005634:	4b6f      	ldr	r3, [pc, #444]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 8005636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005638:	4a6e      	ldr	r2, [pc, #440]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 800563a:	f043 0301 	orr.w	r3, r3, #1
 800563e:	6713      	str	r3, [r2, #112]	; 0x70
 8005640:	e02d      	b.n	800569e <HAL_RCC_OscConfig+0x376>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d10c      	bne.n	8005664 <HAL_RCC_OscConfig+0x33c>
 800564a:	4b6a      	ldr	r3, [pc, #424]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 800564c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800564e:	4a69      	ldr	r2, [pc, #420]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 8005650:	f023 0301 	bic.w	r3, r3, #1
 8005654:	6713      	str	r3, [r2, #112]	; 0x70
 8005656:	4b67      	ldr	r3, [pc, #412]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 8005658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800565a:	4a66      	ldr	r2, [pc, #408]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 800565c:	f023 0304 	bic.w	r3, r3, #4
 8005660:	6713      	str	r3, [r2, #112]	; 0x70
 8005662:	e01c      	b.n	800569e <HAL_RCC_OscConfig+0x376>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	2b05      	cmp	r3, #5
 800566a:	d10c      	bne.n	8005686 <HAL_RCC_OscConfig+0x35e>
 800566c:	4b61      	ldr	r3, [pc, #388]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 800566e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005670:	4a60      	ldr	r2, [pc, #384]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 8005672:	f043 0304 	orr.w	r3, r3, #4
 8005676:	6713      	str	r3, [r2, #112]	; 0x70
 8005678:	4b5e      	ldr	r3, [pc, #376]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 800567a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800567c:	4a5d      	ldr	r2, [pc, #372]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 800567e:	f043 0301 	orr.w	r3, r3, #1
 8005682:	6713      	str	r3, [r2, #112]	; 0x70
 8005684:	e00b      	b.n	800569e <HAL_RCC_OscConfig+0x376>
 8005686:	4b5b      	ldr	r3, [pc, #364]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 8005688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800568a:	4a5a      	ldr	r2, [pc, #360]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 800568c:	f023 0301 	bic.w	r3, r3, #1
 8005690:	6713      	str	r3, [r2, #112]	; 0x70
 8005692:	4b58      	ldr	r3, [pc, #352]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 8005694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005696:	4a57      	ldr	r2, [pc, #348]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 8005698:	f023 0304 	bic.w	r3, r3, #4
 800569c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d015      	beq.n	80056d2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056a6:	f7fe fadf 	bl	8003c68 <HAL_GetTick>
 80056aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056ac:	e00a      	b.n	80056c4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056ae:	f7fe fadb 	bl	8003c68 <HAL_GetTick>
 80056b2:	4602      	mov	r2, r0
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80056bc:	4293      	cmp	r3, r2
 80056be:	d901      	bls.n	80056c4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80056c0:	2303      	movs	r3, #3
 80056c2:	e0ce      	b.n	8005862 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056c4:	4b4b      	ldr	r3, [pc, #300]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 80056c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056c8:	f003 0302 	and.w	r3, r3, #2
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d0ee      	beq.n	80056ae <HAL_RCC_OscConfig+0x386>
 80056d0:	e014      	b.n	80056fc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056d2:	f7fe fac9 	bl	8003c68 <HAL_GetTick>
 80056d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056d8:	e00a      	b.n	80056f0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056da:	f7fe fac5 	bl	8003c68 <HAL_GetTick>
 80056de:	4602      	mov	r2, r0
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d901      	bls.n	80056f0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80056ec:	2303      	movs	r3, #3
 80056ee:	e0b8      	b.n	8005862 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056f0:	4b40      	ldr	r3, [pc, #256]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 80056f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056f4:	f003 0302 	and.w	r3, r3, #2
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d1ee      	bne.n	80056da <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80056fc:	7dfb      	ldrb	r3, [r7, #23]
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d105      	bne.n	800570e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005702:	4b3c      	ldr	r3, [pc, #240]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 8005704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005706:	4a3b      	ldr	r2, [pc, #236]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 8005708:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800570c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	699b      	ldr	r3, [r3, #24]
 8005712:	2b00      	cmp	r3, #0
 8005714:	f000 80a4 	beq.w	8005860 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005718:	4b36      	ldr	r3, [pc, #216]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	f003 030c 	and.w	r3, r3, #12
 8005720:	2b08      	cmp	r3, #8
 8005722:	d06b      	beq.n	80057fc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	699b      	ldr	r3, [r3, #24]
 8005728:	2b02      	cmp	r3, #2
 800572a:	d149      	bne.n	80057c0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800572c:	4b31      	ldr	r3, [pc, #196]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a30      	ldr	r2, [pc, #192]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 8005732:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005736:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005738:	f7fe fa96 	bl	8003c68 <HAL_GetTick>
 800573c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800573e:	e008      	b.n	8005752 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005740:	f7fe fa92 	bl	8003c68 <HAL_GetTick>
 8005744:	4602      	mov	r2, r0
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	2b02      	cmp	r3, #2
 800574c:	d901      	bls.n	8005752 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800574e:	2303      	movs	r3, #3
 8005750:	e087      	b.n	8005862 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005752:	4b28      	ldr	r3, [pc, #160]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d1f0      	bne.n	8005740 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	69da      	ldr	r2, [r3, #28]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a1b      	ldr	r3, [r3, #32]
 8005766:	431a      	orrs	r2, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576c:	019b      	lsls	r3, r3, #6
 800576e:	431a      	orrs	r2, r3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005774:	085b      	lsrs	r3, r3, #1
 8005776:	3b01      	subs	r3, #1
 8005778:	041b      	lsls	r3, r3, #16
 800577a:	431a      	orrs	r2, r3
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005780:	061b      	lsls	r3, r3, #24
 8005782:	4313      	orrs	r3, r2
 8005784:	4a1b      	ldr	r2, [pc, #108]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 8005786:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800578a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800578c:	4b19      	ldr	r3, [pc, #100]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a18      	ldr	r2, [pc, #96]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 8005792:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005796:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005798:	f7fe fa66 	bl	8003c68 <HAL_GetTick>
 800579c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800579e:	e008      	b.n	80057b2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057a0:	f7fe fa62 	bl	8003c68 <HAL_GetTick>
 80057a4:	4602      	mov	r2, r0
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d901      	bls.n	80057b2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e057      	b.n	8005862 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057b2:	4b10      	ldr	r3, [pc, #64]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d0f0      	beq.n	80057a0 <HAL_RCC_OscConfig+0x478>
 80057be:	e04f      	b.n	8005860 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057c0:	4b0c      	ldr	r3, [pc, #48]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a0b      	ldr	r2, [pc, #44]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 80057c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057cc:	f7fe fa4c 	bl	8003c68 <HAL_GetTick>
 80057d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057d2:	e008      	b.n	80057e6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057d4:	f7fe fa48 	bl	8003c68 <HAL_GetTick>
 80057d8:	4602      	mov	r2, r0
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d901      	bls.n	80057e6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	e03d      	b.n	8005862 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057e6:	4b03      	ldr	r3, [pc, #12]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d1f0      	bne.n	80057d4 <HAL_RCC_OscConfig+0x4ac>
 80057f2:	e035      	b.n	8005860 <HAL_RCC_OscConfig+0x538>
 80057f4:	40023800 	.word	0x40023800
 80057f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80057fc:	4b1b      	ldr	r3, [pc, #108]	; (800586c <HAL_RCC_OscConfig+0x544>)
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	699b      	ldr	r3, [r3, #24]
 8005806:	2b01      	cmp	r3, #1
 8005808:	d028      	beq.n	800585c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005814:	429a      	cmp	r2, r3
 8005816:	d121      	bne.n	800585c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005822:	429a      	cmp	r2, r3
 8005824:	d11a      	bne.n	800585c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800582c:	4013      	ands	r3, r2
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005832:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005834:	4293      	cmp	r3, r2
 8005836:	d111      	bne.n	800585c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005842:	085b      	lsrs	r3, r3, #1
 8005844:	3b01      	subs	r3, #1
 8005846:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005848:	429a      	cmp	r2, r3
 800584a:	d107      	bne.n	800585c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005856:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005858:	429a      	cmp	r2, r3
 800585a:	d001      	beq.n	8005860 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	e000      	b.n	8005862 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3718      	adds	r7, #24
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	40023800 	.word	0x40023800

08005870 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800587a:	2300      	movs	r3, #0
 800587c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d101      	bne.n	8005888 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	e0d0      	b.n	8005a2a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005888:	4b6a      	ldr	r3, [pc, #424]	; (8005a34 <HAL_RCC_ClockConfig+0x1c4>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 030f 	and.w	r3, r3, #15
 8005890:	683a      	ldr	r2, [r7, #0]
 8005892:	429a      	cmp	r2, r3
 8005894:	d910      	bls.n	80058b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005896:	4b67      	ldr	r3, [pc, #412]	; (8005a34 <HAL_RCC_ClockConfig+0x1c4>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f023 020f 	bic.w	r2, r3, #15
 800589e:	4965      	ldr	r1, [pc, #404]	; (8005a34 <HAL_RCC_ClockConfig+0x1c4>)
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058a6:	4b63      	ldr	r3, [pc, #396]	; (8005a34 <HAL_RCC_ClockConfig+0x1c4>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 030f 	and.w	r3, r3, #15
 80058ae:	683a      	ldr	r2, [r7, #0]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d001      	beq.n	80058b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e0b8      	b.n	8005a2a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0302 	and.w	r3, r3, #2
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d020      	beq.n	8005906 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0304 	and.w	r3, r3, #4
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d005      	beq.n	80058dc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058d0:	4b59      	ldr	r3, [pc, #356]	; (8005a38 <HAL_RCC_ClockConfig+0x1c8>)
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	4a58      	ldr	r2, [pc, #352]	; (8005a38 <HAL_RCC_ClockConfig+0x1c8>)
 80058d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80058da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 0308 	and.w	r3, r3, #8
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d005      	beq.n	80058f4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058e8:	4b53      	ldr	r3, [pc, #332]	; (8005a38 <HAL_RCC_ClockConfig+0x1c8>)
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	4a52      	ldr	r2, [pc, #328]	; (8005a38 <HAL_RCC_ClockConfig+0x1c8>)
 80058ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80058f2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058f4:	4b50      	ldr	r3, [pc, #320]	; (8005a38 <HAL_RCC_ClockConfig+0x1c8>)
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	494d      	ldr	r1, [pc, #308]	; (8005a38 <HAL_RCC_ClockConfig+0x1c8>)
 8005902:	4313      	orrs	r3, r2
 8005904:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 0301 	and.w	r3, r3, #1
 800590e:	2b00      	cmp	r3, #0
 8005910:	d040      	beq.n	8005994 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	2b01      	cmp	r3, #1
 8005918:	d107      	bne.n	800592a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800591a:	4b47      	ldr	r3, [pc, #284]	; (8005a38 <HAL_RCC_ClockConfig+0x1c8>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005922:	2b00      	cmp	r3, #0
 8005924:	d115      	bne.n	8005952 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e07f      	b.n	8005a2a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	2b02      	cmp	r3, #2
 8005930:	d107      	bne.n	8005942 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005932:	4b41      	ldr	r3, [pc, #260]	; (8005a38 <HAL_RCC_ClockConfig+0x1c8>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800593a:	2b00      	cmp	r3, #0
 800593c:	d109      	bne.n	8005952 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e073      	b.n	8005a2a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005942:	4b3d      	ldr	r3, [pc, #244]	; (8005a38 <HAL_RCC_ClockConfig+0x1c8>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0302 	and.w	r3, r3, #2
 800594a:	2b00      	cmp	r3, #0
 800594c:	d101      	bne.n	8005952 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e06b      	b.n	8005a2a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005952:	4b39      	ldr	r3, [pc, #228]	; (8005a38 <HAL_RCC_ClockConfig+0x1c8>)
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	f023 0203 	bic.w	r2, r3, #3
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	4936      	ldr	r1, [pc, #216]	; (8005a38 <HAL_RCC_ClockConfig+0x1c8>)
 8005960:	4313      	orrs	r3, r2
 8005962:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005964:	f7fe f980 	bl	8003c68 <HAL_GetTick>
 8005968:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800596a:	e00a      	b.n	8005982 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800596c:	f7fe f97c 	bl	8003c68 <HAL_GetTick>
 8005970:	4602      	mov	r2, r0
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	1ad3      	subs	r3, r2, r3
 8005976:	f241 3288 	movw	r2, #5000	; 0x1388
 800597a:	4293      	cmp	r3, r2
 800597c:	d901      	bls.n	8005982 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800597e:	2303      	movs	r3, #3
 8005980:	e053      	b.n	8005a2a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005982:	4b2d      	ldr	r3, [pc, #180]	; (8005a38 <HAL_RCC_ClockConfig+0x1c8>)
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	f003 020c 	and.w	r2, r3, #12
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	429a      	cmp	r2, r3
 8005992:	d1eb      	bne.n	800596c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005994:	4b27      	ldr	r3, [pc, #156]	; (8005a34 <HAL_RCC_ClockConfig+0x1c4>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 030f 	and.w	r3, r3, #15
 800599c:	683a      	ldr	r2, [r7, #0]
 800599e:	429a      	cmp	r2, r3
 80059a0:	d210      	bcs.n	80059c4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059a2:	4b24      	ldr	r3, [pc, #144]	; (8005a34 <HAL_RCC_ClockConfig+0x1c4>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f023 020f 	bic.w	r2, r3, #15
 80059aa:	4922      	ldr	r1, [pc, #136]	; (8005a34 <HAL_RCC_ClockConfig+0x1c4>)
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059b2:	4b20      	ldr	r3, [pc, #128]	; (8005a34 <HAL_RCC_ClockConfig+0x1c4>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 030f 	and.w	r3, r3, #15
 80059ba:	683a      	ldr	r2, [r7, #0]
 80059bc:	429a      	cmp	r2, r3
 80059be:	d001      	beq.n	80059c4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	e032      	b.n	8005a2a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 0304 	and.w	r3, r3, #4
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d008      	beq.n	80059e2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059d0:	4b19      	ldr	r3, [pc, #100]	; (8005a38 <HAL_RCC_ClockConfig+0x1c8>)
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	4916      	ldr	r1, [pc, #88]	; (8005a38 <HAL_RCC_ClockConfig+0x1c8>)
 80059de:	4313      	orrs	r3, r2
 80059e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0308 	and.w	r3, r3, #8
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d009      	beq.n	8005a02 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80059ee:	4b12      	ldr	r3, [pc, #72]	; (8005a38 <HAL_RCC_ClockConfig+0x1c8>)
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	00db      	lsls	r3, r3, #3
 80059fc:	490e      	ldr	r1, [pc, #56]	; (8005a38 <HAL_RCC_ClockConfig+0x1c8>)
 80059fe:	4313      	orrs	r3, r2
 8005a00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005a02:	f000 f821 	bl	8005a48 <HAL_RCC_GetSysClockFreq>
 8005a06:	4602      	mov	r2, r0
 8005a08:	4b0b      	ldr	r3, [pc, #44]	; (8005a38 <HAL_RCC_ClockConfig+0x1c8>)
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	091b      	lsrs	r3, r3, #4
 8005a0e:	f003 030f 	and.w	r3, r3, #15
 8005a12:	490a      	ldr	r1, [pc, #40]	; (8005a3c <HAL_RCC_ClockConfig+0x1cc>)
 8005a14:	5ccb      	ldrb	r3, [r1, r3]
 8005a16:	fa22 f303 	lsr.w	r3, r2, r3
 8005a1a:	4a09      	ldr	r2, [pc, #36]	; (8005a40 <HAL_RCC_ClockConfig+0x1d0>)
 8005a1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005a1e:	4b09      	ldr	r3, [pc, #36]	; (8005a44 <HAL_RCC_ClockConfig+0x1d4>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4618      	mov	r0, r3
 8005a24:	f7fe f8dc 	bl	8003be0 <HAL_InitTick>

  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3710      	adds	r7, #16
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}
 8005a32:	bf00      	nop
 8005a34:	40023c00 	.word	0x40023c00
 8005a38:	40023800 	.word	0x40023800
 8005a3c:	0800ee84 	.word	0x0800ee84
 8005a40:	20000004 	.word	0x20000004
 8005a44:	20000008 	.word	0x20000008

08005a48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a48:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005a4c:	b084      	sub	sp, #16
 8005a4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005a50:	2300      	movs	r3, #0
 8005a52:	607b      	str	r3, [r7, #4]
 8005a54:	2300      	movs	r3, #0
 8005a56:	60fb      	str	r3, [r7, #12]
 8005a58:	2300      	movs	r3, #0
 8005a5a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a60:	4b67      	ldr	r3, [pc, #412]	; (8005c00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	f003 030c 	and.w	r3, r3, #12
 8005a68:	2b08      	cmp	r3, #8
 8005a6a:	d00d      	beq.n	8005a88 <HAL_RCC_GetSysClockFreq+0x40>
 8005a6c:	2b08      	cmp	r3, #8
 8005a6e:	f200 80bd 	bhi.w	8005bec <HAL_RCC_GetSysClockFreq+0x1a4>
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d002      	beq.n	8005a7c <HAL_RCC_GetSysClockFreq+0x34>
 8005a76:	2b04      	cmp	r3, #4
 8005a78:	d003      	beq.n	8005a82 <HAL_RCC_GetSysClockFreq+0x3a>
 8005a7a:	e0b7      	b.n	8005bec <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a7c:	4b61      	ldr	r3, [pc, #388]	; (8005c04 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005a7e:	60bb      	str	r3, [r7, #8]
      break;
 8005a80:	e0b7      	b.n	8005bf2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a82:	4b60      	ldr	r3, [pc, #384]	; (8005c04 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005a84:	60bb      	str	r3, [r7, #8]
      break;
 8005a86:	e0b4      	b.n	8005bf2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a88:	4b5d      	ldr	r3, [pc, #372]	; (8005c00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a90:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005a92:	4b5b      	ldr	r3, [pc, #364]	; (8005c00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d04d      	beq.n	8005b3a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a9e:	4b58      	ldr	r3, [pc, #352]	; (8005c00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	099b      	lsrs	r3, r3, #6
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	f04f 0300 	mov.w	r3, #0
 8005aaa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005aae:	f04f 0100 	mov.w	r1, #0
 8005ab2:	ea02 0800 	and.w	r8, r2, r0
 8005ab6:	ea03 0901 	and.w	r9, r3, r1
 8005aba:	4640      	mov	r0, r8
 8005abc:	4649      	mov	r1, r9
 8005abe:	f04f 0200 	mov.w	r2, #0
 8005ac2:	f04f 0300 	mov.w	r3, #0
 8005ac6:	014b      	lsls	r3, r1, #5
 8005ac8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005acc:	0142      	lsls	r2, r0, #5
 8005ace:	4610      	mov	r0, r2
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	ebb0 0008 	subs.w	r0, r0, r8
 8005ad6:	eb61 0109 	sbc.w	r1, r1, r9
 8005ada:	f04f 0200 	mov.w	r2, #0
 8005ade:	f04f 0300 	mov.w	r3, #0
 8005ae2:	018b      	lsls	r3, r1, #6
 8005ae4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005ae8:	0182      	lsls	r2, r0, #6
 8005aea:	1a12      	subs	r2, r2, r0
 8005aec:	eb63 0301 	sbc.w	r3, r3, r1
 8005af0:	f04f 0000 	mov.w	r0, #0
 8005af4:	f04f 0100 	mov.w	r1, #0
 8005af8:	00d9      	lsls	r1, r3, #3
 8005afa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005afe:	00d0      	lsls	r0, r2, #3
 8005b00:	4602      	mov	r2, r0
 8005b02:	460b      	mov	r3, r1
 8005b04:	eb12 0208 	adds.w	r2, r2, r8
 8005b08:	eb43 0309 	adc.w	r3, r3, r9
 8005b0c:	f04f 0000 	mov.w	r0, #0
 8005b10:	f04f 0100 	mov.w	r1, #0
 8005b14:	0299      	lsls	r1, r3, #10
 8005b16:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005b1a:	0290      	lsls	r0, r2, #10
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	460b      	mov	r3, r1
 8005b20:	4610      	mov	r0, r2
 8005b22:	4619      	mov	r1, r3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	461a      	mov	r2, r3
 8005b28:	f04f 0300 	mov.w	r3, #0
 8005b2c:	f7fb f8b4 	bl	8000c98 <__aeabi_uldivmod>
 8005b30:	4602      	mov	r2, r0
 8005b32:	460b      	mov	r3, r1
 8005b34:	4613      	mov	r3, r2
 8005b36:	60fb      	str	r3, [r7, #12]
 8005b38:	e04a      	b.n	8005bd0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b3a:	4b31      	ldr	r3, [pc, #196]	; (8005c00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	099b      	lsrs	r3, r3, #6
 8005b40:	461a      	mov	r2, r3
 8005b42:	f04f 0300 	mov.w	r3, #0
 8005b46:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005b4a:	f04f 0100 	mov.w	r1, #0
 8005b4e:	ea02 0400 	and.w	r4, r2, r0
 8005b52:	ea03 0501 	and.w	r5, r3, r1
 8005b56:	4620      	mov	r0, r4
 8005b58:	4629      	mov	r1, r5
 8005b5a:	f04f 0200 	mov.w	r2, #0
 8005b5e:	f04f 0300 	mov.w	r3, #0
 8005b62:	014b      	lsls	r3, r1, #5
 8005b64:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005b68:	0142      	lsls	r2, r0, #5
 8005b6a:	4610      	mov	r0, r2
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	1b00      	subs	r0, r0, r4
 8005b70:	eb61 0105 	sbc.w	r1, r1, r5
 8005b74:	f04f 0200 	mov.w	r2, #0
 8005b78:	f04f 0300 	mov.w	r3, #0
 8005b7c:	018b      	lsls	r3, r1, #6
 8005b7e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005b82:	0182      	lsls	r2, r0, #6
 8005b84:	1a12      	subs	r2, r2, r0
 8005b86:	eb63 0301 	sbc.w	r3, r3, r1
 8005b8a:	f04f 0000 	mov.w	r0, #0
 8005b8e:	f04f 0100 	mov.w	r1, #0
 8005b92:	00d9      	lsls	r1, r3, #3
 8005b94:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005b98:	00d0      	lsls	r0, r2, #3
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	460b      	mov	r3, r1
 8005b9e:	1912      	adds	r2, r2, r4
 8005ba0:	eb45 0303 	adc.w	r3, r5, r3
 8005ba4:	f04f 0000 	mov.w	r0, #0
 8005ba8:	f04f 0100 	mov.w	r1, #0
 8005bac:	0299      	lsls	r1, r3, #10
 8005bae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005bb2:	0290      	lsls	r0, r2, #10
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	460b      	mov	r3, r1
 8005bb8:	4610      	mov	r0, r2
 8005bba:	4619      	mov	r1, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	f04f 0300 	mov.w	r3, #0
 8005bc4:	f7fb f868 	bl	8000c98 <__aeabi_uldivmod>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	460b      	mov	r3, r1
 8005bcc:	4613      	mov	r3, r2
 8005bce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005bd0:	4b0b      	ldr	r3, [pc, #44]	; (8005c00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	0c1b      	lsrs	r3, r3, #16
 8005bd6:	f003 0303 	and.w	r3, r3, #3
 8005bda:	3301      	adds	r3, #1
 8005bdc:	005b      	lsls	r3, r3, #1
 8005bde:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005be8:	60bb      	str	r3, [r7, #8]
      break;
 8005bea:	e002      	b.n	8005bf2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005bec:	4b05      	ldr	r3, [pc, #20]	; (8005c04 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005bee:	60bb      	str	r3, [r7, #8]
      break;
 8005bf0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005bf2:	68bb      	ldr	r3, [r7, #8]
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3710      	adds	r7, #16
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005bfe:	bf00      	nop
 8005c00:	40023800 	.word	0x40023800
 8005c04:	00f42400 	.word	0x00f42400

08005c08 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c0c:	4b03      	ldr	r3, [pc, #12]	; (8005c1c <HAL_RCC_GetHCLKFreq+0x14>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr
 8005c1a:	bf00      	nop
 8005c1c:	20000004 	.word	0x20000004

08005c20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005c24:	f7ff fff0 	bl	8005c08 <HAL_RCC_GetHCLKFreq>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	4b05      	ldr	r3, [pc, #20]	; (8005c40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	0a9b      	lsrs	r3, r3, #10
 8005c30:	f003 0307 	and.w	r3, r3, #7
 8005c34:	4903      	ldr	r1, [pc, #12]	; (8005c44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c36:	5ccb      	ldrb	r3, [r1, r3]
 8005c38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	40023800 	.word	0x40023800
 8005c44:	0800ee94 	.word	0x0800ee94

08005c48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005c4c:	f7ff ffdc 	bl	8005c08 <HAL_RCC_GetHCLKFreq>
 8005c50:	4602      	mov	r2, r0
 8005c52:	4b05      	ldr	r3, [pc, #20]	; (8005c68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	0b5b      	lsrs	r3, r3, #13
 8005c58:	f003 0307 	and.w	r3, r3, #7
 8005c5c:	4903      	ldr	r1, [pc, #12]	; (8005c6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c5e:	5ccb      	ldrb	r3, [r1, r3]
 8005c60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	40023800 	.word	0x40023800
 8005c6c:	0800ee94 	.word	0x0800ee94

08005c70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b088      	sub	sp, #32
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8005c80:	2300      	movs	r3, #0
 8005c82:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005c84:	2300      	movs	r3, #0
 8005c86:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 0301 	and.w	r3, r3, #1
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d012      	beq.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005c94:	4b65      	ldr	r3, [pc, #404]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	4a64      	ldr	r2, [pc, #400]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005c9a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005c9e:	6093      	str	r3, [r2, #8]
 8005ca0:	4b62      	ldr	r3, [pc, #392]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005ca2:	689a      	ldr	r2, [r3, #8]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca8:	4960      	ldr	r1, [pc, #384]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005caa:	4313      	orrs	r3, r2
 8005cac:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d101      	bne.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d017      	beq.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005cc6:	4b59      	ldr	r3, [pc, #356]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005cc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ccc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cd4:	4955      	ldr	r1, [pc, #340]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ce0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ce4:	d101      	bne.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d101      	bne.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d017      	beq.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005d02:	4b4a      	ldr	r3, [pc, #296]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d08:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d10:	4946      	ldr	r1, [pc, #280]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d12:	4313      	orrs	r3, r2
 8005d14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d20:	d101      	bne.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8005d22:	2301      	movs	r3, #1
 8005d24:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d101      	bne.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f003 0320 	and.w	r3, r3, #32
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	f000 808b 	beq.w	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d40:	4b3a      	ldr	r3, [pc, #232]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d44:	4a39      	ldr	r2, [pc, #228]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d4a:	6413      	str	r3, [r2, #64]	; 0x40
 8005d4c:	4b37      	ldr	r3, [pc, #220]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d54:	60fb      	str	r3, [r7, #12]
 8005d56:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005d58:	4b35      	ldr	r3, [pc, #212]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a34      	ldr	r2, [pc, #208]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005d5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d64:	f7fd ff80 	bl	8003c68 <HAL_GetTick>
 8005d68:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005d6a:	e008      	b.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d6c:	f7fd ff7c 	bl	8003c68 <HAL_GetTick>
 8005d70:	4602      	mov	r2, r0
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	1ad3      	subs	r3, r2, r3
 8005d76:	2b64      	cmp	r3, #100	; 0x64
 8005d78:	d901      	bls.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d7a:	2303      	movs	r3, #3
 8005d7c:	e2bc      	b.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005d7e:	4b2c      	ldr	r3, [pc, #176]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d0f0      	beq.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005d8a:	4b28      	ldr	r3, [pc, #160]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d92:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d035      	beq.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005da2:	693a      	ldr	r2, [r7, #16]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d02e      	beq.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005da8:	4b20      	ldr	r3, [pc, #128]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005db0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005db2:	4b1e      	ldr	r3, [pc, #120]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005db6:	4a1d      	ldr	r2, [pc, #116]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005db8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dbc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005dbe:	4b1b      	ldr	r3, [pc, #108]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dc2:	4a1a      	ldr	r2, [pc, #104]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005dc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dc8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005dca:	4a18      	ldr	r2, [pc, #96]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005dd0:	4b16      	ldr	r3, [pc, #88]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dd4:	f003 0301 	and.w	r3, r3, #1
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d114      	bne.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ddc:	f7fd ff44 	bl	8003c68 <HAL_GetTick>
 8005de0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005de2:	e00a      	b.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005de4:	f7fd ff40 	bl	8003c68 <HAL_GetTick>
 8005de8:	4602      	mov	r2, r0
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d901      	bls.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8005df6:	2303      	movs	r3, #3
 8005df8:	e27e      	b.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dfa:	4b0c      	ldr	r3, [pc, #48]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dfe:	f003 0302 	and.w	r3, r3, #2
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d0ee      	beq.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e12:	d111      	bne.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8005e14:	4b05      	ldr	r3, [pc, #20]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8005e20:	4b04      	ldr	r3, [pc, #16]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005e22:	400b      	ands	r3, r1
 8005e24:	4901      	ldr	r1, [pc, #4]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e26:	4313      	orrs	r3, r2
 8005e28:	608b      	str	r3, [r1, #8]
 8005e2a:	e00b      	b.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8005e2c:	40023800 	.word	0x40023800
 8005e30:	40007000 	.word	0x40007000
 8005e34:	0ffffcff 	.word	0x0ffffcff
 8005e38:	4ba4      	ldr	r3, [pc, #656]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	4aa3      	ldr	r2, [pc, #652]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005e3e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005e42:	6093      	str	r3, [r2, #8]
 8005e44:	4ba1      	ldr	r3, [pc, #644]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005e46:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e50:	499e      	ldr	r1, [pc, #632]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005e52:	4313      	orrs	r3, r2
 8005e54:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 0310 	and.w	r3, r3, #16
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d010      	beq.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005e62:	4b9a      	ldr	r3, [pc, #616]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005e64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e68:	4a98      	ldr	r2, [pc, #608]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005e6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e6e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005e72:	4b96      	ldr	r3, [pc, #600]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005e74:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e7c:	4993      	ldr	r1, [pc, #588]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d00a      	beq.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e90:	4b8e      	ldr	r3, [pc, #568]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e96:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e9e:	498b      	ldr	r1, [pc, #556]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d00a      	beq.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005eb2:	4b86      	ldr	r3, [pc, #536]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eb8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ec0:	4982      	ldr	r1, [pc, #520]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d00a      	beq.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005ed4:	4b7d      	ldr	r3, [pc, #500]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eda:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ee2:	497a      	ldr	r1, [pc, #488]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d00a      	beq.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ef6:	4b75      	ldr	r3, [pc, #468]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005efc:	f023 0203 	bic.w	r2, r3, #3
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f04:	4971      	ldr	r1, [pc, #452]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005f06:	4313      	orrs	r3, r2
 8005f08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d00a      	beq.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005f18:	4b6c      	ldr	r3, [pc, #432]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f1e:	f023 020c 	bic.w	r2, r3, #12
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f26:	4969      	ldr	r1, [pc, #420]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d00a      	beq.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005f3a:	4b64      	ldr	r3, [pc, #400]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f40:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f48:	4960      	ldr	r1, [pc, #384]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d00a      	beq.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005f5c:	4b5b      	ldr	r3, [pc, #364]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f62:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f6a:	4958      	ldr	r1, [pc, #352]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d00a      	beq.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005f7e:	4b53      	ldr	r3, [pc, #332]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f8c:	494f      	ldr	r1, [pc, #316]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d00a      	beq.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005fa0:	4b4a      	ldr	r3, [pc, #296]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fa6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fae:	4947      	ldr	r1, [pc, #284]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d00a      	beq.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005fc2:	4b42      	ldr	r3, [pc, #264]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fc8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fd0:	493e      	ldr	r1, [pc, #248]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d00a      	beq.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005fe4:	4b39      	ldr	r3, [pc, #228]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ff2:	4936      	ldr	r1, [pc, #216]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006002:	2b00      	cmp	r3, #0
 8006004:	d011      	beq.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006006:	4b31      	ldr	r3, [pc, #196]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800600c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006014:	492d      	ldr	r1, [pc, #180]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006016:	4313      	orrs	r3, r2
 8006018:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006020:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006024:	d101      	bne.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8006026:	2301      	movs	r3, #1
 8006028:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00a      	beq.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006036:	4b25      	ldr	r3, [pc, #148]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800603c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006044:	4921      	ldr	r1, [pc, #132]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006046:	4313      	orrs	r3, r2
 8006048:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006054:	2b00      	cmp	r3, #0
 8006056:	d00a      	beq.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006058:	4b1c      	ldr	r3, [pc, #112]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800605a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800605e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006066:	4919      	ldr	r1, [pc, #100]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006068:	4313      	orrs	r3, r2
 800606a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00a      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800607a:	4b14      	ldr	r3, [pc, #80]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800607c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006080:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006088:	4910      	ldr	r1, [pc, #64]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800608a:	4313      	orrs	r3, r2
 800608c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	2b01      	cmp	r3, #1
 8006094:	d006      	beq.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800609e:	2b00      	cmp	r3, #0
 80060a0:	f000 809d 	beq.w	80061de <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80060a4:	4b09      	ldr	r3, [pc, #36]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a08      	ldr	r2, [pc, #32]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80060aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80060ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060b0:	f7fd fdda 	bl	8003c68 <HAL_GetTick>
 80060b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80060b6:	e00b      	b.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80060b8:	f7fd fdd6 	bl	8003c68 <HAL_GetTick>
 80060bc:	4602      	mov	r2, r0
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	2b64      	cmp	r3, #100	; 0x64
 80060c4:	d904      	bls.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e116      	b.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x688>
 80060ca:	bf00      	nop
 80060cc:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80060d0:	4b8b      	ldr	r3, [pc, #556]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d1ed      	bne.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 0301 	and.w	r3, r3, #1
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d017      	beq.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d113      	bne.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80060f0:	4b83      	ldr	r3, [pc, #524]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80060f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060f6:	0e1b      	lsrs	r3, r3, #24
 80060f8:	f003 030f 	and.w	r3, r3, #15
 80060fc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	019a      	lsls	r2, r3, #6
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	061b      	lsls	r3, r3, #24
 8006108:	431a      	orrs	r2, r3
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	071b      	lsls	r3, r3, #28
 8006110:	497b      	ldr	r1, [pc, #492]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006112:	4313      	orrs	r3, r2
 8006114:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006120:	2b00      	cmp	r3, #0
 8006122:	d004      	beq.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006128:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800612c:	d00a      	beq.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006136:	2b00      	cmp	r3, #0
 8006138:	d024      	beq.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800613e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006142:	d11f      	bne.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006144:	4b6e      	ldr	r3, [pc, #440]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006146:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800614a:	0f1b      	lsrs	r3, r3, #28
 800614c:	f003 0307 	and.w	r3, r3, #7
 8006150:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	019a      	lsls	r2, r3, #6
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	061b      	lsls	r3, r3, #24
 800615e:	431a      	orrs	r2, r3
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	071b      	lsls	r3, r3, #28
 8006164:	4966      	ldr	r1, [pc, #408]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006166:	4313      	orrs	r3, r2
 8006168:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800616c:	4b64      	ldr	r3, [pc, #400]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800616e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006172:	f023 021f 	bic.w	r2, r3, #31
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	69db      	ldr	r3, [r3, #28]
 800617a:	3b01      	subs	r3, #1
 800617c:	4960      	ldr	r1, [pc, #384]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800617e:	4313      	orrs	r3, r2
 8006180:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800618c:	2b00      	cmp	r3, #0
 800618e:	d00d      	beq.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	019a      	lsls	r2, r3, #6
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	061b      	lsls	r3, r3, #24
 800619c:	431a      	orrs	r2, r3
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	071b      	lsls	r3, r3, #28
 80061a4:	4956      	ldr	r1, [pc, #344]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80061a6:	4313      	orrs	r3, r2
 80061a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80061ac:	4b54      	ldr	r3, [pc, #336]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a53      	ldr	r2, [pc, #332]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80061b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80061b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061b8:	f7fd fd56 	bl	8003c68 <HAL_GetTick>
 80061bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80061be:	e008      	b.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80061c0:	f7fd fd52 	bl	8003c68 <HAL_GetTick>
 80061c4:	4602      	mov	r2, r0
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	1ad3      	subs	r3, r2, r3
 80061ca:	2b64      	cmp	r3, #100	; 0x64
 80061cc:	d901      	bls.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80061ce:	2303      	movs	r3, #3
 80061d0:	e092      	b.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80061d2:	4b4b      	ldr	r3, [pc, #300]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d0f0      	beq.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	f040 8088 	bne.w	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80061e6:	4b46      	ldr	r3, [pc, #280]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a45      	ldr	r2, [pc, #276]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80061ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061f2:	f7fd fd39 	bl	8003c68 <HAL_GetTick>
 80061f6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80061f8:	e008      	b.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80061fa:	f7fd fd35 	bl	8003c68 <HAL_GetTick>
 80061fe:	4602      	mov	r2, r0
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	1ad3      	subs	r3, r2, r3
 8006204:	2b64      	cmp	r3, #100	; 0x64
 8006206:	d901      	bls.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006208:	2303      	movs	r3, #3
 800620a:	e075      	b.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800620c:	4b3c      	ldr	r3, [pc, #240]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006214:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006218:	d0ef      	beq.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006222:	2b00      	cmp	r3, #0
 8006224:	d003      	beq.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800622a:	2b00      	cmp	r3, #0
 800622c:	d009      	beq.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006236:	2b00      	cmp	r3, #0
 8006238:	d024      	beq.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800623e:	2b00      	cmp	r3, #0
 8006240:	d120      	bne.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006242:	4b2f      	ldr	r3, [pc, #188]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006248:	0c1b      	lsrs	r3, r3, #16
 800624a:	f003 0303 	and.w	r3, r3, #3
 800624e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	691b      	ldr	r3, [r3, #16]
 8006254:	019a      	lsls	r2, r3, #6
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	041b      	lsls	r3, r3, #16
 800625a:	431a      	orrs	r2, r3
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	695b      	ldr	r3, [r3, #20]
 8006260:	061b      	lsls	r3, r3, #24
 8006262:	4927      	ldr	r1, [pc, #156]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006264:	4313      	orrs	r3, r2
 8006266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800626a:	4b25      	ldr	r3, [pc, #148]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800626c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006270:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6a1b      	ldr	r3, [r3, #32]
 8006278:	3b01      	subs	r3, #1
 800627a:	021b      	lsls	r3, r3, #8
 800627c:	4920      	ldr	r1, [pc, #128]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800627e:	4313      	orrs	r3, r2
 8006280:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800628c:	2b00      	cmp	r3, #0
 800628e:	d018      	beq.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x652>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006294:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006298:	d113      	bne.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800629a:	4b19      	ldr	r3, [pc, #100]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800629c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062a0:	0e1b      	lsrs	r3, r3, #24
 80062a2:	f003 030f 	and.w	r3, r3, #15
 80062a6:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	691b      	ldr	r3, [r3, #16]
 80062ac:	019a      	lsls	r2, r3, #6
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	699b      	ldr	r3, [r3, #24]
 80062b2:	041b      	lsls	r3, r3, #16
 80062b4:	431a      	orrs	r2, r3
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	061b      	lsls	r3, r3, #24
 80062ba:	4911      	ldr	r1, [pc, #68]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80062bc:	4313      	orrs	r3, r2
 80062be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80062c2:	4b0f      	ldr	r3, [pc, #60]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a0e      	ldr	r2, [pc, #56]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80062c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062ce:	f7fd fccb 	bl	8003c68 <HAL_GetTick>
 80062d2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80062d4:	e008      	b.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80062d6:	f7fd fcc7 	bl	8003c68 <HAL_GetTick>
 80062da:	4602      	mov	r2, r0
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	1ad3      	subs	r3, r2, r3
 80062e0:	2b64      	cmp	r3, #100	; 0x64
 80062e2:	d901      	bls.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80062e4:	2303      	movs	r3, #3
 80062e6:	e007      	b.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80062e8:	4b05      	ldr	r3, [pc, #20]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062f4:	d1ef      	bne.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 80062f6:	2300      	movs	r3, #0
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3720      	adds	r7, #32
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	40023800 	.word	0x40023800

08006304 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b082      	sub	sp, #8
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d101      	bne.n	8006316 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	e081      	b.n	800641a <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	7f5b      	ldrb	r3, [r3, #29]
 800631a:	b2db      	uxtb	r3, r3
 800631c:	2b00      	cmp	r3, #0
 800631e:	d105      	bne.n	800632c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f7fc fd68 	bl	8002dfc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2202      	movs	r2, #2
 8006330:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	22ca      	movs	r2, #202	; 0xca
 8006338:	625a      	str	r2, [r3, #36]	; 0x24
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	2253      	movs	r2, #83	; 0x53
 8006340:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 f898 	bl	8006478 <RTC_EnterInitMode>
 8006348:	4603      	mov	r3, r0
 800634a:	2b00      	cmp	r3, #0
 800634c:	d008      	beq.n	8006360 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	22ff      	movs	r2, #255	; 0xff
 8006354:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2204      	movs	r2, #4
 800635a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	e05c      	b.n	800641a <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	6899      	ldr	r1, [r3, #8]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	4b2e      	ldr	r3, [pc, #184]	; (8006424 <HAL_RTC_Init+0x120>)
 800636c:	400b      	ands	r3, r1
 800636e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	6899      	ldr	r1, [r3, #8]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	685a      	ldr	r2, [r3, #4]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	431a      	orrs	r2, r3
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	695b      	ldr	r3, [r3, #20]
 8006384:	431a      	orrs	r2, r3
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	430a      	orrs	r2, r1
 800638c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	68d2      	ldr	r2, [r2, #12]
 8006396:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	6919      	ldr	r1, [r3, #16]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	041a      	lsls	r2, r3, #16
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	430a      	orrs	r2, r1
 80063aa:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68da      	ldr	r2, [r3, #12]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063ba:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	f003 0320 	and.w	r3, r3, #32
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d10e      	bne.n	80063e8 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 f82c 	bl	8006428 <HAL_RTC_WaitForSynchro>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d008      	beq.n	80063e8 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	22ff      	movs	r2, #255	; 0xff
 80063dc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2204      	movs	r2, #4
 80063e2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	e018      	b.n	800641a <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f022 0208 	bic.w	r2, r2, #8
 80063f6:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	699a      	ldr	r2, [r3, #24]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	430a      	orrs	r2, r1
 8006408:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	22ff      	movs	r2, #255	; 0xff
 8006410:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2201      	movs	r2, #1
 8006416:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8006418:	2300      	movs	r3, #0
  }
}
 800641a:	4618      	mov	r0, r3
 800641c:	3708      	adds	r7, #8
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
 8006422:	bf00      	nop
 8006424:	ff8fffbf 	.word	0xff8fffbf

08006428 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006430:	2300      	movs	r3, #0
 8006432:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	68da      	ldr	r2, [r3, #12]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006442:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006444:	f7fd fc10 	bl	8003c68 <HAL_GetTick>
 8006448:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800644a:	e009      	b.n	8006460 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800644c:	f7fd fc0c 	bl	8003c68 <HAL_GetTick>
 8006450:	4602      	mov	r2, r0
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	1ad3      	subs	r3, r2, r3
 8006456:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800645a:	d901      	bls.n	8006460 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800645c:	2303      	movs	r3, #3
 800645e:	e007      	b.n	8006470 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	f003 0320 	and.w	r3, r3, #32
 800646a:	2b00      	cmp	r3, #0
 800646c:	d0ee      	beq.n	800644c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800646e:	2300      	movs	r3, #0
}
 8006470:	4618      	mov	r0, r3
 8006472:	3710      	adds	r7, #16
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006480:	2300      	movs	r3, #0
 8006482:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800648e:	2b00      	cmp	r3, #0
 8006490:	d119      	bne.n	80064c6 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f04f 32ff 	mov.w	r2, #4294967295
 800649a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800649c:	f7fd fbe4 	bl	8003c68 <HAL_GetTick>
 80064a0:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80064a2:	e009      	b.n	80064b8 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80064a4:	f7fd fbe0 	bl	8003c68 <HAL_GetTick>
 80064a8:	4602      	mov	r2, r0
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	1ad3      	subs	r3, r2, r3
 80064ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064b2:	d901      	bls.n	80064b8 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80064b4:	2303      	movs	r3, #3
 80064b6:	e007      	b.n	80064c8 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d0ee      	beq.n	80064a4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80064c6:	2300      	movs	r3, #0
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3710      	adds	r7, #16
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b082      	sub	sp, #8
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d101      	bne.n	80064e2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	e022      	b.n	8006528 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d105      	bne.n	80064fa <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f7fc fc9b 	bl	8002e30 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2203      	movs	r2, #3
 80064fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 f814 	bl	8006530 <HAL_SD_InitCard>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d001      	beq.n	8006512 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	e00a      	b.n	8006528 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2200      	movs	r2, #0
 800651c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2201      	movs	r2, #1
 8006522:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006526:	2300      	movs	r3, #0
}
 8006528:	4618      	mov	r0, r3
 800652a:	3708      	adds	r7, #8
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}

08006530 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006530:	b5b0      	push	{r4, r5, r7, lr}
 8006532:	b08e      	sub	sp, #56	; 0x38
 8006534:	af04      	add	r7, sp, #16
 8006536:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006538:	2300      	movs	r3, #0
 800653a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800653c:	2300      	movs	r3, #0
 800653e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006540:	2300      	movs	r3, #0
 8006542:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8006544:	2300      	movs	r3, #0
 8006546:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006548:	2300      	movs	r3, #0
 800654a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800654c:	2376      	movs	r3, #118	; 0x76
 800654e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681d      	ldr	r5, [r3, #0]
 8006554:	466c      	mov	r4, sp
 8006556:	f107 0314 	add.w	r3, r7, #20
 800655a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800655e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006562:	f107 0308 	add.w	r3, r7, #8
 8006566:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006568:	4628      	mov	r0, r5
 800656a:	f004 fd1d 	bl	800afa8 <SDMMC_Init>
 800656e:	4603      	mov	r3, r0
 8006570:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8006574:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006578:	2b00      	cmp	r3, #0
 800657a:	d001      	beq.n	8006580 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	e056      	b.n	800662e <HAL_SD_InitCard+0xfe>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	685a      	ldr	r2, [r3, #4]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800658e:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4618      	mov	r0, r3
 8006596:	f004 fd51 	bl	800b03c <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	685a      	ldr	r2, [r3, #4]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065a8:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 fff2 	bl	8007594 <SD_PowerON>
 80065b0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80065b2:	6a3b      	ldr	r3, [r7, #32]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d00b      	beq.n	80065d0 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065c4:	6a3b      	ldr	r3, [r7, #32]
 80065c6:	431a      	orrs	r2, r3
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	e02e      	b.n	800662e <HAL_SD_InitCard+0xfe>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f000 ff13 	bl	80073fc <SD_InitCard>
 80065d6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80065d8:	6a3b      	ldr	r3, [r7, #32]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d00b      	beq.n	80065f6 <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2201      	movs	r2, #1
 80065e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065ea:	6a3b      	ldr	r3, [r7, #32]
 80065ec:	431a      	orrs	r2, r3
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e01b      	b.n	800662e <HAL_SD_InitCard+0xfe>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80065fe:	4618      	mov	r0, r3
 8006600:	f004 fdb0 	bl	800b164 <SDMMC_CmdBlockLength>
 8006604:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006606:	6a3b      	ldr	r3, [r7, #32]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d00f      	beq.n	800662c <HAL_SD_InitCard+0xfc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a09      	ldr	r2, [pc, #36]	; (8006638 <HAL_SD_InitCard+0x108>)
 8006612:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006618:	6a3b      	ldr	r3, [r7, #32]
 800661a:	431a      	orrs	r2, r3
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	e000      	b.n	800662e <HAL_SD_InitCard+0xfe>
  }

  return HAL_OK;
 800662c:	2300      	movs	r3, #0
}
 800662e:	4618      	mov	r0, r3
 8006630:	3728      	adds	r7, #40	; 0x28
 8006632:	46bd      	mov	sp, r7
 8006634:	bdb0      	pop	{r4, r5, r7, pc}
 8006636:	bf00      	nop
 8006638:	004005ff 	.word	0x004005ff

0800663c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b08c      	sub	sp, #48	; 0x30
 8006640:	af00      	add	r7, sp, #0
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	60b9      	str	r1, [r7, #8]
 8006646:	607a      	str	r2, [r7, #4]
 8006648:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d107      	bne.n	8006664 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006658:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	e0c3      	b.n	80067ec <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800666a:	b2db      	uxtb	r3, r3
 800666c:	2b01      	cmp	r3, #1
 800666e:	f040 80bc 	bne.w	80067ea <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2200      	movs	r2, #0
 8006676:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006678:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	441a      	add	r2, r3
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006682:	429a      	cmp	r2, r3
 8006684:	d907      	bls.n	8006696 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800668a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	e0aa      	b.n	80067ec <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2203      	movs	r2, #3
 800669a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	2200      	movs	r2, #0
 80066a4:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80066b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ba:	4a4e      	ldr	r2, [pc, #312]	; (80067f4 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80066bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c2:	4a4d      	ldr	r2, [pc, #308]	; (80067f8 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80066c4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ca:	2200      	movs	r2, #0
 80066cc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d2:	2200      	movs	r2, #0
 80066d4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e6:	689a      	ldr	r2, [r3, #8]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	430a      	orrs	r2, r1
 80066f0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	3380      	adds	r3, #128	; 0x80
 80066fc:	4619      	mov	r1, r3
 80066fe:	68ba      	ldr	r2, [r7, #8]
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	025b      	lsls	r3, r3, #9
 8006704:	089b      	lsrs	r3, r3, #2
 8006706:	f7fe f8c1 	bl	800488c <HAL_DMA_Start_IT>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d017      	beq.n	8006740 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800671e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a35      	ldr	r2, [pc, #212]	; (80067fc <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8006726:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800672c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	e055      	b.n	80067ec <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f042 0208 	orr.w	r2, r2, #8
 800674e:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006754:	2b01      	cmp	r3, #1
 8006756:	d002      	beq.n	800675e <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8006758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800675a:	025b      	lsls	r3, r3, #9
 800675c:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800675e:	f04f 33ff 	mov.w	r3, #4294967295
 8006762:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	025b      	lsls	r3, r3, #9
 8006768:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800676a:	2390      	movs	r3, #144	; 0x90
 800676c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800676e:	2302      	movs	r3, #2
 8006770:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006772:	2300      	movs	r3, #0
 8006774:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8006776:	2301      	movs	r3, #1
 8006778:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f107 0210 	add.w	r2, r7, #16
 8006782:	4611      	mov	r1, r2
 8006784:	4618      	mov	r0, r3
 8006786:	f004 fcc1 	bl	800b10c <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	2b01      	cmp	r3, #1
 800678e:	d90a      	bls.n	80067a6 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2282      	movs	r2, #130	; 0x82
 8006794:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800679c:	4618      	mov	r0, r3
 800679e:	f004 fd25 	bl	800b1ec <SDMMC_CmdReadMultiBlock>
 80067a2:	62f8      	str	r0, [r7, #44]	; 0x2c
 80067a4:	e009      	b.n	80067ba <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2281      	movs	r2, #129	; 0x81
 80067aa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067b2:	4618      	mov	r0, r3
 80067b4:	f004 fcf8 	bl	800b1a8 <SDMMC_CmdReadSingleBlock>
 80067b8:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80067ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d012      	beq.n	80067e6 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a0d      	ldr	r2, [pc, #52]	; (80067fc <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80067c6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ce:	431a      	orrs	r2, r3
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2200      	movs	r2, #0
 80067e0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e002      	b.n	80067ec <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 80067e6:	2300      	movs	r3, #0
 80067e8:	e000      	b.n	80067ec <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 80067ea:	2302      	movs	r3, #2
  }
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3730      	adds	r7, #48	; 0x30
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}
 80067f4:	0800720b 	.word	0x0800720b
 80067f8:	0800727d 	.word	0x0800727d
 80067fc:	004005ff 	.word	0x004005ff

08006800 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b08c      	sub	sp, #48	; 0x30
 8006804:	af00      	add	r7, sp, #0
 8006806:	60f8      	str	r0, [r7, #12]
 8006808:	60b9      	str	r1, [r7, #8]
 800680a:	607a      	str	r2, [r7, #4]
 800680c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d107      	bne.n	8006828 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800681c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	e0c6      	b.n	80069b6 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800682e:	b2db      	uxtb	r3, r3
 8006830:	2b01      	cmp	r3, #1
 8006832:	f040 80bf 	bne.w	80069b4 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2200      	movs	r2, #0
 800683a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800683c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	441a      	add	r2, r3
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006846:	429a      	cmp	r2, r3
 8006848:	d907      	bls.n	800685a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800684e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e0ad      	b.n	80069b6 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2203      	movs	r2, #3
 800685e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	2200      	movs	r2, #0
 8006868:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f042 021a 	orr.w	r2, r2, #26
 8006878:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800687e:	4a50      	ldr	r2, [pc, #320]	; (80069c0 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8006880:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006886:	4a4f      	ldr	r2, [pc, #316]	; (80069c4 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8006888:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800688e:	2200      	movs	r2, #0
 8006890:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006896:	2b01      	cmp	r3, #1
 8006898:	d002      	beq.n	80068a0 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800689a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689c:	025b      	lsls	r3, r3, #9
 800689e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d90a      	bls.n	80068bc <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	22a0      	movs	r2, #160	; 0xa0
 80068aa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068b2:	4618      	mov	r0, r3
 80068b4:	f004 fcde 	bl	800b274 <SDMMC_CmdWriteMultiBlock>
 80068b8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80068ba:	e009      	b.n	80068d0 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2290      	movs	r2, #144	; 0x90
 80068c0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068c8:	4618      	mov	r0, r3
 80068ca:	f004 fcb1 	bl	800b230 <SDMMC_CmdWriteSingleBlock>
 80068ce:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80068d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d012      	beq.n	80068fc <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a3b      	ldr	r2, [pc, #236]	; (80069c8 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80068dc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e4:	431a      	orrs	r2, r3
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2201      	movs	r2, #1
 80068ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2200      	movs	r2, #0
 80068f6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	e05c      	b.n	80069b6 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f042 0208 	orr.w	r2, r2, #8
 800690a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006910:	2240      	movs	r2, #64	; 0x40
 8006912:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006924:	689a      	ldr	r2, [r3, #8]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	430a      	orrs	r2, r1
 800692e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006934:	68b9      	ldr	r1, [r7, #8]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	3380      	adds	r3, #128	; 0x80
 800693c:	461a      	mov	r2, r3
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	025b      	lsls	r3, r3, #9
 8006942:	089b      	lsrs	r3, r3, #2
 8006944:	f7fd ffa2 	bl	800488c <HAL_DMA_Start_IT>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d01a      	beq.n	8006984 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f022 021a 	bic.w	r2, r2, #26
 800695c:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a19      	ldr	r2, [pc, #100]	; (80069c8 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8006964:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800696a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2201      	movs	r2, #1
 8006976:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2200      	movs	r2, #0
 800697e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006980:	2301      	movs	r3, #1
 8006982:	e018      	b.n	80069b6 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006984:	f04f 33ff 	mov.w	r3, #4294967295
 8006988:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	025b      	lsls	r3, r3, #9
 800698e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006990:	2390      	movs	r3, #144	; 0x90
 8006992:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006994:	2300      	movs	r3, #0
 8006996:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006998:	2300      	movs	r3, #0
 800699a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800699c:	2301      	movs	r3, #1
 800699e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f107 0210 	add.w	r2, r7, #16
 80069a8:	4611      	mov	r1, r2
 80069aa:	4618      	mov	r0, r3
 80069ac:	f004 fbae 	bl	800b10c <SDMMC_ConfigData>

      return HAL_OK;
 80069b0:	2300      	movs	r3, #0
 80069b2:	e000      	b.n	80069b6 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 80069b4:	2302      	movs	r3, #2
  }
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3730      	adds	r7, #48	; 0x30
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop
 80069c0:	080071e1 	.word	0x080071e1
 80069c4:	0800727d 	.word	0x0800727d
 80069c8:	004005ff 	.word	0x004005ff

080069cc <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b084      	sub	sp, #16
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069d8:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d008      	beq.n	80069fa <HAL_SD_IRQHandler+0x2e>
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f003 0308 	and.w	r3, r3, #8
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d003      	beq.n	80069fa <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 ffed 	bl	80079d2 <SD_Read_IT>
 80069f8:	e153      	b.n	8006ca2 <HAL_SD_IRQHandler+0x2d6>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	f000 808d 	beq.w	8006b24 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a12:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	4ba3      	ldr	r3, [pc, #652]	; (8006cac <HAL_SD_IRQHandler+0x2e0>)
 8006a20:	400b      	ands	r3, r1
 8006a22:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f022 0201 	bic.w	r2, r2, #1
 8006a32:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f003 0308 	and.w	r3, r3, #8
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d039      	beq.n	8006ab2 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f003 0302 	and.w	r3, r3, #2
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d104      	bne.n	8006a52 <HAL_SD_IRQHandler+0x86>
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f003 0320 	and.w	r3, r3, #32
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d011      	beq.n	8006a76 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4618      	mov	r0, r3
 8006a58:	f004 fc2e 	bl	800b2b8 <SDMMC_CmdStopTransfer>
 8006a5c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d008      	beq.n	8006a76 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	431a      	orrs	r2, r3
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 f921 	bl	8006cb8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f240 523a 	movw	r2, #1338	; 0x53a
 8006a7e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f003 0301 	and.w	r3, r3, #1
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d104      	bne.n	8006aa2 <HAL_SD_IRQHandler+0xd6>
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f003 0302 	and.w	r3, r3, #2
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d003      	beq.n	8006aaa <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f005 f896 	bl	800bbd4 <HAL_SD_RxCpltCallback>
 8006aa8:	e0fb      	b.n	8006ca2 <HAL_SD_IRQHandler+0x2d6>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f005 f888 	bl	800bbc0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006ab0:	e0f7      	b.n	8006ca2 <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	f000 80f2 	beq.w	8006ca2 <HAL_SD_IRQHandler+0x2d6>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f003 0320 	and.w	r3, r3, #32
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d011      	beq.n	8006aec <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4618      	mov	r0, r3
 8006ace:	f004 fbf3 	bl	800b2b8 <SDMMC_CmdStopTransfer>
 8006ad2:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d008      	beq.n	8006aec <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	431a      	orrs	r2, r3
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 f8e6 	bl	8006cb8 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f003 0301 	and.w	r3, r3, #1
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	f040 80d5 	bne.w	8006ca2 <HAL_SD_IRQHandler+0x2d6>
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f003 0302 	and.w	r3, r3, #2
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	f040 80cf 	bne.w	8006ca2 <HAL_SD_IRQHandler+0x2d6>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f022 0208 	bic.w	r2, r2, #8
 8006b12:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f005 f84f 	bl	800bbc0 <HAL_SD_TxCpltCallback>
}
 8006b22:	e0be      	b.n	8006ca2 <HAL_SD_IRQHandler+0x2d6>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d008      	beq.n	8006b44 <HAL_SD_IRQHandler+0x178>
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f003 0308 	and.w	r3, r3, #8
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d003      	beq.n	8006b44 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f000 ff99 	bl	8007a74 <SD_Write_IT>
 8006b42:	e0ae      	b.n	8006ca2 <HAL_SD_IRQHandler+0x2d6>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b4a:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	f000 80a7 	beq.w	8006ca2 <HAL_SD_IRQHandler+0x2d6>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b5a:	f003 0302 	and.w	r3, r3, #2
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d005      	beq.n	8006b6e <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b66:	f043 0202 	orr.w	r2, r3, #2
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b74:	f003 0308 	and.w	r3, r3, #8
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d005      	beq.n	8006b88 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b80:	f043 0208 	orr.w	r2, r3, #8
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b8e:	f003 0320 	and.w	r3, r3, #32
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d005      	beq.n	8006ba2 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b9a:	f043 0220 	orr.w	r2, r3, #32
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ba8:	f003 0310 	and.w	r3, r3, #16
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d005      	beq.n	8006bbc <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb4:	f043 0210 	orr.w	r2, r3, #16
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f240 523a 	movw	r2, #1338	; 0x53a
 8006bc4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006bd4:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f004 fb6c 	bl	800b2b8 <SDMMC_CmdStopTransfer>
 8006be0:	4602      	mov	r2, r0
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be6:	431a      	orrs	r2, r3
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f003 0308 	and.w	r3, r3, #8
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d00a      	beq.n	8006c0c <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 f857 	bl	8006cb8 <HAL_SD_ErrorCallback>
}
 8006c0a:	e04a      	b.n	8006ca2 <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d045      	beq.n	8006ca2 <HAL_SD_IRQHandler+0x2d6>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f003 0310 	and.w	r3, r3, #16
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d104      	bne.n	8006c2a <HAL_SD_IRQHandler+0x25e>
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f003 0320 	and.w	r3, r3, #32
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d011      	beq.n	8006c4e <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c2e:	4a20      	ldr	r2, [pc, #128]	; (8006cb0 <HAL_SD_IRQHandler+0x2e4>)
 8006c30:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c36:	4618      	mov	r0, r3
 8006c38:	f7fd fef8 	bl	8004a2c <HAL_DMA_Abort_IT>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d02f      	beq.n	8006ca2 <HAL_SD_IRQHandler+0x2d6>
          SD_DMATxAbort(hsd->hdmatx);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c46:	4618      	mov	r0, r3
 8006c48:	f000 fb6a 	bl	8007320 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006c4c:	e029      	b.n	8006ca2 <HAL_SD_IRQHandler+0x2d6>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f003 0301 	and.w	r3, r3, #1
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d104      	bne.n	8006c62 <HAL_SD_IRQHandler+0x296>
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f003 0302 	and.w	r3, r3, #2
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d011      	beq.n	8006c86 <HAL_SD_IRQHandler+0x2ba>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c66:	4a13      	ldr	r2, [pc, #76]	; (8006cb4 <HAL_SD_IRQHandler+0x2e8>)
 8006c68:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f7fd fedc 	bl	8004a2c <HAL_DMA_Abort_IT>
 8006c74:	4603      	mov	r3, r0
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d013      	beq.n	8006ca2 <HAL_SD_IRQHandler+0x2d6>
          SD_DMARxAbort(hsd->hdmarx);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f000 fb85 	bl	800738e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006c84:	e00d      	b.n	8006ca2 <HAL_SD_IRQHandler+0x2d6>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2200      	movs	r2, #0
 8006c98:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f004 ff86 	bl	800bbac <HAL_SD_AbortCallback>
}
 8006ca0:	e7ff      	b.n	8006ca2 <HAL_SD_IRQHandler+0x2d6>
 8006ca2:	bf00      	nop
 8006ca4:	3710      	adds	r7, #16
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
 8006caa:	bf00      	nop
 8006cac:	ffff3ec5 	.word	0xffff3ec5
 8006cb0:	08007321 	.word	0x08007321
 8006cb4:	0800738f 	.word	0x0800738f

08006cb8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b083      	sub	sp, #12
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8006cc0:	bf00      	nop
 8006cc2:	370c      	adds	r7, #12
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr

08006ccc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b083      	sub	sp, #12
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cda:	0f9b      	lsrs	r3, r3, #30
 8006cdc:	b2da      	uxtb	r2, r3
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ce6:	0e9b      	lsrs	r3, r3, #26
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	f003 030f 	and.w	r3, r3, #15
 8006cee:	b2da      	uxtb	r2, r3
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cf8:	0e1b      	lsrs	r3, r3, #24
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	f003 0303 	and.w	r3, r3, #3
 8006d00:	b2da      	uxtb	r2, r3
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d0a:	0c1b      	lsrs	r3, r3, #16
 8006d0c:	b2da      	uxtb	r2, r3
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d16:	0a1b      	lsrs	r3, r3, #8
 8006d18:	b2da      	uxtb	r2, r3
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d22:	b2da      	uxtb	r2, r3
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d2c:	0d1b      	lsrs	r3, r3, #20
 8006d2e:	b29a      	uxth	r2, r3
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d38:	0c1b      	lsrs	r3, r3, #16
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	f003 030f 	and.w	r3, r3, #15
 8006d40:	b2da      	uxtb	r2, r3
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d4a:	0bdb      	lsrs	r3, r3, #15
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	f003 0301 	and.w	r3, r3, #1
 8006d52:	b2da      	uxtb	r2, r3
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d5c:	0b9b      	lsrs	r3, r3, #14
 8006d5e:	b2db      	uxtb	r3, r3
 8006d60:	f003 0301 	and.w	r3, r3, #1
 8006d64:	b2da      	uxtb	r2, r3
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d6e:	0b5b      	lsrs	r3, r3, #13
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	f003 0301 	and.w	r3, r3, #1
 8006d76:	b2da      	uxtb	r2, r3
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d80:	0b1b      	lsrs	r3, r3, #12
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	f003 0301 	and.w	r3, r3, #1
 8006d88:	b2da      	uxtb	r2, r3
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	2200      	movs	r2, #0
 8006d92:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d163      	bne.n	8006e64 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006da0:	009a      	lsls	r2, r3, #2
 8006da2:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006da6:	4013      	ands	r3, r2
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006dac:	0f92      	lsrs	r2, r2, #30
 8006dae:	431a      	orrs	r2, r3
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006db8:	0edb      	lsrs	r3, r3, #27
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	f003 0307 	and.w	r3, r3, #7
 8006dc0:	b2da      	uxtb	r2, r3
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dca:	0e1b      	lsrs	r3, r3, #24
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	f003 0307 	and.w	r3, r3, #7
 8006dd2:	b2da      	uxtb	r2, r3
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ddc:	0d5b      	lsrs	r3, r3, #21
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	f003 0307 	and.w	r3, r3, #7
 8006de4:	b2da      	uxtb	r2, r3
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dee:	0c9b      	lsrs	r3, r3, #18
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	f003 0307 	and.w	r3, r3, #7
 8006df6:	b2da      	uxtb	r2, r3
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e00:	0bdb      	lsrs	r3, r3, #15
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	f003 0307 	and.w	r3, r3, #7
 8006e08:	b2da      	uxtb	r2, r3
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	691b      	ldr	r3, [r3, #16]
 8006e12:	1c5a      	adds	r2, r3, #1
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	7e1b      	ldrb	r3, [r3, #24]
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	f003 0307 	and.w	r3, r3, #7
 8006e22:	3302      	adds	r3, #2
 8006e24:	2201      	movs	r2, #1
 8006e26:	fa02 f303 	lsl.w	r3, r2, r3
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006e2e:	fb02 f203 	mul.w	r2, r2, r3
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	7a1b      	ldrb	r3, [r3, #8]
 8006e3a:	b2db      	uxtb	r3, r3
 8006e3c:	f003 030f 	and.w	r3, r3, #15
 8006e40:	2201      	movs	r2, #1
 8006e42:	409a      	lsls	r2, r3
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006e50:	0a52      	lsrs	r2, r2, #9
 8006e52:	fb02 f203 	mul.w	r2, r2, r3
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e60:	661a      	str	r2, [r3, #96]	; 0x60
 8006e62:	e031      	b.n	8006ec8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d11d      	bne.n	8006ea8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e70:	041b      	lsls	r3, r3, #16
 8006e72:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e7a:	0c1b      	lsrs	r3, r3, #16
 8006e7c:	431a      	orrs	r2, r3
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	691b      	ldr	r3, [r3, #16]
 8006e86:	3301      	adds	r3, #1
 8006e88:	029a      	lsls	r2, r3, #10
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e9c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	661a      	str	r2, [r3, #96]	; 0x60
 8006ea6:	e00f      	b.n	8006ec8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a58      	ldr	r2, [pc, #352]	; (8007010 <HAL_SD_GetCardCSD+0x344>)
 8006eae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	e09d      	b.n	8007004 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ecc:	0b9b      	lsrs	r3, r3, #14
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	f003 0301 	and.w	r3, r3, #1
 8006ed4:	b2da      	uxtb	r2, r3
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ede:	09db      	lsrs	r3, r3, #7
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ee6:	b2da      	uxtb	r2, r3
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ef6:	b2da      	uxtb	r2, r3
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f00:	0fdb      	lsrs	r3, r3, #31
 8006f02:	b2da      	uxtb	r2, r3
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f0c:	0f5b      	lsrs	r3, r3, #29
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	f003 0303 	and.w	r3, r3, #3
 8006f14:	b2da      	uxtb	r2, r3
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f1e:	0e9b      	lsrs	r3, r3, #26
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	f003 0307 	and.w	r3, r3, #7
 8006f26:	b2da      	uxtb	r2, r3
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f30:	0d9b      	lsrs	r3, r3, #22
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	f003 030f 	and.w	r3, r3, #15
 8006f38:	b2da      	uxtb	r2, r3
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f42:	0d5b      	lsrs	r3, r3, #21
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	f003 0301 	and.w	r3, r3, #1
 8006f4a:	b2da      	uxtb	r2, r3
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	2200      	movs	r2, #0
 8006f56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f5e:	0c1b      	lsrs	r3, r3, #16
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	f003 0301 	and.w	r3, r3, #1
 8006f66:	b2da      	uxtb	r2, r3
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f72:	0bdb      	lsrs	r3, r3, #15
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	f003 0301 	and.w	r3, r3, #1
 8006f7a:	b2da      	uxtb	r2, r3
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f86:	0b9b      	lsrs	r3, r3, #14
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	f003 0301 	and.w	r3, r3, #1
 8006f8e:	b2da      	uxtb	r2, r3
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f9a:	0b5b      	lsrs	r3, r3, #13
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	f003 0301 	and.w	r3, r3, #1
 8006fa2:	b2da      	uxtb	r2, r3
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fae:	0b1b      	lsrs	r3, r3, #12
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	f003 0301 	and.w	r3, r3, #1
 8006fb6:	b2da      	uxtb	r2, r3
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fc2:	0a9b      	lsrs	r3, r3, #10
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	f003 0303 	and.w	r3, r3, #3
 8006fca:	b2da      	uxtb	r2, r3
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fd6:	0a1b      	lsrs	r3, r3, #8
 8006fd8:	b2db      	uxtb	r3, r3
 8006fda:	f003 0303 	and.w	r3, r3, #3
 8006fde:	b2da      	uxtb	r2, r3
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fea:	085b      	lsrs	r3, r3, #1
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ff2:	b2da      	uxtb	r2, r3
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8007002:	2300      	movs	r3, #0
}
 8007004:	4618      	mov	r0, r3
 8007006:	370c      	adds	r7, #12
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr
 8007010:	004005ff 	.word	0x004005ff

08007014 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800705e:	2300      	movs	r3, #0
}
 8007060:	4618      	mov	r0, r3
 8007062:	370c      	adds	r7, #12
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr

0800706c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800706c:	b5b0      	push	{r4, r5, r7, lr}
 800706e:	b08e      	sub	sp, #56	; 0x38
 8007070:	af04      	add	r7, sp, #16
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8007076:	2300      	movs	r3, #0
 8007078:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2203      	movs	r2, #3
 8007080:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007088:	2b03      	cmp	r3, #3
 800708a:	d02e      	beq.n	80070ea <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007092:	d106      	bne.n	80070a2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007098:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	639a      	str	r2, [r3, #56]	; 0x38
 80070a0:	e029      	b.n	80070f6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070a8:	d10a      	bne.n	80070c0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 fb28 	bl	8007700 <SD_WideBus_Enable>
 80070b0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070b6:	6a3b      	ldr	r3, [r7, #32]
 80070b8:	431a      	orrs	r2, r3
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	639a      	str	r2, [r3, #56]	; 0x38
 80070be:	e01a      	b.n	80070f6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d10a      	bne.n	80070dc <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 fb65 	bl	8007796 <SD_WideBus_Disable>
 80070cc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070d2:	6a3b      	ldr	r3, [r7, #32]
 80070d4:	431a      	orrs	r2, r3
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	639a      	str	r2, [r3, #56]	; 0x38
 80070da:	e00c      	b.n	80070f6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070e0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	639a      	str	r2, [r3, #56]	; 0x38
 80070e8:	e005      	b.n	80070f6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ee:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d00b      	beq.n	8007116 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a26      	ldr	r2, [pc, #152]	; (800719c <HAL_SD_ConfigWideBusOperation+0x130>)
 8007104:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2201      	movs	r2, #1
 800710a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007114:	e01f      	b.n	8007156 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	68db      	ldr	r3, [r3, #12]
 8007126:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	695b      	ldr	r3, [r3, #20]
 8007130:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	699b      	ldr	r3, [r3, #24]
 8007136:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681d      	ldr	r5, [r3, #0]
 800713c:	466c      	mov	r4, sp
 800713e:	f107 0314 	add.w	r3, r7, #20
 8007142:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007146:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800714a:	f107 0308 	add.w	r3, r7, #8
 800714e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007150:	4628      	mov	r0, r5
 8007152:	f003 ff29 	bl	800afa8 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800715e:	4618      	mov	r0, r3
 8007160:	f004 f800 	bl	800b164 <SDMMC_CmdBlockLength>
 8007164:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007166:	6a3b      	ldr	r3, [r7, #32]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d00c      	beq.n	8007186 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a0a      	ldr	r2, [pc, #40]	; (800719c <HAL_SD_ConfigWideBusOperation+0x130>)
 8007172:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007178:	6a3b      	ldr	r3, [r7, #32]
 800717a:	431a      	orrs	r2, r3
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8007180:	2301      	movs	r3, #1
 8007182:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2201      	movs	r2, #1
 800718a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800718e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007192:	4618      	mov	r0, r3
 8007194:	3728      	adds	r7, #40	; 0x28
 8007196:	46bd      	mov	sp, r7
 8007198:	bdb0      	pop	{r4, r5, r7, pc}
 800719a:	bf00      	nop
 800719c:	004005ff 	.word	0x004005ff

080071a0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b086      	sub	sp, #24
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80071a8:	2300      	movs	r3, #0
 80071aa:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80071ac:	f107 030c 	add.w	r3, r7, #12
 80071b0:	4619      	mov	r1, r3
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f000 fa7c 	bl	80076b0 <SD_SendStatus>
 80071b8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d005      	beq.n	80071cc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	431a      	orrs	r2, r3
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	0a5b      	lsrs	r3, r3, #9
 80071d0:	f003 030f 	and.w	r3, r3, #15
 80071d4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80071d6:	693b      	ldr	r3, [r7, #16]
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3718      	adds	r7, #24
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b085      	sub	sp, #20
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ec:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80071fc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80071fe:	bf00      	nop
 8007200:	3714      	adds	r7, #20
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr

0800720a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800720a:	b580      	push	{r7, lr}
 800720c:	b084      	sub	sp, #16
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007216:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800721c:	2b82      	cmp	r3, #130	; 0x82
 800721e:	d111      	bne.n	8007244 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4618      	mov	r0, r3
 8007226:	f004 f847 	bl	800b2b8 <SDMMC_CmdStopTransfer>
 800722a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d008      	beq.n	8007244 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	431a      	orrs	r2, r3
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800723e:	68f8      	ldr	r0, [r7, #12]
 8007240:	f7ff fd3a 	bl	8006cb8 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f022 0208 	bic.w	r2, r2, #8
 8007252:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f240 523a 	movw	r2, #1338	; 0x53a
 800725c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2201      	movs	r2, #1
 8007262:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2200      	movs	r2, #0
 800726a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800726c:	68f8      	ldr	r0, [r7, #12]
 800726e:	f004 fcb1 	bl	800bbd4 <HAL_SD_RxCpltCallback>
#endif
}
 8007272:	bf00      	nop
 8007274:	3710      	adds	r7, #16
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
	...

0800727c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b086      	sub	sp, #24
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007288:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f7fd fd7a 	bl	8004d84 <HAL_DMA_GetError>
 8007290:	4603      	mov	r3, r0
 8007292:	2b02      	cmp	r3, #2
 8007294:	d03e      	beq.n	8007314 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800729a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800729c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072a4:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d002      	beq.n	80072b2 <SD_DMAError+0x36>
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d12d      	bne.n	800730e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a19      	ldr	r2, [pc, #100]	; (800731c <SD_DMAError+0xa0>)
 80072b8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80072c8:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ce:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80072d6:	6978      	ldr	r0, [r7, #20]
 80072d8:	f7ff ff62 	bl	80071a0 <HAL_SD_GetCardState>
 80072dc:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	2b06      	cmp	r3, #6
 80072e2:	d002      	beq.n	80072ea <SD_DMAError+0x6e>
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	2b05      	cmp	r3, #5
 80072e8:	d10a      	bne.n	8007300 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4618      	mov	r0, r3
 80072f0:	f003 ffe2 	bl	800b2b8 <SDMMC_CmdStopTransfer>
 80072f4:	4602      	mov	r2, r0
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072fa:	431a      	orrs	r2, r3
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	2201      	movs	r2, #1
 8007304:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	2200      	movs	r2, #0
 800730c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800730e:	6978      	ldr	r0, [r7, #20]
 8007310:	f7ff fcd2 	bl	8006cb8 <HAL_SD_ErrorCallback>
#endif
  }
}
 8007314:	bf00      	nop
 8007316:	3718      	adds	r7, #24
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}
 800731c:	004005ff 	.word	0x004005ff

08007320 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b084      	sub	sp, #16
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800732c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f240 523a 	movw	r2, #1338	; 0x53a
 8007336:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007338:	68f8      	ldr	r0, [r7, #12]
 800733a:	f7ff ff31 	bl	80071a0 <HAL_SD_GetCardState>
 800733e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2201      	movs	r2, #1
 8007344:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2200      	movs	r2, #0
 800734c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	2b06      	cmp	r3, #6
 8007352:	d002      	beq.n	800735a <SD_DMATxAbort+0x3a>
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	2b05      	cmp	r3, #5
 8007358:	d10a      	bne.n	8007370 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4618      	mov	r0, r3
 8007360:	f003 ffaa 	bl	800b2b8 <SDMMC_CmdStopTransfer>
 8007364:	4602      	mov	r2, r0
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800736a:	431a      	orrs	r2, r3
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007374:	2b00      	cmp	r3, #0
 8007376:	d103      	bne.n	8007380 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007378:	68f8      	ldr	r0, [r7, #12]
 800737a:	f004 fc17 	bl	800bbac <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800737e:	e002      	b.n	8007386 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007380:	68f8      	ldr	r0, [r7, #12]
 8007382:	f7ff fc99 	bl	8006cb8 <HAL_SD_ErrorCallback>
}
 8007386:	bf00      	nop
 8007388:	3710      	adds	r7, #16
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}

0800738e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800738e:	b580      	push	{r7, lr}
 8007390:	b084      	sub	sp, #16
 8007392:	af00      	add	r7, sp, #0
 8007394:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800739a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f240 523a 	movw	r2, #1338	; 0x53a
 80073a4:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80073a6:	68f8      	ldr	r0, [r7, #12]
 80073a8:	f7ff fefa 	bl	80071a0 <HAL_SD_GetCardState>
 80073ac:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2201      	movs	r2, #1
 80073b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2200      	movs	r2, #0
 80073ba:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	2b06      	cmp	r3, #6
 80073c0:	d002      	beq.n	80073c8 <SD_DMARxAbort+0x3a>
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	2b05      	cmp	r3, #5
 80073c6:	d10a      	bne.n	80073de <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4618      	mov	r0, r3
 80073ce:	f003 ff73 	bl	800b2b8 <SDMMC_CmdStopTransfer>
 80073d2:	4602      	mov	r2, r0
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d8:	431a      	orrs	r2, r3
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d103      	bne.n	80073ee <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80073e6:	68f8      	ldr	r0, [r7, #12]
 80073e8:	f004 fbe0 	bl	800bbac <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80073ec:	e002      	b.n	80073f4 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80073ee:	68f8      	ldr	r0, [r7, #12]
 80073f0:	f7ff fc62 	bl	8006cb8 <HAL_SD_ErrorCallback>
}
 80073f4:	bf00      	nop
 80073f6:	3710      	adds	r7, #16
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80073fc:	b5b0      	push	{r4, r5, r7, lr}
 80073fe:	b094      	sub	sp, #80	; 0x50
 8007400:	af04      	add	r7, sp, #16
 8007402:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007404:	2301      	movs	r3, #1
 8007406:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4618      	mov	r0, r3
 800740e:	f003 fe24 	bl	800b05a <SDMMC_GetPowerState>
 8007412:	4603      	mov	r3, r0
 8007414:	2b00      	cmp	r3, #0
 8007416:	d102      	bne.n	800741e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007418:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800741c:	e0b6      	b.n	800758c <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007422:	2b03      	cmp	r3, #3
 8007424:	d02f      	beq.n	8007486 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4618      	mov	r0, r3
 800742c:	f004 f84f 	bl	800b4ce <SDMMC_CmdSendCID>
 8007430:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007434:	2b00      	cmp	r3, #0
 8007436:	d001      	beq.n	800743c <SD_InitCard+0x40>
    {
      return errorstate;
 8007438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800743a:	e0a7      	b.n	800758c <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	2100      	movs	r1, #0
 8007442:	4618      	mov	r0, r3
 8007444:	f003 fe4f 	bl	800b0e6 <SDMMC_GetResponse>
 8007448:	4602      	mov	r2, r0
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	2104      	movs	r1, #4
 8007454:	4618      	mov	r0, r3
 8007456:	f003 fe46 	bl	800b0e6 <SDMMC_GetResponse>
 800745a:	4602      	mov	r2, r0
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	2108      	movs	r1, #8
 8007466:	4618      	mov	r0, r3
 8007468:	f003 fe3d 	bl	800b0e6 <SDMMC_GetResponse>
 800746c:	4602      	mov	r2, r0
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	210c      	movs	r1, #12
 8007478:	4618      	mov	r0, r3
 800747a:	f003 fe34 	bl	800b0e6 <SDMMC_GetResponse>
 800747e:	4602      	mov	r2, r0
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800748a:	2b03      	cmp	r3, #3
 800748c:	d00d      	beq.n	80074aa <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f107 020e 	add.w	r2, r7, #14
 8007496:	4611      	mov	r1, r2
 8007498:	4618      	mov	r0, r3
 800749a:	f004 f855 	bl	800b548 <SDMMC_CmdSetRelAdd>
 800749e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80074a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d001      	beq.n	80074aa <SD_InitCard+0xae>
    {
      return errorstate;
 80074a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074a8:	e070      	b.n	800758c <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074ae:	2b03      	cmp	r3, #3
 80074b0:	d036      	beq.n	8007520 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80074b2:	89fb      	ldrh	r3, [r7, #14]
 80074b4:	461a      	mov	r2, r3
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074c2:	041b      	lsls	r3, r3, #16
 80074c4:	4619      	mov	r1, r3
 80074c6:	4610      	mov	r0, r2
 80074c8:	f004 f81f 	bl	800b50a <SDMMC_CmdSendCSD>
 80074cc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80074ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d001      	beq.n	80074d8 <SD_InitCard+0xdc>
    {
      return errorstate;
 80074d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074d6:	e059      	b.n	800758c <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	2100      	movs	r1, #0
 80074de:	4618      	mov	r0, r3
 80074e0:	f003 fe01 	bl	800b0e6 <SDMMC_GetResponse>
 80074e4:	4602      	mov	r2, r0
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	2104      	movs	r1, #4
 80074f0:	4618      	mov	r0, r3
 80074f2:	f003 fdf8 	bl	800b0e6 <SDMMC_GetResponse>
 80074f6:	4602      	mov	r2, r0
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	2108      	movs	r1, #8
 8007502:	4618      	mov	r0, r3
 8007504:	f003 fdef 	bl	800b0e6 <SDMMC_GetResponse>
 8007508:	4602      	mov	r2, r0
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	210c      	movs	r1, #12
 8007514:	4618      	mov	r0, r3
 8007516:	f003 fde6 	bl	800b0e6 <SDMMC_GetResponse>
 800751a:	4602      	mov	r2, r0
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2104      	movs	r1, #4
 8007526:	4618      	mov	r0, r3
 8007528:	f003 fddd 	bl	800b0e6 <SDMMC_GetResponse>
 800752c:	4603      	mov	r3, r0
 800752e:	0d1a      	lsrs	r2, r3, #20
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007534:	f107 0310 	add.w	r3, r7, #16
 8007538:	4619      	mov	r1, r3
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f7ff fbc6 	bl	8006ccc <HAL_SD_GetCardCSD>
 8007540:	4603      	mov	r3, r0
 8007542:	2b00      	cmp	r3, #0
 8007544:	d002      	beq.n	800754c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007546:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800754a:	e01f      	b.n	800758c <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6819      	ldr	r1, [r3, #0]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007554:	041b      	lsls	r3, r3, #16
 8007556:	461a      	mov	r2, r3
 8007558:	f04f 0300 	mov.w	r3, #0
 800755c:	4608      	mov	r0, r1
 800755e:	f003 fecd 	bl	800b2fc <SDMMC_CmdSelDesel>
 8007562:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007566:	2b00      	cmp	r3, #0
 8007568:	d001      	beq.n	800756e <SD_InitCard+0x172>
  {
    return errorstate;
 800756a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800756c:	e00e      	b.n	800758c <SD_InitCard+0x190>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681d      	ldr	r5, [r3, #0]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	466c      	mov	r4, sp
 8007576:	f103 0210 	add.w	r2, r3, #16
 800757a:	ca07      	ldmia	r2, {r0, r1, r2}
 800757c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007580:	3304      	adds	r3, #4
 8007582:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007584:	4628      	mov	r0, r5
 8007586:	f003 fd0f 	bl	800afa8 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800758a:	2300      	movs	r3, #0
}
 800758c:	4618      	mov	r0, r3
 800758e:	3740      	adds	r7, #64	; 0x40
 8007590:	46bd      	mov	sp, r7
 8007592:	bdb0      	pop	{r4, r5, r7, pc}

08007594 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b086      	sub	sp, #24
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800759c:	2300      	movs	r3, #0
 800759e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80075a0:	2300      	movs	r3, #0
 80075a2:	617b      	str	r3, [r7, #20]
 80075a4:	2300      	movs	r3, #0
 80075a6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4618      	mov	r0, r3
 80075ae:	f003 fec8 	bl	800b342 <SDMMC_CmdGoIdleState>
 80075b2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d001      	beq.n	80075be <SD_PowerON+0x2a>
  {
    return errorstate;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	e072      	b.n	80076a4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4618      	mov	r0, r3
 80075c4:	f003 fedb 	bl	800b37e <SDMMC_CmdOperCond>
 80075c8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d00d      	beq.n	80075ec <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4618      	mov	r0, r3
 80075dc:	f003 feb1 	bl	800b342 <SDMMC_CmdGoIdleState>
 80075e0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d004      	beq.n	80075f2 <SD_PowerON+0x5e>
    {
      return errorstate;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	e05b      	b.n	80076a4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2201      	movs	r2, #1
 80075f0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075f6:	2b01      	cmp	r3, #1
 80075f8:	d137      	bne.n	800766a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	2100      	movs	r1, #0
 8007600:	4618      	mov	r0, r3
 8007602:	f003 fedb 	bl	800b3bc <SDMMC_CmdAppCommand>
 8007606:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d02d      	beq.n	800766a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800760e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007612:	e047      	b.n	80076a4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	2100      	movs	r1, #0
 800761a:	4618      	mov	r0, r3
 800761c:	f003 fece 	bl	800b3bc <SDMMC_CmdAppCommand>
 8007620:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d001      	beq.n	800762c <SD_PowerON+0x98>
    {
      return errorstate;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	e03b      	b.n	80076a4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	491e      	ldr	r1, [pc, #120]	; (80076ac <SD_PowerON+0x118>)
 8007632:	4618      	mov	r0, r3
 8007634:	f003 fee4 	bl	800b400 <SDMMC_CmdAppOperCommand>
 8007638:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d002      	beq.n	8007646 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007640:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007644:	e02e      	b.n	80076a4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	2100      	movs	r1, #0
 800764c:	4618      	mov	r0, r3
 800764e:	f003 fd4a 	bl	800b0e6 <SDMMC_GetResponse>
 8007652:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	0fdb      	lsrs	r3, r3, #31
 8007658:	2b01      	cmp	r3, #1
 800765a:	d101      	bne.n	8007660 <SD_PowerON+0xcc>
 800765c:	2301      	movs	r3, #1
 800765e:	e000      	b.n	8007662 <SD_PowerON+0xce>
 8007660:	2300      	movs	r3, #0
 8007662:	613b      	str	r3, [r7, #16]

    count++;
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	3301      	adds	r3, #1
 8007668:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007670:	4293      	cmp	r3, r2
 8007672:	d802      	bhi.n	800767a <SD_PowerON+0xe6>
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d0cc      	beq.n	8007614 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007680:	4293      	cmp	r3, r2
 8007682:	d902      	bls.n	800768a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007684:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007688:	e00c      	b.n	80076a4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007690:	2b00      	cmp	r3, #0
 8007692:	d003      	beq.n	800769c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2201      	movs	r2, #1
 8007698:	645a      	str	r2, [r3, #68]	; 0x44
 800769a:	e002      	b.n	80076a2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2200      	movs	r2, #0
 80076a0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80076a2:	2300      	movs	r3, #0
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3718      	adds	r7, #24
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}
 80076ac:	c1100000 	.word	0xc1100000

080076b0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d102      	bne.n	80076c6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80076c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80076c4:	e018      	b.n	80076f8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681a      	ldr	r2, [r3, #0]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076ce:	041b      	lsls	r3, r3, #16
 80076d0:	4619      	mov	r1, r3
 80076d2:	4610      	mov	r0, r2
 80076d4:	f003 ff59 	bl	800b58a <SDMMC_CmdSendStatus>
 80076d8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d001      	beq.n	80076e4 <SD_SendStatus+0x34>
  {
    return errorstate;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	e009      	b.n	80076f8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	2100      	movs	r1, #0
 80076ea:	4618      	mov	r0, r3
 80076ec:	f003 fcfb 	bl	800b0e6 <SDMMC_GetResponse>
 80076f0:	4602      	mov	r2, r0
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80076f6:	2300      	movs	r3, #0
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3710      	adds	r7, #16
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b086      	sub	sp, #24
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007708:	2300      	movs	r3, #0
 800770a:	60fb      	str	r3, [r7, #12]
 800770c:	2300      	movs	r3, #0
 800770e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	2100      	movs	r1, #0
 8007716:	4618      	mov	r0, r3
 8007718:	f003 fce5 	bl	800b0e6 <SDMMC_GetResponse>
 800771c:	4603      	mov	r3, r0
 800771e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007722:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007726:	d102      	bne.n	800772e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007728:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800772c:	e02f      	b.n	800778e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800772e:	f107 030c 	add.w	r3, r7, #12
 8007732:	4619      	mov	r1, r3
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f000 f879 	bl	800782c <SD_FindSCR>
 800773a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d001      	beq.n	8007746 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	e023      	b.n	800778e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800774c:	2b00      	cmp	r3, #0
 800774e:	d01c      	beq.n	800778a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007758:	041b      	lsls	r3, r3, #16
 800775a:	4619      	mov	r1, r3
 800775c:	4610      	mov	r0, r2
 800775e:	f003 fe2d 	bl	800b3bc <SDMMC_CmdAppCommand>
 8007762:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d001      	beq.n	800776e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	e00f      	b.n	800778e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	2102      	movs	r1, #2
 8007774:	4618      	mov	r0, r3
 8007776:	f003 fe67 	bl	800b448 <SDMMC_CmdBusWidth>
 800777a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d001      	beq.n	8007786 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	e003      	b.n	800778e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007786:	2300      	movs	r3, #0
 8007788:	e001      	b.n	800778e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800778a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800778e:	4618      	mov	r0, r3
 8007790:	3718      	adds	r7, #24
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}

08007796 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007796:	b580      	push	{r7, lr}
 8007798:	b086      	sub	sp, #24
 800779a:	af00      	add	r7, sp, #0
 800779c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800779e:	2300      	movs	r3, #0
 80077a0:	60fb      	str	r3, [r7, #12]
 80077a2:	2300      	movs	r3, #0
 80077a4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	2100      	movs	r1, #0
 80077ac:	4618      	mov	r0, r3
 80077ae:	f003 fc9a 	bl	800b0e6 <SDMMC_GetResponse>
 80077b2:	4603      	mov	r3, r0
 80077b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80077bc:	d102      	bne.n	80077c4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80077be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80077c2:	e02f      	b.n	8007824 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80077c4:	f107 030c 	add.w	r3, r7, #12
 80077c8:	4619      	mov	r1, r3
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 f82e 	bl	800782c <SD_FindSCR>
 80077d0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d001      	beq.n	80077dc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	e023      	b.n	8007824 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d01c      	beq.n	8007820 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077ee:	041b      	lsls	r3, r3, #16
 80077f0:	4619      	mov	r1, r3
 80077f2:	4610      	mov	r0, r2
 80077f4:	f003 fde2 	bl	800b3bc <SDMMC_CmdAppCommand>
 80077f8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d001      	beq.n	8007804 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	e00f      	b.n	8007824 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	2100      	movs	r1, #0
 800780a:	4618      	mov	r0, r3
 800780c:	f003 fe1c 	bl	800b448 <SDMMC_CmdBusWidth>
 8007810:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d001      	beq.n	800781c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	e003      	b.n	8007824 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800781c:	2300      	movs	r3, #0
 800781e:	e001      	b.n	8007824 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007820:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007824:	4618      	mov	r0, r3
 8007826:	3718      	adds	r7, #24
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800782c:	b590      	push	{r4, r7, lr}
 800782e:	b08f      	sub	sp, #60	; 0x3c
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007836:	f7fc fa17 	bl	8003c68 <HAL_GetTick>
 800783a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800783c:	2300      	movs	r3, #0
 800783e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8007840:	2300      	movs	r3, #0
 8007842:	60bb      	str	r3, [r7, #8]
 8007844:	2300      	movs	r3, #0
 8007846:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	2108      	movs	r1, #8
 8007852:	4618      	mov	r0, r3
 8007854:	f003 fc86 	bl	800b164 <SDMMC_CmdBlockLength>
 8007858:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800785a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800785c:	2b00      	cmp	r3, #0
 800785e:	d001      	beq.n	8007864 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007862:	e0b2      	b.n	80079ca <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800786c:	041b      	lsls	r3, r3, #16
 800786e:	4619      	mov	r1, r3
 8007870:	4610      	mov	r0, r2
 8007872:	f003 fda3 	bl	800b3bc <SDMMC_CmdAppCommand>
 8007876:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800787a:	2b00      	cmp	r3, #0
 800787c:	d001      	beq.n	8007882 <SD_FindSCR+0x56>
  {
    return errorstate;
 800787e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007880:	e0a3      	b.n	80079ca <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007882:	f04f 33ff 	mov.w	r3, #4294967295
 8007886:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007888:	2308      	movs	r3, #8
 800788a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800788c:	2330      	movs	r3, #48	; 0x30
 800788e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007890:	2302      	movs	r3, #2
 8007892:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007894:	2300      	movs	r3, #0
 8007896:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007898:	2301      	movs	r3, #1
 800789a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f107 0210 	add.w	r2, r7, #16
 80078a4:	4611      	mov	r1, r2
 80078a6:	4618      	mov	r0, r3
 80078a8:	f003 fc30 	bl	800b10c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4618      	mov	r0, r3
 80078b2:	f003 fdeb 	bl	800b48c <SDMMC_CmdSendSCR>
 80078b6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80078b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d02a      	beq.n	8007914 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80078be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c0:	e083      	b.n	80079ca <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d00f      	beq.n	80078f0 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6819      	ldr	r1, [r3, #0]
 80078d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078d6:	009b      	lsls	r3, r3, #2
 80078d8:	f107 0208 	add.w	r2, r7, #8
 80078dc:	18d4      	adds	r4, r2, r3
 80078de:	4608      	mov	r0, r1
 80078e0:	f003 fb8e 	bl	800b000 <SDMMC_ReadFIFO>
 80078e4:	4603      	mov	r3, r0
 80078e6:	6023      	str	r3, [r4, #0]
      index++;
 80078e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078ea:	3301      	adds	r3, #1
 80078ec:	637b      	str	r3, [r7, #52]	; 0x34
 80078ee:	e006      	b.n	80078fe <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d012      	beq.n	8007924 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80078fe:	f7fc f9b3 	bl	8003c68 <HAL_GetTick>
 8007902:	4602      	mov	r2, r0
 8007904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007906:	1ad3      	subs	r3, r2, r3
 8007908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800790c:	d102      	bne.n	8007914 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800790e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007912:	e05a      	b.n	80079ca <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800791a:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800791e:	2b00      	cmp	r3, #0
 8007920:	d0cf      	beq.n	80078c2 <SD_FindSCR+0x96>
 8007922:	e000      	b.n	8007926 <SD_FindSCR+0xfa>
      break;
 8007924:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800792c:	f003 0308 	and.w	r3, r3, #8
 8007930:	2b00      	cmp	r3, #0
 8007932:	d005      	beq.n	8007940 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	2208      	movs	r2, #8
 800793a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800793c:	2308      	movs	r3, #8
 800793e:	e044      	b.n	80079ca <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007946:	f003 0302 	and.w	r3, r3, #2
 800794a:	2b00      	cmp	r3, #0
 800794c:	d005      	beq.n	800795a <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	2202      	movs	r2, #2
 8007954:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007956:	2302      	movs	r3, #2
 8007958:	e037      	b.n	80079ca <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007960:	f003 0320 	and.w	r3, r3, #32
 8007964:	2b00      	cmp	r3, #0
 8007966:	d005      	beq.n	8007974 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	2220      	movs	r2, #32
 800796e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007970:	2320      	movs	r3, #32
 8007972:	e02a      	b.n	80079ca <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f240 523a 	movw	r2, #1338	; 0x53a
 800797c:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	061a      	lsls	r2, r3, #24
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	021b      	lsls	r3, r3, #8
 8007986:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800798a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	0a1b      	lsrs	r3, r3, #8
 8007990:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007994:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	0e1b      	lsrs	r3, r3, #24
 800799a:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800799c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800799e:	601a      	str	r2, [r3, #0]
    scr++;
 80079a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079a2:	3304      	adds	r3, #4
 80079a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	061a      	lsls	r2, r3, #24
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	021b      	lsls	r3, r3, #8
 80079ae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80079b2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	0a1b      	lsrs	r3, r3, #8
 80079b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80079bc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	0e1b      	lsrs	r3, r3, #24
 80079c2:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80079c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079c6:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80079c8:	2300      	movs	r3, #0
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	373c      	adds	r7, #60	; 0x3c
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd90      	pop	{r4, r7, pc}

080079d2 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80079d2:	b580      	push	{r7, lr}
 80079d4:	b086      	sub	sp, #24
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079de:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e4:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d03f      	beq.n	8007a6c <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80079ec:	2300      	movs	r3, #0
 80079ee:	617b      	str	r3, [r7, #20]
 80079f0:	e033      	b.n	8007a5a <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4618      	mov	r0, r3
 80079f8:	f003 fb02 	bl	800b000 <SDMMC_ReadFIFO>
 80079fc:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	b2da      	uxtb	r2, r3
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	3301      	adds	r3, #1
 8007a0a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	3b01      	subs	r3, #1
 8007a10:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	0a1b      	lsrs	r3, r3, #8
 8007a16:	b2da      	uxtb	r2, r3
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	3301      	adds	r3, #1
 8007a20:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	3b01      	subs	r3, #1
 8007a26:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	0c1b      	lsrs	r3, r3, #16
 8007a2c:	b2da      	uxtb	r2, r3
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	3301      	adds	r3, #1
 8007a36:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	3b01      	subs	r3, #1
 8007a3c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	0e1b      	lsrs	r3, r3, #24
 8007a42:	b2da      	uxtb	r2, r3
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	3b01      	subs	r3, #1
 8007a52:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	3301      	adds	r3, #1
 8007a58:	617b      	str	r3, [r7, #20]
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	2b07      	cmp	r3, #7
 8007a5e:	d9c8      	bls.n	80079f2 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	68fa      	ldr	r2, [r7, #12]
 8007a64:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	693a      	ldr	r2, [r7, #16]
 8007a6a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8007a6c:	bf00      	nop
 8007a6e:	3718      	adds	r7, #24
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b086      	sub	sp, #24
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6a1b      	ldr	r3, [r3, #32]
 8007a80:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a86:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d043      	beq.n	8007b16 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8007a8e:	2300      	movs	r3, #0
 8007a90:	617b      	str	r3, [r7, #20]
 8007a92:	e037      	b.n	8007b04 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	781b      	ldrb	r3, [r3, #0]
 8007a98:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	3301      	adds	r3, #1
 8007a9e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	3b01      	subs	r3, #1
 8007aa4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	021a      	lsls	r2, r3, #8
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	3b01      	subs	r3, #1
 8007abc:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	041a      	lsls	r2, r3, #16
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	3301      	adds	r3, #1
 8007ace:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	3b01      	subs	r3, #1
 8007ad4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	781b      	ldrb	r3, [r3, #0]
 8007ada:	061a      	lsls	r2, r3, #24
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	3301      	adds	r3, #1
 8007ae6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	3b01      	subs	r3, #1
 8007aec:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f107 0208 	add.w	r2, r7, #8
 8007af6:	4611      	mov	r1, r2
 8007af8:	4618      	mov	r0, r3
 8007afa:	f003 fa8e 	bl	800b01a <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	3301      	adds	r3, #1
 8007b02:	617b      	str	r3, [r7, #20]
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	2b07      	cmp	r3, #7
 8007b08:	d9c4      	bls.n	8007a94 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	68fa      	ldr	r2, [r7, #12]
 8007b0e:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	693a      	ldr	r2, [r7, #16]
 8007b14:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8007b16:	bf00      	nop
 8007b18:	3718      	adds	r7, #24
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}

08007b1e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007b1e:	b580      	push	{r7, lr}
 8007b20:	b084      	sub	sp, #16
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d101      	bne.n	8007b30 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	e09d      	b.n	8007c6c <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d108      	bne.n	8007b4a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b40:	d009      	beq.n	8007b56 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	61da      	str	r2, [r3, #28]
 8007b48:	e005      	b.n	8007b56 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2200      	movs	r2, #0
 8007b54:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007b62:	b2db      	uxtb	r3, r3
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d106      	bne.n	8007b76 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f7fb fa47 	bl	8003004 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2202      	movs	r2, #2
 8007b7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b8c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	68db      	ldr	r3, [r3, #12]
 8007b92:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007b96:	d902      	bls.n	8007b9e <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	60fb      	str	r3, [r7, #12]
 8007b9c:	e002      	b.n	8007ba4 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007b9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007ba2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	68db      	ldr	r3, [r3, #12]
 8007ba8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007bac:	d007      	beq.n	8007bbe <HAL_SPI_Init+0xa0>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	68db      	ldr	r3, [r3, #12]
 8007bb2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007bb6:	d002      	beq.n	8007bbe <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	689b      	ldr	r3, [r3, #8]
 8007bca:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007bce:	431a      	orrs	r2, r3
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	691b      	ldr	r3, [r3, #16]
 8007bd4:	f003 0302 	and.w	r3, r3, #2
 8007bd8:	431a      	orrs	r2, r3
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	695b      	ldr	r3, [r3, #20]
 8007bde:	f003 0301 	and.w	r3, r3, #1
 8007be2:	431a      	orrs	r2, r3
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	699b      	ldr	r3, [r3, #24]
 8007be8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007bec:	431a      	orrs	r2, r3
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	69db      	ldr	r3, [r3, #28]
 8007bf2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007bf6:	431a      	orrs	r2, r3
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6a1b      	ldr	r3, [r3, #32]
 8007bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c00:	ea42 0103 	orr.w	r1, r2, r3
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c08:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	430a      	orrs	r2, r1
 8007c12:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	699b      	ldr	r3, [r3, #24]
 8007c18:	0c1b      	lsrs	r3, r3, #16
 8007c1a:	f003 0204 	and.w	r2, r3, #4
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c22:	f003 0310 	and.w	r3, r3, #16
 8007c26:	431a      	orrs	r2, r3
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c2c:	f003 0308 	and.w	r3, r3, #8
 8007c30:	431a      	orrs	r2, r3
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	68db      	ldr	r3, [r3, #12]
 8007c36:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007c3a:	ea42 0103 	orr.w	r1, r2, r3
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	430a      	orrs	r2, r1
 8007c4a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	69da      	ldr	r2, [r3, #28]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c5a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2201      	movs	r2, #1
 8007c66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007c6a:	2300      	movs	r3, #0
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3710      	adds	r7, #16
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}

08007c74 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b088      	sub	sp, #32
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	60f8      	str	r0, [r7, #12]
 8007c7c:	60b9      	str	r1, [r7, #8]
 8007c7e:	603b      	str	r3, [r7, #0]
 8007c80:	4613      	mov	r3, r2
 8007c82:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007c84:	2300      	movs	r3, #0
 8007c86:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	d101      	bne.n	8007c96 <HAL_SPI_Transmit+0x22>
 8007c92:	2302      	movs	r3, #2
 8007c94:	e158      	b.n	8007f48 <HAL_SPI_Transmit+0x2d4>
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2201      	movs	r2, #1
 8007c9a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c9e:	f7fb ffe3 	bl	8003c68 <HAL_GetTick>
 8007ca2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007ca4:	88fb      	ldrh	r3, [r7, #6]
 8007ca6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007cae:	b2db      	uxtb	r3, r3
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d002      	beq.n	8007cba <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007cb4:	2302      	movs	r3, #2
 8007cb6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007cb8:	e13d      	b.n	8007f36 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d002      	beq.n	8007cc6 <HAL_SPI_Transmit+0x52>
 8007cc0:	88fb      	ldrh	r3, [r7, #6]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d102      	bne.n	8007ccc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007cca:	e134      	b.n	8007f36 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2203      	movs	r2, #3
 8007cd0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	68ba      	ldr	r2, [r7, #8]
 8007cde:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	88fa      	ldrh	r2, [r7, #6]
 8007ce4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	88fa      	ldrh	r2, [r7, #6]
 8007cea:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2200      	movs	r2, #0
 8007d06:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d16:	d10f      	bne.n	8007d38 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d26:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007d36:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d42:	2b40      	cmp	r3, #64	; 0x40
 8007d44:	d007      	beq.n	8007d56 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	681a      	ldr	r2, [r3, #0]
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d54:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	68db      	ldr	r3, [r3, #12]
 8007d5a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007d5e:	d94b      	bls.n	8007df8 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d002      	beq.n	8007d6e <HAL_SPI_Transmit+0xfa>
 8007d68:	8afb      	ldrh	r3, [r7, #22]
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	d13e      	bne.n	8007dec <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d72:	881a      	ldrh	r2, [r3, #0]
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d7e:	1c9a      	adds	r2, r3, #2
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	3b01      	subs	r3, #1
 8007d8c:	b29a      	uxth	r2, r3
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007d92:	e02b      	b.n	8007dec <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	689b      	ldr	r3, [r3, #8]
 8007d9a:	f003 0302 	and.w	r3, r3, #2
 8007d9e:	2b02      	cmp	r3, #2
 8007da0:	d112      	bne.n	8007dc8 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007da6:	881a      	ldrh	r2, [r3, #0]
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007db2:	1c9a      	adds	r2, r3, #2
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	3b01      	subs	r3, #1
 8007dc0:	b29a      	uxth	r2, r3
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007dc6:	e011      	b.n	8007dec <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007dc8:	f7fb ff4e 	bl	8003c68 <HAL_GetTick>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	69bb      	ldr	r3, [r7, #24]
 8007dd0:	1ad3      	subs	r3, r2, r3
 8007dd2:	683a      	ldr	r2, [r7, #0]
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	d803      	bhi.n	8007de0 <HAL_SPI_Transmit+0x16c>
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dde:	d102      	bne.n	8007de6 <HAL_SPI_Transmit+0x172>
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d102      	bne.n	8007dec <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8007de6:	2303      	movs	r3, #3
 8007de8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007dea:	e0a4      	b.n	8007f36 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d1ce      	bne.n	8007d94 <HAL_SPI_Transmit+0x120>
 8007df6:	e07c      	b.n	8007ef2 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d002      	beq.n	8007e06 <HAL_SPI_Transmit+0x192>
 8007e00:	8afb      	ldrh	r3, [r7, #22]
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d170      	bne.n	8007ee8 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d912      	bls.n	8007e36 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e14:	881a      	ldrh	r2, [r3, #0]
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e20:	1c9a      	adds	r2, r3, #2
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	3b02      	subs	r3, #2
 8007e2e:	b29a      	uxth	r2, r3
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007e34:	e058      	b.n	8007ee8 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	330c      	adds	r3, #12
 8007e40:	7812      	ldrb	r2, [r2, #0]
 8007e42:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e48:	1c5a      	adds	r2, r3, #1
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e52:	b29b      	uxth	r3, r3
 8007e54:	3b01      	subs	r3, #1
 8007e56:	b29a      	uxth	r2, r3
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007e5c:	e044      	b.n	8007ee8 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	f003 0302 	and.w	r3, r3, #2
 8007e68:	2b02      	cmp	r3, #2
 8007e6a:	d12b      	bne.n	8007ec4 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	d912      	bls.n	8007e9c <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e7a:	881a      	ldrh	r2, [r3, #0]
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e86:	1c9a      	adds	r2, r3, #2
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e90:	b29b      	uxth	r3, r3
 8007e92:	3b02      	subs	r3, #2
 8007e94:	b29a      	uxth	r2, r3
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007e9a:	e025      	b.n	8007ee8 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	330c      	adds	r3, #12
 8007ea6:	7812      	ldrb	r2, [r2, #0]
 8007ea8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eae:	1c5a      	adds	r2, r3, #1
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	3b01      	subs	r3, #1
 8007ebc:	b29a      	uxth	r2, r3
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007ec2:	e011      	b.n	8007ee8 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ec4:	f7fb fed0 	bl	8003c68 <HAL_GetTick>
 8007ec8:	4602      	mov	r2, r0
 8007eca:	69bb      	ldr	r3, [r7, #24]
 8007ecc:	1ad3      	subs	r3, r2, r3
 8007ece:	683a      	ldr	r2, [r7, #0]
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d803      	bhi.n	8007edc <HAL_SPI_Transmit+0x268>
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eda:	d102      	bne.n	8007ee2 <HAL_SPI_Transmit+0x26e>
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d102      	bne.n	8007ee8 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8007ee2:	2303      	movs	r3, #3
 8007ee4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007ee6:	e026      	b.n	8007f36 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d1b5      	bne.n	8007e5e <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007ef2:	69ba      	ldr	r2, [r7, #24]
 8007ef4:	6839      	ldr	r1, [r7, #0]
 8007ef6:	68f8      	ldr	r0, [r7, #12]
 8007ef8:	f000 fce0 	bl	80088bc <SPI_EndRxTxTransaction>
 8007efc:	4603      	mov	r3, r0
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d002      	beq.n	8007f08 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2220      	movs	r2, #32
 8007f06:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	689b      	ldr	r3, [r3, #8]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d10a      	bne.n	8007f26 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f10:	2300      	movs	r3, #0
 8007f12:	613b      	str	r3, [r7, #16]
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	68db      	ldr	r3, [r3, #12]
 8007f1a:	613b      	str	r3, [r7, #16]
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	689b      	ldr	r3, [r3, #8]
 8007f22:	613b      	str	r3, [r7, #16]
 8007f24:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d002      	beq.n	8007f34 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	77fb      	strb	r3, [r7, #31]
 8007f32:	e000      	b.n	8007f36 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8007f34:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2201      	movs	r2, #1
 8007f3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2200      	movs	r2, #0
 8007f42:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007f46:	7ffb      	ldrb	r3, [r7, #31]
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3720      	adds	r7, #32
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b088      	sub	sp, #32
 8007f54:	af02      	add	r7, sp, #8
 8007f56:	60f8      	str	r0, [r7, #12]
 8007f58:	60b9      	str	r1, [r7, #8]
 8007f5a:	603b      	str	r3, [r7, #0]
 8007f5c:	4613      	mov	r3, r2
 8007f5e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007f60:	2300      	movs	r3, #0
 8007f62:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f6c:	d112      	bne.n	8007f94 <HAL_SPI_Receive+0x44>
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d10e      	bne.n	8007f94 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2204      	movs	r2, #4
 8007f7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007f7e:	88fa      	ldrh	r2, [r7, #6]
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	9300      	str	r3, [sp, #0]
 8007f84:	4613      	mov	r3, r2
 8007f86:	68ba      	ldr	r2, [r7, #8]
 8007f88:	68b9      	ldr	r1, [r7, #8]
 8007f8a:	68f8      	ldr	r0, [r7, #12]
 8007f8c:	f000 f910 	bl	80081b0 <HAL_SPI_TransmitReceive>
 8007f90:	4603      	mov	r3, r0
 8007f92:	e109      	b.n	80081a8 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d101      	bne.n	8007fa2 <HAL_SPI_Receive+0x52>
 8007f9e:	2302      	movs	r3, #2
 8007fa0:	e102      	b.n	80081a8 <HAL_SPI_Receive+0x258>
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007faa:	f7fb fe5d 	bl	8003c68 <HAL_GetTick>
 8007fae:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	d002      	beq.n	8007fc2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007fbc:	2302      	movs	r3, #2
 8007fbe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007fc0:	e0e9      	b.n	8008196 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d002      	beq.n	8007fce <HAL_SPI_Receive+0x7e>
 8007fc8:	88fb      	ldrh	r3, [r7, #6]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d102      	bne.n	8007fd4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007fd2:	e0e0      	b.n	8008196 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	2204      	movs	r2, #4
 8007fd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	68ba      	ldr	r2, [r7, #8]
 8007fe6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	88fa      	ldrh	r2, [r7, #6]
 8007fec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	88fa      	ldrh	r2, [r7, #6]
 8007ff4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2200      	movs	r2, #0
 8008002:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2200      	movs	r2, #0
 8008008:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2200      	movs	r2, #0
 800800e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2200      	movs	r2, #0
 8008014:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	68db      	ldr	r3, [r3, #12]
 800801a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800801e:	d908      	bls.n	8008032 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	685a      	ldr	r2, [r3, #4]
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800802e:	605a      	str	r2, [r3, #4]
 8008030:	e007      	b.n	8008042 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	685a      	ldr	r2, [r3, #4]
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008040:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	689b      	ldr	r3, [r3, #8]
 8008046:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800804a:	d10f      	bne.n	800806c <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800805a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	681a      	ldr	r2, [r3, #0]
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800806a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008076:	2b40      	cmp	r3, #64	; 0x40
 8008078:	d007      	beq.n	800808a <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	681a      	ldr	r2, [r3, #0]
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008088:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	68db      	ldr	r3, [r3, #12]
 800808e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008092:	d867      	bhi.n	8008164 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008094:	e030      	b.n	80080f8 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	689b      	ldr	r3, [r3, #8]
 800809c:	f003 0301 	and.w	r3, r3, #1
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d117      	bne.n	80080d4 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f103 020c 	add.w	r2, r3, #12
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080b0:	7812      	ldrb	r2, [r2, #0]
 80080b2:	b2d2      	uxtb	r2, r2
 80080b4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ba:	1c5a      	adds	r2, r3, #1
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	3b01      	subs	r3, #1
 80080ca:	b29a      	uxth	r2, r3
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80080d2:	e011      	b.n	80080f8 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80080d4:	f7fb fdc8 	bl	8003c68 <HAL_GetTick>
 80080d8:	4602      	mov	r2, r0
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	1ad3      	subs	r3, r2, r3
 80080de:	683a      	ldr	r2, [r7, #0]
 80080e0:	429a      	cmp	r2, r3
 80080e2:	d803      	bhi.n	80080ec <HAL_SPI_Receive+0x19c>
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ea:	d102      	bne.n	80080f2 <HAL_SPI_Receive+0x1a2>
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d102      	bne.n	80080f8 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80080f2:	2303      	movs	r3, #3
 80080f4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80080f6:	e04e      	b.n	8008196 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80080fe:	b29b      	uxth	r3, r3
 8008100:	2b00      	cmp	r3, #0
 8008102:	d1c8      	bne.n	8008096 <HAL_SPI_Receive+0x146>
 8008104:	e034      	b.n	8008170 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	689b      	ldr	r3, [r3, #8]
 800810c:	f003 0301 	and.w	r3, r3, #1
 8008110:	2b01      	cmp	r3, #1
 8008112:	d115      	bne.n	8008140 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	68da      	ldr	r2, [r3, #12]
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800811e:	b292      	uxth	r2, r2
 8008120:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008126:	1c9a      	adds	r2, r3, #2
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008132:	b29b      	uxth	r3, r3
 8008134:	3b01      	subs	r3, #1
 8008136:	b29a      	uxth	r2, r3
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800813e:	e011      	b.n	8008164 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008140:	f7fb fd92 	bl	8003c68 <HAL_GetTick>
 8008144:	4602      	mov	r2, r0
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	1ad3      	subs	r3, r2, r3
 800814a:	683a      	ldr	r2, [r7, #0]
 800814c:	429a      	cmp	r2, r3
 800814e:	d803      	bhi.n	8008158 <HAL_SPI_Receive+0x208>
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008156:	d102      	bne.n	800815e <HAL_SPI_Receive+0x20e>
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d102      	bne.n	8008164 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800815e:	2303      	movs	r3, #3
 8008160:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008162:	e018      	b.n	8008196 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800816a:	b29b      	uxth	r3, r3
 800816c:	2b00      	cmp	r3, #0
 800816e:	d1ca      	bne.n	8008106 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008170:	693a      	ldr	r2, [r7, #16]
 8008172:	6839      	ldr	r1, [r7, #0]
 8008174:	68f8      	ldr	r0, [r7, #12]
 8008176:	f000 fb49 	bl	800880c <SPI_EndRxTransaction>
 800817a:	4603      	mov	r3, r0
 800817c:	2b00      	cmp	r3, #0
 800817e:	d002      	beq.n	8008186 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2220      	movs	r2, #32
 8008184:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800818a:	2b00      	cmp	r3, #0
 800818c:	d002      	beq.n	8008194 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800818e:	2301      	movs	r3, #1
 8008190:	75fb      	strb	r3, [r7, #23]
 8008192:	e000      	b.n	8008196 <HAL_SPI_Receive+0x246>
  }

error :
 8008194:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2201      	movs	r2, #1
 800819a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2200      	movs	r2, #0
 80081a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80081a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3718      	adds	r7, #24
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}

080081b0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b08a      	sub	sp, #40	; 0x28
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	60f8      	str	r0, [r7, #12]
 80081b8:	60b9      	str	r1, [r7, #8]
 80081ba:	607a      	str	r2, [r7, #4]
 80081bc:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80081be:	2301      	movs	r3, #1
 80081c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80081c2:	2300      	movs	r3, #0
 80081c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80081ce:	2b01      	cmp	r3, #1
 80081d0:	d101      	bne.n	80081d6 <HAL_SPI_TransmitReceive+0x26>
 80081d2:	2302      	movs	r3, #2
 80081d4:	e1fb      	b.n	80085ce <HAL_SPI_TransmitReceive+0x41e>
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2201      	movs	r2, #1
 80081da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80081de:	f7fb fd43 	bl	8003c68 <HAL_GetTick>
 80081e2:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80081ea:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80081f2:	887b      	ldrh	r3, [r7, #2]
 80081f4:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80081f6:	887b      	ldrh	r3, [r7, #2]
 80081f8:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80081fa:	7efb      	ldrb	r3, [r7, #27]
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d00e      	beq.n	800821e <HAL_SPI_TransmitReceive+0x6e>
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008206:	d106      	bne.n	8008216 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	689b      	ldr	r3, [r3, #8]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d102      	bne.n	8008216 <HAL_SPI_TransmitReceive+0x66>
 8008210:	7efb      	ldrb	r3, [r7, #27]
 8008212:	2b04      	cmp	r3, #4
 8008214:	d003      	beq.n	800821e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8008216:	2302      	movs	r3, #2
 8008218:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800821c:	e1cd      	b.n	80085ba <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d005      	beq.n	8008230 <HAL_SPI_TransmitReceive+0x80>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d002      	beq.n	8008230 <HAL_SPI_TransmitReceive+0x80>
 800822a:	887b      	ldrh	r3, [r7, #2]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d103      	bne.n	8008238 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8008230:	2301      	movs	r3, #1
 8008232:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008236:	e1c0      	b.n	80085ba <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800823e:	b2db      	uxtb	r3, r3
 8008240:	2b04      	cmp	r3, #4
 8008242:	d003      	beq.n	800824c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2205      	movs	r2, #5
 8008248:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2200      	movs	r2, #0
 8008250:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	687a      	ldr	r2, [r7, #4]
 8008256:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	887a      	ldrh	r2, [r7, #2]
 800825c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	887a      	ldrh	r2, [r7, #2]
 8008264:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	68ba      	ldr	r2, [r7, #8]
 800826c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	887a      	ldrh	r2, [r7, #2]
 8008272:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	887a      	ldrh	r2, [r7, #2]
 8008278:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2200      	movs	r2, #0
 800827e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2200      	movs	r2, #0
 8008284:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	68db      	ldr	r3, [r3, #12]
 800828a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800828e:	d802      	bhi.n	8008296 <HAL_SPI_TransmitReceive+0xe6>
 8008290:	8a3b      	ldrh	r3, [r7, #16]
 8008292:	2b01      	cmp	r3, #1
 8008294:	d908      	bls.n	80082a8 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	685a      	ldr	r2, [r3, #4]
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80082a4:	605a      	str	r2, [r3, #4]
 80082a6:	e007      	b.n	80082b8 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	685a      	ldr	r2, [r3, #4]
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80082b6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082c2:	2b40      	cmp	r3, #64	; 0x40
 80082c4:	d007      	beq.n	80082d6 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	681a      	ldr	r2, [r3, #0]
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082d4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	68db      	ldr	r3, [r3, #12]
 80082da:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80082de:	d97c      	bls.n	80083da <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d002      	beq.n	80082ee <HAL_SPI_TransmitReceive+0x13e>
 80082e8:	8a7b      	ldrh	r3, [r7, #18]
 80082ea:	2b01      	cmp	r3, #1
 80082ec:	d169      	bne.n	80083c2 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082f2:	881a      	ldrh	r2, [r3, #0]
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082fe:	1c9a      	adds	r2, r3, #2
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008308:	b29b      	uxth	r3, r3
 800830a:	3b01      	subs	r3, #1
 800830c:	b29a      	uxth	r2, r3
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008312:	e056      	b.n	80083c2 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	689b      	ldr	r3, [r3, #8]
 800831a:	f003 0302 	and.w	r3, r3, #2
 800831e:	2b02      	cmp	r3, #2
 8008320:	d11b      	bne.n	800835a <HAL_SPI_TransmitReceive+0x1aa>
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008326:	b29b      	uxth	r3, r3
 8008328:	2b00      	cmp	r3, #0
 800832a:	d016      	beq.n	800835a <HAL_SPI_TransmitReceive+0x1aa>
 800832c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832e:	2b01      	cmp	r3, #1
 8008330:	d113      	bne.n	800835a <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008336:	881a      	ldrh	r2, [r3, #0]
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008342:	1c9a      	adds	r2, r3, #2
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800834c:	b29b      	uxth	r3, r3
 800834e:	3b01      	subs	r3, #1
 8008350:	b29a      	uxth	r2, r3
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008356:	2300      	movs	r3, #0
 8008358:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	689b      	ldr	r3, [r3, #8]
 8008360:	f003 0301 	and.w	r3, r3, #1
 8008364:	2b01      	cmp	r3, #1
 8008366:	d11c      	bne.n	80083a2 <HAL_SPI_TransmitReceive+0x1f2>
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800836e:	b29b      	uxth	r3, r3
 8008370:	2b00      	cmp	r3, #0
 8008372:	d016      	beq.n	80083a2 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	68da      	ldr	r2, [r3, #12]
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800837e:	b292      	uxth	r2, r2
 8008380:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008386:	1c9a      	adds	r2, r3, #2
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008392:	b29b      	uxth	r3, r3
 8008394:	3b01      	subs	r3, #1
 8008396:	b29a      	uxth	r2, r3
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800839e:	2301      	movs	r3, #1
 80083a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80083a2:	f7fb fc61 	bl	8003c68 <HAL_GetTick>
 80083a6:	4602      	mov	r2, r0
 80083a8:	69fb      	ldr	r3, [r7, #28]
 80083aa:	1ad3      	subs	r3, r2, r3
 80083ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083ae:	429a      	cmp	r2, r3
 80083b0:	d807      	bhi.n	80083c2 <HAL_SPI_TransmitReceive+0x212>
 80083b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083b8:	d003      	beq.n	80083c2 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80083ba:	2303      	movs	r3, #3
 80083bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80083c0:	e0fb      	b.n	80085ba <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083c6:	b29b      	uxth	r3, r3
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d1a3      	bne.n	8008314 <HAL_SPI_TransmitReceive+0x164>
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80083d2:	b29b      	uxth	r3, r3
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d19d      	bne.n	8008314 <HAL_SPI_TransmitReceive+0x164>
 80083d8:	e0df      	b.n	800859a <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d003      	beq.n	80083ea <HAL_SPI_TransmitReceive+0x23a>
 80083e2:	8a7b      	ldrh	r3, [r7, #18]
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	f040 80cb 	bne.w	8008580 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	d912      	bls.n	800841a <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083f8:	881a      	ldrh	r2, [r3, #0]
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008404:	1c9a      	adds	r2, r3, #2
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800840e:	b29b      	uxth	r3, r3
 8008410:	3b02      	subs	r3, #2
 8008412:	b29a      	uxth	r2, r3
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008418:	e0b2      	b.n	8008580 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	330c      	adds	r3, #12
 8008424:	7812      	ldrb	r2, [r2, #0]
 8008426:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800842c:	1c5a      	adds	r2, r3, #1
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008436:	b29b      	uxth	r3, r3
 8008438:	3b01      	subs	r3, #1
 800843a:	b29a      	uxth	r2, r3
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008440:	e09e      	b.n	8008580 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	689b      	ldr	r3, [r3, #8]
 8008448:	f003 0302 	and.w	r3, r3, #2
 800844c:	2b02      	cmp	r3, #2
 800844e:	d134      	bne.n	80084ba <HAL_SPI_TransmitReceive+0x30a>
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008454:	b29b      	uxth	r3, r3
 8008456:	2b00      	cmp	r3, #0
 8008458:	d02f      	beq.n	80084ba <HAL_SPI_TransmitReceive+0x30a>
 800845a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845c:	2b01      	cmp	r3, #1
 800845e:	d12c      	bne.n	80084ba <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008464:	b29b      	uxth	r3, r3
 8008466:	2b01      	cmp	r3, #1
 8008468:	d912      	bls.n	8008490 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800846e:	881a      	ldrh	r2, [r3, #0]
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800847a:	1c9a      	adds	r2, r3, #2
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008484:	b29b      	uxth	r3, r3
 8008486:	3b02      	subs	r3, #2
 8008488:	b29a      	uxth	r2, r3
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800848e:	e012      	b.n	80084b6 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	330c      	adds	r3, #12
 800849a:	7812      	ldrb	r2, [r2, #0]
 800849c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084a2:	1c5a      	adds	r2, r3, #1
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084ac:	b29b      	uxth	r3, r3
 80084ae:	3b01      	subs	r3, #1
 80084b0:	b29a      	uxth	r2, r3
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80084b6:	2300      	movs	r3, #0
 80084b8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	689b      	ldr	r3, [r3, #8]
 80084c0:	f003 0301 	and.w	r3, r3, #1
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d148      	bne.n	800855a <HAL_SPI_TransmitReceive+0x3aa>
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80084ce:	b29b      	uxth	r3, r3
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d042      	beq.n	800855a <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80084da:	b29b      	uxth	r3, r3
 80084dc:	2b01      	cmp	r3, #1
 80084de:	d923      	bls.n	8008528 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	68da      	ldr	r2, [r3, #12]
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ea:	b292      	uxth	r2, r2
 80084ec:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084f2:	1c9a      	adds	r2, r3, #2
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80084fe:	b29b      	uxth	r3, r3
 8008500:	3b02      	subs	r3, #2
 8008502:	b29a      	uxth	r2, r3
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008510:	b29b      	uxth	r3, r3
 8008512:	2b01      	cmp	r3, #1
 8008514:	d81f      	bhi.n	8008556 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	685a      	ldr	r2, [r3, #4]
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008524:	605a      	str	r2, [r3, #4]
 8008526:	e016      	b.n	8008556 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f103 020c 	add.w	r2, r3, #12
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008534:	7812      	ldrb	r2, [r2, #0]
 8008536:	b2d2      	uxtb	r2, r2
 8008538:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800853e:	1c5a      	adds	r2, r3, #1
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800854a:	b29b      	uxth	r3, r3
 800854c:	3b01      	subs	r3, #1
 800854e:	b29a      	uxth	r2, r3
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008556:	2301      	movs	r3, #1
 8008558:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800855a:	f7fb fb85 	bl	8003c68 <HAL_GetTick>
 800855e:	4602      	mov	r2, r0
 8008560:	69fb      	ldr	r3, [r7, #28]
 8008562:	1ad3      	subs	r3, r2, r3
 8008564:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008566:	429a      	cmp	r2, r3
 8008568:	d803      	bhi.n	8008572 <HAL_SPI_TransmitReceive+0x3c2>
 800856a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800856c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008570:	d102      	bne.n	8008578 <HAL_SPI_TransmitReceive+0x3c8>
 8008572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008574:	2b00      	cmp	r3, #0
 8008576:	d103      	bne.n	8008580 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8008578:	2303      	movs	r3, #3
 800857a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800857e:	e01c      	b.n	80085ba <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008584:	b29b      	uxth	r3, r3
 8008586:	2b00      	cmp	r3, #0
 8008588:	f47f af5b 	bne.w	8008442 <HAL_SPI_TransmitReceive+0x292>
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008592:	b29b      	uxth	r3, r3
 8008594:	2b00      	cmp	r3, #0
 8008596:	f47f af54 	bne.w	8008442 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800859a:	69fa      	ldr	r2, [r7, #28]
 800859c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800859e:	68f8      	ldr	r0, [r7, #12]
 80085a0:	f000 f98c 	bl	80088bc <SPI_EndRxTxTransaction>
 80085a4:	4603      	mov	r3, r0
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d006      	beq.n	80085b8 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80085aa:	2301      	movs	r3, #1
 80085ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2220      	movs	r2, #32
 80085b4:	661a      	str	r2, [r3, #96]	; 0x60
 80085b6:	e000      	b.n	80085ba <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80085b8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2201      	movs	r2, #1
 80085be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2200      	movs	r2, #0
 80085c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80085ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3728      	adds	r7, #40	; 0x28
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}
	...

080085d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b088      	sub	sp, #32
 80085dc:	af00      	add	r7, sp, #0
 80085de:	60f8      	str	r0, [r7, #12]
 80085e0:	60b9      	str	r1, [r7, #8]
 80085e2:	603b      	str	r3, [r7, #0]
 80085e4:	4613      	mov	r3, r2
 80085e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80085e8:	f7fb fb3e 	bl	8003c68 <HAL_GetTick>
 80085ec:	4602      	mov	r2, r0
 80085ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085f0:	1a9b      	subs	r3, r3, r2
 80085f2:	683a      	ldr	r2, [r7, #0]
 80085f4:	4413      	add	r3, r2
 80085f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80085f8:	f7fb fb36 	bl	8003c68 <HAL_GetTick>
 80085fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80085fe:	4b39      	ldr	r3, [pc, #228]	; (80086e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	015b      	lsls	r3, r3, #5
 8008604:	0d1b      	lsrs	r3, r3, #20
 8008606:	69fa      	ldr	r2, [r7, #28]
 8008608:	fb02 f303 	mul.w	r3, r2, r3
 800860c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800860e:	e054      	b.n	80086ba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008616:	d050      	beq.n	80086ba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008618:	f7fb fb26 	bl	8003c68 <HAL_GetTick>
 800861c:	4602      	mov	r2, r0
 800861e:	69bb      	ldr	r3, [r7, #24]
 8008620:	1ad3      	subs	r3, r2, r3
 8008622:	69fa      	ldr	r2, [r7, #28]
 8008624:	429a      	cmp	r2, r3
 8008626:	d902      	bls.n	800862e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008628:	69fb      	ldr	r3, [r7, #28]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d13d      	bne.n	80086aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	685a      	ldr	r2, [r3, #4]
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800863c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008646:	d111      	bne.n	800866c <SPI_WaitFlagStateUntilTimeout+0x94>
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	689b      	ldr	r3, [r3, #8]
 800864c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008650:	d004      	beq.n	800865c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	689b      	ldr	r3, [r3, #8]
 8008656:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800865a:	d107      	bne.n	800866c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	681a      	ldr	r2, [r3, #0]
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800866a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008670:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008674:	d10f      	bne.n	8008696 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	681a      	ldr	r2, [r3, #0]
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008684:	601a      	str	r2, [r3, #0]
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	681a      	ldr	r2, [r3, #0]
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008694:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2201      	movs	r2, #1
 800869a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2200      	movs	r2, #0
 80086a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80086a6:	2303      	movs	r3, #3
 80086a8:	e017      	b.n	80086da <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d101      	bne.n	80086b4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80086b0:	2300      	movs	r3, #0
 80086b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	3b01      	subs	r3, #1
 80086b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	689a      	ldr	r2, [r3, #8]
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	4013      	ands	r3, r2
 80086c4:	68ba      	ldr	r2, [r7, #8]
 80086c6:	429a      	cmp	r2, r3
 80086c8:	bf0c      	ite	eq
 80086ca:	2301      	moveq	r3, #1
 80086cc:	2300      	movne	r3, #0
 80086ce:	b2db      	uxtb	r3, r3
 80086d0:	461a      	mov	r2, r3
 80086d2:	79fb      	ldrb	r3, [r7, #7]
 80086d4:	429a      	cmp	r2, r3
 80086d6:	d19b      	bne.n	8008610 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80086d8:	2300      	movs	r3, #0
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3720      	adds	r7, #32
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}
 80086e2:	bf00      	nop
 80086e4:	20000004 	.word	0x20000004

080086e8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b088      	sub	sp, #32
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	60f8      	str	r0, [r7, #12]
 80086f0:	60b9      	str	r1, [r7, #8]
 80086f2:	607a      	str	r2, [r7, #4]
 80086f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80086f6:	f7fb fab7 	bl	8003c68 <HAL_GetTick>
 80086fa:	4602      	mov	r2, r0
 80086fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086fe:	1a9b      	subs	r3, r3, r2
 8008700:	683a      	ldr	r2, [r7, #0]
 8008702:	4413      	add	r3, r2
 8008704:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008706:	f7fb faaf 	bl	8003c68 <HAL_GetTick>
 800870a:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800870c:	4b3e      	ldr	r3, [pc, #248]	; (8008808 <SPI_WaitFifoStateUntilTimeout+0x120>)
 800870e:	681a      	ldr	r2, [r3, #0]
 8008710:	4613      	mov	r3, r2
 8008712:	009b      	lsls	r3, r3, #2
 8008714:	4413      	add	r3, r2
 8008716:	00da      	lsls	r2, r3, #3
 8008718:	1ad3      	subs	r3, r2, r3
 800871a:	0d1b      	lsrs	r3, r3, #20
 800871c:	69fa      	ldr	r2, [r7, #28]
 800871e:	fb02 f303 	mul.w	r3, r2, r3
 8008722:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8008724:	e062      	b.n	80087ec <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800872c:	d109      	bne.n	8008742 <SPI_WaitFifoStateUntilTimeout+0x5a>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d106      	bne.n	8008742 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	330c      	adds	r3, #12
 800873a:	781b      	ldrb	r3, [r3, #0]
 800873c:	b2db      	uxtb	r3, r3
 800873e:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8008740:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008748:	d050      	beq.n	80087ec <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800874a:	f7fb fa8d 	bl	8003c68 <HAL_GetTick>
 800874e:	4602      	mov	r2, r0
 8008750:	69bb      	ldr	r3, [r7, #24]
 8008752:	1ad3      	subs	r3, r2, r3
 8008754:	69fa      	ldr	r2, [r7, #28]
 8008756:	429a      	cmp	r2, r3
 8008758:	d902      	bls.n	8008760 <SPI_WaitFifoStateUntilTimeout+0x78>
 800875a:	69fb      	ldr	r3, [r7, #28]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d13d      	bne.n	80087dc <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	685a      	ldr	r2, [r3, #4]
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800876e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008778:	d111      	bne.n	800879e <SPI_WaitFifoStateUntilTimeout+0xb6>
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	689b      	ldr	r3, [r3, #8]
 800877e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008782:	d004      	beq.n	800878e <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	689b      	ldr	r3, [r3, #8]
 8008788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800878c:	d107      	bne.n	800879e <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	681a      	ldr	r2, [r3, #0]
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800879c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087a6:	d10f      	bne.n	80087c8 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	681a      	ldr	r2, [r3, #0]
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80087b6:	601a      	str	r2, [r3, #0]
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	681a      	ldr	r2, [r3, #0]
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80087c6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	2201      	movs	r2, #1
 80087cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2200      	movs	r2, #0
 80087d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80087d8:	2303      	movs	r3, #3
 80087da:	e010      	b.n	80087fe <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d101      	bne.n	80087e6 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 80087e2:	2300      	movs	r3, #0
 80087e4:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	3b01      	subs	r3, #1
 80087ea:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	689a      	ldr	r2, [r3, #8]
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	4013      	ands	r3, r2
 80087f6:	687a      	ldr	r2, [r7, #4]
 80087f8:	429a      	cmp	r2, r3
 80087fa:	d194      	bne.n	8008726 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80087fc:	2300      	movs	r3, #0
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3720      	adds	r7, #32
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}
 8008806:	bf00      	nop
 8008808:	20000004 	.word	0x20000004

0800880c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b086      	sub	sp, #24
 8008810:	af02      	add	r7, sp, #8
 8008812:	60f8      	str	r0, [r7, #12]
 8008814:	60b9      	str	r1, [r7, #8]
 8008816:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008820:	d111      	bne.n	8008846 <SPI_EndRxTransaction+0x3a>
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	689b      	ldr	r3, [r3, #8]
 8008826:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800882a:	d004      	beq.n	8008836 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	689b      	ldr	r3, [r3, #8]
 8008830:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008834:	d107      	bne.n	8008846 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	681a      	ldr	r2, [r3, #0]
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008844:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	9300      	str	r3, [sp, #0]
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	2200      	movs	r2, #0
 800884e:	2180      	movs	r1, #128	; 0x80
 8008850:	68f8      	ldr	r0, [r7, #12]
 8008852:	f7ff fec1 	bl	80085d8 <SPI_WaitFlagStateUntilTimeout>
 8008856:	4603      	mov	r3, r0
 8008858:	2b00      	cmp	r3, #0
 800885a:	d007      	beq.n	800886c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008860:	f043 0220 	orr.w	r2, r3, #32
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008868:	2303      	movs	r3, #3
 800886a:	e023      	b.n	80088b4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	685b      	ldr	r3, [r3, #4]
 8008870:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008874:	d11d      	bne.n	80088b2 <SPI_EndRxTransaction+0xa6>
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	689b      	ldr	r3, [r3, #8]
 800887a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800887e:	d004      	beq.n	800888a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	689b      	ldr	r3, [r3, #8]
 8008884:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008888:	d113      	bne.n	80088b2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	9300      	str	r3, [sp, #0]
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	2200      	movs	r2, #0
 8008892:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008896:	68f8      	ldr	r0, [r7, #12]
 8008898:	f7ff ff26 	bl	80086e8 <SPI_WaitFifoStateUntilTimeout>
 800889c:	4603      	mov	r3, r0
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d007      	beq.n	80088b2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088a6:	f043 0220 	orr.w	r2, r3, #32
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80088ae:	2303      	movs	r3, #3
 80088b0:	e000      	b.n	80088b4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80088b2:	2300      	movs	r3, #0
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3710      	adds	r7, #16
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}

080088bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b086      	sub	sp, #24
 80088c0:	af02      	add	r7, sp, #8
 80088c2:	60f8      	str	r0, [r7, #12]
 80088c4:	60b9      	str	r1, [r7, #8]
 80088c6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	9300      	str	r3, [sp, #0]
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	2200      	movs	r2, #0
 80088d0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80088d4:	68f8      	ldr	r0, [r7, #12]
 80088d6:	f7ff ff07 	bl	80086e8 <SPI_WaitFifoStateUntilTimeout>
 80088da:	4603      	mov	r3, r0
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d007      	beq.n	80088f0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088e4:	f043 0220 	orr.w	r2, r3, #32
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80088ec:	2303      	movs	r3, #3
 80088ee:	e027      	b.n	8008940 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	9300      	str	r3, [sp, #0]
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	2200      	movs	r2, #0
 80088f8:	2180      	movs	r1, #128	; 0x80
 80088fa:	68f8      	ldr	r0, [r7, #12]
 80088fc:	f7ff fe6c 	bl	80085d8 <SPI_WaitFlagStateUntilTimeout>
 8008900:	4603      	mov	r3, r0
 8008902:	2b00      	cmp	r3, #0
 8008904:	d007      	beq.n	8008916 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800890a:	f043 0220 	orr.w	r2, r3, #32
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008912:	2303      	movs	r3, #3
 8008914:	e014      	b.n	8008940 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	9300      	str	r3, [sp, #0]
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	2200      	movs	r2, #0
 800891e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008922:	68f8      	ldr	r0, [r7, #12]
 8008924:	f7ff fee0 	bl	80086e8 <SPI_WaitFifoStateUntilTimeout>
 8008928:	4603      	mov	r3, r0
 800892a:	2b00      	cmp	r3, #0
 800892c:	d007      	beq.n	800893e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008932:	f043 0220 	orr.w	r2, r3, #32
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800893a:	2303      	movs	r3, #3
 800893c:	e000      	b.n	8008940 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800893e:	2300      	movs	r3, #0
}
 8008940:	4618      	mov	r0, r3
 8008942:	3710      	adds	r7, #16
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}

08008948 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b082      	sub	sp, #8
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d101      	bne.n	800895a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008956:	2301      	movs	r3, #1
 8008958:	e049      	b.n	80089ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008960:	b2db      	uxtb	r3, r3
 8008962:	2b00      	cmp	r3, #0
 8008964:	d106      	bne.n	8008974 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2200      	movs	r2, #0
 800896a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f7fa fc20 	bl	80031b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2202      	movs	r2, #2
 8008978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681a      	ldr	r2, [r3, #0]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	3304      	adds	r3, #4
 8008984:	4619      	mov	r1, r3
 8008986:	4610      	mov	r0, r2
 8008988:	f000 fd4c 	bl	8009424 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2201      	movs	r2, #1
 8008990:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2201      	movs	r2, #1
 8008998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2201      	movs	r2, #1
 80089a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2201      	movs	r2, #1
 80089a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2201      	movs	r2, #1
 80089b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2201      	movs	r2, #1
 80089b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2201      	movs	r2, #1
 80089c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2201      	movs	r2, #1
 80089c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2201      	movs	r2, #1
 80089d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2201      	movs	r2, #1
 80089d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2201      	movs	r2, #1
 80089e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2201      	movs	r2, #1
 80089e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80089ec:	2300      	movs	r3, #0
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3708      	adds	r7, #8
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}
	...

080089f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b085      	sub	sp, #20
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a06:	b2db      	uxtb	r3, r3
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	d001      	beq.n	8008a10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	e054      	b.n	8008aba <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2202      	movs	r2, #2
 8008a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	68da      	ldr	r2, [r3, #12]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f042 0201 	orr.w	r2, r2, #1
 8008a26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a26      	ldr	r2, [pc, #152]	; (8008ac8 <HAL_TIM_Base_Start_IT+0xd0>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d022      	beq.n	8008a78 <HAL_TIM_Base_Start_IT+0x80>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a3a:	d01d      	beq.n	8008a78 <HAL_TIM_Base_Start_IT+0x80>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4a22      	ldr	r2, [pc, #136]	; (8008acc <HAL_TIM_Base_Start_IT+0xd4>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d018      	beq.n	8008a78 <HAL_TIM_Base_Start_IT+0x80>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4a21      	ldr	r2, [pc, #132]	; (8008ad0 <HAL_TIM_Base_Start_IT+0xd8>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d013      	beq.n	8008a78 <HAL_TIM_Base_Start_IT+0x80>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4a1f      	ldr	r2, [pc, #124]	; (8008ad4 <HAL_TIM_Base_Start_IT+0xdc>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d00e      	beq.n	8008a78 <HAL_TIM_Base_Start_IT+0x80>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4a1e      	ldr	r2, [pc, #120]	; (8008ad8 <HAL_TIM_Base_Start_IT+0xe0>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d009      	beq.n	8008a78 <HAL_TIM_Base_Start_IT+0x80>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4a1c      	ldr	r2, [pc, #112]	; (8008adc <HAL_TIM_Base_Start_IT+0xe4>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d004      	beq.n	8008a78 <HAL_TIM_Base_Start_IT+0x80>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4a1b      	ldr	r2, [pc, #108]	; (8008ae0 <HAL_TIM_Base_Start_IT+0xe8>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d115      	bne.n	8008aa4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	689a      	ldr	r2, [r3, #8]
 8008a7e:	4b19      	ldr	r3, [pc, #100]	; (8008ae4 <HAL_TIM_Base_Start_IT+0xec>)
 8008a80:	4013      	ands	r3, r2
 8008a82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	2b06      	cmp	r3, #6
 8008a88:	d015      	beq.n	8008ab6 <HAL_TIM_Base_Start_IT+0xbe>
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a90:	d011      	beq.n	8008ab6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	681a      	ldr	r2, [r3, #0]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f042 0201 	orr.w	r2, r2, #1
 8008aa0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008aa2:	e008      	b.n	8008ab6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	681a      	ldr	r2, [r3, #0]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f042 0201 	orr.w	r2, r2, #1
 8008ab2:	601a      	str	r2, [r3, #0]
 8008ab4:	e000      	b.n	8008ab8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ab6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008ab8:	2300      	movs	r3, #0
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3714      	adds	r7, #20
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac4:	4770      	bx	lr
 8008ac6:	bf00      	nop
 8008ac8:	40010000 	.word	0x40010000
 8008acc:	40000400 	.word	0x40000400
 8008ad0:	40000800 	.word	0x40000800
 8008ad4:	40000c00 	.word	0x40000c00
 8008ad8:	40010400 	.word	0x40010400
 8008adc:	40014000 	.word	0x40014000
 8008ae0:	40001800 	.word	0x40001800
 8008ae4:	00010007 	.word	0x00010007

08008ae8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b083      	sub	sp, #12
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	68da      	ldr	r2, [r3, #12]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f022 0201 	bic.w	r2, r2, #1
 8008afe:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	6a1a      	ldr	r2, [r3, #32]
 8008b06:	f241 1311 	movw	r3, #4369	; 0x1111
 8008b0a:	4013      	ands	r3, r2
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d10f      	bne.n	8008b30 <HAL_TIM_Base_Stop_IT+0x48>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	6a1a      	ldr	r2, [r3, #32]
 8008b16:	f240 4344 	movw	r3, #1092	; 0x444
 8008b1a:	4013      	ands	r3, r2
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d107      	bne.n	8008b30 <HAL_TIM_Base_Stop_IT+0x48>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	681a      	ldr	r2, [r3, #0]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f022 0201 	bic.w	r2, r2, #1
 8008b2e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2201      	movs	r2, #1
 8008b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008b38:	2300      	movs	r3, #0
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	370c      	adds	r7, #12
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b44:	4770      	bx	lr

08008b46 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008b46:	b580      	push	{r7, lr}
 8008b48:	b082      	sub	sp, #8
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d101      	bne.n	8008b58 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008b54:	2301      	movs	r3, #1
 8008b56:	e049      	b.n	8008bec <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b5e:	b2db      	uxtb	r3, r3
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d106      	bne.n	8008b72 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2200      	movs	r2, #0
 8008b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f7fa faef 	bl	8003150 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2202      	movs	r2, #2
 8008b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681a      	ldr	r2, [r3, #0]
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	3304      	adds	r3, #4
 8008b82:	4619      	mov	r1, r3
 8008b84:	4610      	mov	r0, r2
 8008b86:	f000 fc4d 	bl	8009424 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2201      	movs	r2, #1
 8008b8e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2201      	movs	r2, #1
 8008b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2201      	movs	r2, #1
 8008b9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2201      	movs	r2, #1
 8008ba6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2201      	movs	r2, #1
 8008bae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2201      	movs	r2, #1
 8008bb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2201      	movs	r2, #1
 8008bbe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2201      	movs	r2, #1
 8008bc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2201      	movs	r2, #1
 8008bce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2201      	movs	r2, #1
 8008bd6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2201      	movs	r2, #1
 8008bde:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2201      	movs	r2, #1
 8008be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008bea:	2300      	movs	r3, #0
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	3708      	adds	r7, #8
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}

08008bf4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b084      	sub	sp, #16
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d109      	bne.n	8008c18 <HAL_TIM_PWM_Start+0x24>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008c0a:	b2db      	uxtb	r3, r3
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	bf14      	ite	ne
 8008c10:	2301      	movne	r3, #1
 8008c12:	2300      	moveq	r3, #0
 8008c14:	b2db      	uxtb	r3, r3
 8008c16:	e03c      	b.n	8008c92 <HAL_TIM_PWM_Start+0x9e>
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	2b04      	cmp	r3, #4
 8008c1c:	d109      	bne.n	8008c32 <HAL_TIM_PWM_Start+0x3e>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008c24:	b2db      	uxtb	r3, r3
 8008c26:	2b01      	cmp	r3, #1
 8008c28:	bf14      	ite	ne
 8008c2a:	2301      	movne	r3, #1
 8008c2c:	2300      	moveq	r3, #0
 8008c2e:	b2db      	uxtb	r3, r3
 8008c30:	e02f      	b.n	8008c92 <HAL_TIM_PWM_Start+0x9e>
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	2b08      	cmp	r3, #8
 8008c36:	d109      	bne.n	8008c4c <HAL_TIM_PWM_Start+0x58>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008c3e:	b2db      	uxtb	r3, r3
 8008c40:	2b01      	cmp	r3, #1
 8008c42:	bf14      	ite	ne
 8008c44:	2301      	movne	r3, #1
 8008c46:	2300      	moveq	r3, #0
 8008c48:	b2db      	uxtb	r3, r3
 8008c4a:	e022      	b.n	8008c92 <HAL_TIM_PWM_Start+0x9e>
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	2b0c      	cmp	r3, #12
 8008c50:	d109      	bne.n	8008c66 <HAL_TIM_PWM_Start+0x72>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c58:	b2db      	uxtb	r3, r3
 8008c5a:	2b01      	cmp	r3, #1
 8008c5c:	bf14      	ite	ne
 8008c5e:	2301      	movne	r3, #1
 8008c60:	2300      	moveq	r3, #0
 8008c62:	b2db      	uxtb	r3, r3
 8008c64:	e015      	b.n	8008c92 <HAL_TIM_PWM_Start+0x9e>
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	2b10      	cmp	r3, #16
 8008c6a:	d109      	bne.n	8008c80 <HAL_TIM_PWM_Start+0x8c>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008c72:	b2db      	uxtb	r3, r3
 8008c74:	2b01      	cmp	r3, #1
 8008c76:	bf14      	ite	ne
 8008c78:	2301      	movne	r3, #1
 8008c7a:	2300      	moveq	r3, #0
 8008c7c:	b2db      	uxtb	r3, r3
 8008c7e:	e008      	b.n	8008c92 <HAL_TIM_PWM_Start+0x9e>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008c86:	b2db      	uxtb	r3, r3
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	bf14      	ite	ne
 8008c8c:	2301      	movne	r3, #1
 8008c8e:	2300      	moveq	r3, #0
 8008c90:	b2db      	uxtb	r3, r3
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d001      	beq.n	8008c9a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008c96:	2301      	movs	r3, #1
 8008c98:	e092      	b.n	8008dc0 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d104      	bne.n	8008caa <HAL_TIM_PWM_Start+0xb6>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2202      	movs	r2, #2
 8008ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ca8:	e023      	b.n	8008cf2 <HAL_TIM_PWM_Start+0xfe>
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	2b04      	cmp	r3, #4
 8008cae:	d104      	bne.n	8008cba <HAL_TIM_PWM_Start+0xc6>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2202      	movs	r2, #2
 8008cb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008cb8:	e01b      	b.n	8008cf2 <HAL_TIM_PWM_Start+0xfe>
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	2b08      	cmp	r3, #8
 8008cbe:	d104      	bne.n	8008cca <HAL_TIM_PWM_Start+0xd6>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2202      	movs	r2, #2
 8008cc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008cc8:	e013      	b.n	8008cf2 <HAL_TIM_PWM_Start+0xfe>
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	2b0c      	cmp	r3, #12
 8008cce:	d104      	bne.n	8008cda <HAL_TIM_PWM_Start+0xe6>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2202      	movs	r2, #2
 8008cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008cd8:	e00b      	b.n	8008cf2 <HAL_TIM_PWM_Start+0xfe>
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	2b10      	cmp	r3, #16
 8008cde:	d104      	bne.n	8008cea <HAL_TIM_PWM_Start+0xf6>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2202      	movs	r2, #2
 8008ce4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008ce8:	e003      	b.n	8008cf2 <HAL_TIM_PWM_Start+0xfe>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2202      	movs	r2, #2
 8008cee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	6839      	ldr	r1, [r7, #0]
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f000 ff2a 	bl	8009b54 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	4a30      	ldr	r2, [pc, #192]	; (8008dc8 <HAL_TIM_PWM_Start+0x1d4>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d004      	beq.n	8008d14 <HAL_TIM_PWM_Start+0x120>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4a2f      	ldr	r2, [pc, #188]	; (8008dcc <HAL_TIM_PWM_Start+0x1d8>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d101      	bne.n	8008d18 <HAL_TIM_PWM_Start+0x124>
 8008d14:	2301      	movs	r3, #1
 8008d16:	e000      	b.n	8008d1a <HAL_TIM_PWM_Start+0x126>
 8008d18:	2300      	movs	r3, #0
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d007      	beq.n	8008d2e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008d2c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4a25      	ldr	r2, [pc, #148]	; (8008dc8 <HAL_TIM_PWM_Start+0x1d4>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d022      	beq.n	8008d7e <HAL_TIM_PWM_Start+0x18a>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d40:	d01d      	beq.n	8008d7e <HAL_TIM_PWM_Start+0x18a>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4a22      	ldr	r2, [pc, #136]	; (8008dd0 <HAL_TIM_PWM_Start+0x1dc>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d018      	beq.n	8008d7e <HAL_TIM_PWM_Start+0x18a>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4a20      	ldr	r2, [pc, #128]	; (8008dd4 <HAL_TIM_PWM_Start+0x1e0>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d013      	beq.n	8008d7e <HAL_TIM_PWM_Start+0x18a>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4a1f      	ldr	r2, [pc, #124]	; (8008dd8 <HAL_TIM_PWM_Start+0x1e4>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d00e      	beq.n	8008d7e <HAL_TIM_PWM_Start+0x18a>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4a19      	ldr	r2, [pc, #100]	; (8008dcc <HAL_TIM_PWM_Start+0x1d8>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d009      	beq.n	8008d7e <HAL_TIM_PWM_Start+0x18a>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4a1b      	ldr	r2, [pc, #108]	; (8008ddc <HAL_TIM_PWM_Start+0x1e8>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d004      	beq.n	8008d7e <HAL_TIM_PWM_Start+0x18a>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4a19      	ldr	r2, [pc, #100]	; (8008de0 <HAL_TIM_PWM_Start+0x1ec>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d115      	bne.n	8008daa <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	689a      	ldr	r2, [r3, #8]
 8008d84:	4b17      	ldr	r3, [pc, #92]	; (8008de4 <HAL_TIM_PWM_Start+0x1f0>)
 8008d86:	4013      	ands	r3, r2
 8008d88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	2b06      	cmp	r3, #6
 8008d8e:	d015      	beq.n	8008dbc <HAL_TIM_PWM_Start+0x1c8>
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d96:	d011      	beq.n	8008dbc <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	681a      	ldr	r2, [r3, #0]
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f042 0201 	orr.w	r2, r2, #1
 8008da6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008da8:	e008      	b.n	8008dbc <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	681a      	ldr	r2, [r3, #0]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f042 0201 	orr.w	r2, r2, #1
 8008db8:	601a      	str	r2, [r3, #0]
 8008dba:	e000      	b.n	8008dbe <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dbc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008dbe:	2300      	movs	r3, #0
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3710      	adds	r7, #16
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}
 8008dc8:	40010000 	.word	0x40010000
 8008dcc:	40010400 	.word	0x40010400
 8008dd0:	40000400 	.word	0x40000400
 8008dd4:	40000800 	.word	0x40000800
 8008dd8:	40000c00 	.word	0x40000c00
 8008ddc:	40014000 	.word	0x40014000
 8008de0:	40001800 	.word	0x40001800
 8008de4:	00010007 	.word	0x00010007

08008de8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b082      	sub	sp, #8
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	691b      	ldr	r3, [r3, #16]
 8008df6:	f003 0302 	and.w	r3, r3, #2
 8008dfa:	2b02      	cmp	r3, #2
 8008dfc:	d122      	bne.n	8008e44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	68db      	ldr	r3, [r3, #12]
 8008e04:	f003 0302 	and.w	r3, r3, #2
 8008e08:	2b02      	cmp	r3, #2
 8008e0a:	d11b      	bne.n	8008e44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f06f 0202 	mvn.w	r2, #2
 8008e14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2201      	movs	r2, #1
 8008e1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	699b      	ldr	r3, [r3, #24]
 8008e22:	f003 0303 	and.w	r3, r3, #3
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d003      	beq.n	8008e32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f000 fadc 	bl	80093e8 <HAL_TIM_IC_CaptureCallback>
 8008e30:	e005      	b.n	8008e3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f000 face 	bl	80093d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f000 fadf 	bl	80093fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2200      	movs	r2, #0
 8008e42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	691b      	ldr	r3, [r3, #16]
 8008e4a:	f003 0304 	and.w	r3, r3, #4
 8008e4e:	2b04      	cmp	r3, #4
 8008e50:	d122      	bne.n	8008e98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	68db      	ldr	r3, [r3, #12]
 8008e58:	f003 0304 	and.w	r3, r3, #4
 8008e5c:	2b04      	cmp	r3, #4
 8008e5e:	d11b      	bne.n	8008e98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f06f 0204 	mvn.w	r2, #4
 8008e68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2202      	movs	r2, #2
 8008e6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	699b      	ldr	r3, [r3, #24]
 8008e76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d003      	beq.n	8008e86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f000 fab2 	bl	80093e8 <HAL_TIM_IC_CaptureCallback>
 8008e84:	e005      	b.n	8008e92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 faa4 	bl	80093d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f000 fab5 	bl	80093fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2200      	movs	r2, #0
 8008e96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	691b      	ldr	r3, [r3, #16]
 8008e9e:	f003 0308 	and.w	r3, r3, #8
 8008ea2:	2b08      	cmp	r3, #8
 8008ea4:	d122      	bne.n	8008eec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	68db      	ldr	r3, [r3, #12]
 8008eac:	f003 0308 	and.w	r3, r3, #8
 8008eb0:	2b08      	cmp	r3, #8
 8008eb2:	d11b      	bne.n	8008eec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f06f 0208 	mvn.w	r2, #8
 8008ebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2204      	movs	r2, #4
 8008ec2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	69db      	ldr	r3, [r3, #28]
 8008eca:	f003 0303 	and.w	r3, r3, #3
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d003      	beq.n	8008eda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f000 fa88 	bl	80093e8 <HAL_TIM_IC_CaptureCallback>
 8008ed8:	e005      	b.n	8008ee6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f000 fa7a 	bl	80093d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f000 fa8b 	bl	80093fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	691b      	ldr	r3, [r3, #16]
 8008ef2:	f003 0310 	and.w	r3, r3, #16
 8008ef6:	2b10      	cmp	r3, #16
 8008ef8:	d122      	bne.n	8008f40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	68db      	ldr	r3, [r3, #12]
 8008f00:	f003 0310 	and.w	r3, r3, #16
 8008f04:	2b10      	cmp	r3, #16
 8008f06:	d11b      	bne.n	8008f40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f06f 0210 	mvn.w	r2, #16
 8008f10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2208      	movs	r2, #8
 8008f16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	69db      	ldr	r3, [r3, #28]
 8008f1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d003      	beq.n	8008f2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 fa5e 	bl	80093e8 <HAL_TIM_IC_CaptureCallback>
 8008f2c:	e005      	b.n	8008f3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f000 fa50 	bl	80093d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f000 fa61 	bl	80093fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	691b      	ldr	r3, [r3, #16]
 8008f46:	f003 0301 	and.w	r3, r3, #1
 8008f4a:	2b01      	cmp	r3, #1
 8008f4c:	d10e      	bne.n	8008f6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	68db      	ldr	r3, [r3, #12]
 8008f54:	f003 0301 	and.w	r3, r3, #1
 8008f58:	2b01      	cmp	r3, #1
 8008f5a:	d107      	bne.n	8008f6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f06f 0201 	mvn.w	r2, #1
 8008f64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f7f8 f812 	bl	8000f90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	691b      	ldr	r3, [r3, #16]
 8008f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f76:	2b80      	cmp	r3, #128	; 0x80
 8008f78:	d10e      	bne.n	8008f98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	68db      	ldr	r3, [r3, #12]
 8008f80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f84:	2b80      	cmp	r3, #128	; 0x80
 8008f86:	d107      	bne.n	8008f98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008f90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f000 ff1a 	bl	8009dcc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	691b      	ldr	r3, [r3, #16]
 8008f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fa6:	d10e      	bne.n	8008fc6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	68db      	ldr	r3, [r3, #12]
 8008fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fb2:	2b80      	cmp	r3, #128	; 0x80
 8008fb4:	d107      	bne.n	8008fc6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008fbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f000 ff0d 	bl	8009de0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	691b      	ldr	r3, [r3, #16]
 8008fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fd0:	2b40      	cmp	r3, #64	; 0x40
 8008fd2:	d10e      	bne.n	8008ff2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	68db      	ldr	r3, [r3, #12]
 8008fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fde:	2b40      	cmp	r3, #64	; 0x40
 8008fe0:	d107      	bne.n	8008ff2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008fea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f000 fa0f 	bl	8009410 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	691b      	ldr	r3, [r3, #16]
 8008ff8:	f003 0320 	and.w	r3, r3, #32
 8008ffc:	2b20      	cmp	r3, #32
 8008ffe:	d10e      	bne.n	800901e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	68db      	ldr	r3, [r3, #12]
 8009006:	f003 0320 	and.w	r3, r3, #32
 800900a:	2b20      	cmp	r3, #32
 800900c:	d107      	bne.n	800901e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f06f 0220 	mvn.w	r2, #32
 8009016:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f000 fecd 	bl	8009db8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800901e:	bf00      	nop
 8009020:	3708      	adds	r7, #8
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}
	...

08009028 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b084      	sub	sp, #16
 800902c:	af00      	add	r7, sp, #0
 800902e:	60f8      	str	r0, [r7, #12]
 8009030:	60b9      	str	r1, [r7, #8]
 8009032:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800903a:	2b01      	cmp	r3, #1
 800903c:	d101      	bne.n	8009042 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800903e:	2302      	movs	r3, #2
 8009040:	e0fd      	b.n	800923e <HAL_TIM_PWM_ConfigChannel+0x216>
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	2201      	movs	r2, #1
 8009046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2b14      	cmp	r3, #20
 800904e:	f200 80f0 	bhi.w	8009232 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8009052:	a201      	add	r2, pc, #4	; (adr r2, 8009058 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8009054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009058:	080090ad 	.word	0x080090ad
 800905c:	08009233 	.word	0x08009233
 8009060:	08009233 	.word	0x08009233
 8009064:	08009233 	.word	0x08009233
 8009068:	080090ed 	.word	0x080090ed
 800906c:	08009233 	.word	0x08009233
 8009070:	08009233 	.word	0x08009233
 8009074:	08009233 	.word	0x08009233
 8009078:	0800912f 	.word	0x0800912f
 800907c:	08009233 	.word	0x08009233
 8009080:	08009233 	.word	0x08009233
 8009084:	08009233 	.word	0x08009233
 8009088:	0800916f 	.word	0x0800916f
 800908c:	08009233 	.word	0x08009233
 8009090:	08009233 	.word	0x08009233
 8009094:	08009233 	.word	0x08009233
 8009098:	080091b1 	.word	0x080091b1
 800909c:	08009233 	.word	0x08009233
 80090a0:	08009233 	.word	0x08009233
 80090a4:	08009233 	.word	0x08009233
 80090a8:	080091f1 	.word	0x080091f1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	68b9      	ldr	r1, [r7, #8]
 80090b2:	4618      	mov	r0, r3
 80090b4:	f000 fa56 	bl	8009564 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	699a      	ldr	r2, [r3, #24]
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f042 0208 	orr.w	r2, r2, #8
 80090c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	699a      	ldr	r2, [r3, #24]
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f022 0204 	bic.w	r2, r2, #4
 80090d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	6999      	ldr	r1, [r3, #24]
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	691a      	ldr	r2, [r3, #16]
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	430a      	orrs	r2, r1
 80090e8:	619a      	str	r2, [r3, #24]
      break;
 80090ea:	e0a3      	b.n	8009234 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	68b9      	ldr	r1, [r7, #8]
 80090f2:	4618      	mov	r0, r3
 80090f4:	f000 faa8 	bl	8009648 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	699a      	ldr	r2, [r3, #24]
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009106:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	699a      	ldr	r2, [r3, #24]
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009116:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	6999      	ldr	r1, [r3, #24]
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	691b      	ldr	r3, [r3, #16]
 8009122:	021a      	lsls	r2, r3, #8
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	430a      	orrs	r2, r1
 800912a:	619a      	str	r2, [r3, #24]
      break;
 800912c:	e082      	b.n	8009234 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	68b9      	ldr	r1, [r7, #8]
 8009134:	4618      	mov	r0, r3
 8009136:	f000 faff 	bl	8009738 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	69da      	ldr	r2, [r3, #28]
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f042 0208 	orr.w	r2, r2, #8
 8009148:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	69da      	ldr	r2, [r3, #28]
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f022 0204 	bic.w	r2, r2, #4
 8009158:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	69d9      	ldr	r1, [r3, #28]
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	691a      	ldr	r2, [r3, #16]
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	430a      	orrs	r2, r1
 800916a:	61da      	str	r2, [r3, #28]
      break;
 800916c:	e062      	b.n	8009234 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	68b9      	ldr	r1, [r7, #8]
 8009174:	4618      	mov	r0, r3
 8009176:	f000 fb55 	bl	8009824 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	69da      	ldr	r2, [r3, #28]
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009188:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	69da      	ldr	r2, [r3, #28]
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009198:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	69d9      	ldr	r1, [r3, #28]
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	691b      	ldr	r3, [r3, #16]
 80091a4:	021a      	lsls	r2, r3, #8
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	430a      	orrs	r2, r1
 80091ac:	61da      	str	r2, [r3, #28]
      break;
 80091ae:	e041      	b.n	8009234 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	68b9      	ldr	r1, [r7, #8]
 80091b6:	4618      	mov	r0, r3
 80091b8:	f000 fb8c 	bl	80098d4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f042 0208 	orr.w	r2, r2, #8
 80091ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f022 0204 	bic.w	r2, r2, #4
 80091da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	691a      	ldr	r2, [r3, #16]
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	430a      	orrs	r2, r1
 80091ec:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80091ee:	e021      	b.n	8009234 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	68b9      	ldr	r1, [r7, #8]
 80091f6:	4618      	mov	r0, r3
 80091f8:	f000 fbbe 	bl	8009978 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800920a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800921a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	691b      	ldr	r3, [r3, #16]
 8009226:	021a      	lsls	r2, r3, #8
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	430a      	orrs	r2, r1
 800922e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009230:	e000      	b.n	8009234 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8009232:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	2200      	movs	r2, #0
 8009238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800923c:	2300      	movs	r3, #0
}
 800923e:	4618      	mov	r0, r3
 8009240:	3710      	adds	r7, #16
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}
 8009246:	bf00      	nop

08009248 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b084      	sub	sp, #16
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009258:	2b01      	cmp	r3, #1
 800925a:	d101      	bne.n	8009260 <HAL_TIM_ConfigClockSource+0x18>
 800925c:	2302      	movs	r3, #2
 800925e:	e0b3      	b.n	80093c8 <HAL_TIM_ConfigClockSource+0x180>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2201      	movs	r2, #1
 8009264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2202      	movs	r2, #2
 800926c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	689b      	ldr	r3, [r3, #8]
 8009276:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009278:	68fa      	ldr	r2, [r7, #12]
 800927a:	4b55      	ldr	r3, [pc, #340]	; (80093d0 <HAL_TIM_ConfigClockSource+0x188>)
 800927c:	4013      	ands	r3, r2
 800927e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009286:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	68fa      	ldr	r2, [r7, #12]
 800928e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009298:	d03e      	beq.n	8009318 <HAL_TIM_ConfigClockSource+0xd0>
 800929a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800929e:	f200 8087 	bhi.w	80093b0 <HAL_TIM_ConfigClockSource+0x168>
 80092a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092a6:	f000 8085 	beq.w	80093b4 <HAL_TIM_ConfigClockSource+0x16c>
 80092aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092ae:	d87f      	bhi.n	80093b0 <HAL_TIM_ConfigClockSource+0x168>
 80092b0:	2b70      	cmp	r3, #112	; 0x70
 80092b2:	d01a      	beq.n	80092ea <HAL_TIM_ConfigClockSource+0xa2>
 80092b4:	2b70      	cmp	r3, #112	; 0x70
 80092b6:	d87b      	bhi.n	80093b0 <HAL_TIM_ConfigClockSource+0x168>
 80092b8:	2b60      	cmp	r3, #96	; 0x60
 80092ba:	d050      	beq.n	800935e <HAL_TIM_ConfigClockSource+0x116>
 80092bc:	2b60      	cmp	r3, #96	; 0x60
 80092be:	d877      	bhi.n	80093b0 <HAL_TIM_ConfigClockSource+0x168>
 80092c0:	2b50      	cmp	r3, #80	; 0x50
 80092c2:	d03c      	beq.n	800933e <HAL_TIM_ConfigClockSource+0xf6>
 80092c4:	2b50      	cmp	r3, #80	; 0x50
 80092c6:	d873      	bhi.n	80093b0 <HAL_TIM_ConfigClockSource+0x168>
 80092c8:	2b40      	cmp	r3, #64	; 0x40
 80092ca:	d058      	beq.n	800937e <HAL_TIM_ConfigClockSource+0x136>
 80092cc:	2b40      	cmp	r3, #64	; 0x40
 80092ce:	d86f      	bhi.n	80093b0 <HAL_TIM_ConfigClockSource+0x168>
 80092d0:	2b30      	cmp	r3, #48	; 0x30
 80092d2:	d064      	beq.n	800939e <HAL_TIM_ConfigClockSource+0x156>
 80092d4:	2b30      	cmp	r3, #48	; 0x30
 80092d6:	d86b      	bhi.n	80093b0 <HAL_TIM_ConfigClockSource+0x168>
 80092d8:	2b20      	cmp	r3, #32
 80092da:	d060      	beq.n	800939e <HAL_TIM_ConfigClockSource+0x156>
 80092dc:	2b20      	cmp	r3, #32
 80092de:	d867      	bhi.n	80093b0 <HAL_TIM_ConfigClockSource+0x168>
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d05c      	beq.n	800939e <HAL_TIM_ConfigClockSource+0x156>
 80092e4:	2b10      	cmp	r3, #16
 80092e6:	d05a      	beq.n	800939e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80092e8:	e062      	b.n	80093b0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6818      	ldr	r0, [r3, #0]
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	6899      	ldr	r1, [r3, #8]
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	685a      	ldr	r2, [r3, #4]
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	68db      	ldr	r3, [r3, #12]
 80092fa:	f000 fc0b 	bl	8009b14 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	689b      	ldr	r3, [r3, #8]
 8009304:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800930c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	68fa      	ldr	r2, [r7, #12]
 8009314:	609a      	str	r2, [r3, #8]
      break;
 8009316:	e04e      	b.n	80093b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6818      	ldr	r0, [r3, #0]
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	6899      	ldr	r1, [r3, #8]
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	685a      	ldr	r2, [r3, #4]
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	68db      	ldr	r3, [r3, #12]
 8009328:	f000 fbf4 	bl	8009b14 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	689a      	ldr	r2, [r3, #8]
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800933a:	609a      	str	r2, [r3, #8]
      break;
 800933c:	e03b      	b.n	80093b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6818      	ldr	r0, [r3, #0]
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	6859      	ldr	r1, [r3, #4]
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	68db      	ldr	r3, [r3, #12]
 800934a:	461a      	mov	r2, r3
 800934c:	f000 fb68 	bl	8009a20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	2150      	movs	r1, #80	; 0x50
 8009356:	4618      	mov	r0, r3
 8009358:	f000 fbc1 	bl	8009ade <TIM_ITRx_SetConfig>
      break;
 800935c:	e02b      	b.n	80093b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6818      	ldr	r0, [r3, #0]
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	6859      	ldr	r1, [r3, #4]
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	68db      	ldr	r3, [r3, #12]
 800936a:	461a      	mov	r2, r3
 800936c:	f000 fb87 	bl	8009a7e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	2160      	movs	r1, #96	; 0x60
 8009376:	4618      	mov	r0, r3
 8009378:	f000 fbb1 	bl	8009ade <TIM_ITRx_SetConfig>
      break;
 800937c:	e01b      	b.n	80093b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6818      	ldr	r0, [r3, #0]
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	6859      	ldr	r1, [r3, #4]
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	68db      	ldr	r3, [r3, #12]
 800938a:	461a      	mov	r2, r3
 800938c:	f000 fb48 	bl	8009a20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	2140      	movs	r1, #64	; 0x40
 8009396:	4618      	mov	r0, r3
 8009398:	f000 fba1 	bl	8009ade <TIM_ITRx_SetConfig>
      break;
 800939c:	e00b      	b.n	80093b6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681a      	ldr	r2, [r3, #0]
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	4619      	mov	r1, r3
 80093a8:	4610      	mov	r0, r2
 80093aa:	f000 fb98 	bl	8009ade <TIM_ITRx_SetConfig>
        break;
 80093ae:	e002      	b.n	80093b6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80093b0:	bf00      	nop
 80093b2:	e000      	b.n	80093b6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80093b4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2201      	movs	r2, #1
 80093ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2200      	movs	r2, #0
 80093c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80093c6:	2300      	movs	r3, #0
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	3710      	adds	r7, #16
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}
 80093d0:	fffeff88 	.word	0xfffeff88

080093d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b083      	sub	sp, #12
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80093dc:	bf00      	nop
 80093de:	370c      	adds	r7, #12
 80093e0:	46bd      	mov	sp, r7
 80093e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e6:	4770      	bx	lr

080093e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80093e8:	b480      	push	{r7}
 80093ea:	b083      	sub	sp, #12
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80093f0:	bf00      	nop
 80093f2:	370c      	adds	r7, #12
 80093f4:	46bd      	mov	sp, r7
 80093f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fa:	4770      	bx	lr

080093fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b083      	sub	sp, #12
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009404:	bf00      	nop
 8009406:	370c      	adds	r7, #12
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr

08009410 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009410:	b480      	push	{r7}
 8009412:	b083      	sub	sp, #12
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009418:	bf00      	nop
 800941a:	370c      	adds	r7, #12
 800941c:	46bd      	mov	sp, r7
 800941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009422:	4770      	bx	lr

08009424 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009424:	b480      	push	{r7}
 8009426:	b085      	sub	sp, #20
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	4a40      	ldr	r2, [pc, #256]	; (8009538 <TIM_Base_SetConfig+0x114>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d013      	beq.n	8009464 <TIM_Base_SetConfig+0x40>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009442:	d00f      	beq.n	8009464 <TIM_Base_SetConfig+0x40>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	4a3d      	ldr	r2, [pc, #244]	; (800953c <TIM_Base_SetConfig+0x118>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d00b      	beq.n	8009464 <TIM_Base_SetConfig+0x40>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	4a3c      	ldr	r2, [pc, #240]	; (8009540 <TIM_Base_SetConfig+0x11c>)
 8009450:	4293      	cmp	r3, r2
 8009452:	d007      	beq.n	8009464 <TIM_Base_SetConfig+0x40>
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	4a3b      	ldr	r2, [pc, #236]	; (8009544 <TIM_Base_SetConfig+0x120>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d003      	beq.n	8009464 <TIM_Base_SetConfig+0x40>
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	4a3a      	ldr	r2, [pc, #232]	; (8009548 <TIM_Base_SetConfig+0x124>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d108      	bne.n	8009476 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800946a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	685b      	ldr	r3, [r3, #4]
 8009470:	68fa      	ldr	r2, [r7, #12]
 8009472:	4313      	orrs	r3, r2
 8009474:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	4a2f      	ldr	r2, [pc, #188]	; (8009538 <TIM_Base_SetConfig+0x114>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d02b      	beq.n	80094d6 <TIM_Base_SetConfig+0xb2>
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009484:	d027      	beq.n	80094d6 <TIM_Base_SetConfig+0xb2>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	4a2c      	ldr	r2, [pc, #176]	; (800953c <TIM_Base_SetConfig+0x118>)
 800948a:	4293      	cmp	r3, r2
 800948c:	d023      	beq.n	80094d6 <TIM_Base_SetConfig+0xb2>
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	4a2b      	ldr	r2, [pc, #172]	; (8009540 <TIM_Base_SetConfig+0x11c>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d01f      	beq.n	80094d6 <TIM_Base_SetConfig+0xb2>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	4a2a      	ldr	r2, [pc, #168]	; (8009544 <TIM_Base_SetConfig+0x120>)
 800949a:	4293      	cmp	r3, r2
 800949c:	d01b      	beq.n	80094d6 <TIM_Base_SetConfig+0xb2>
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	4a29      	ldr	r2, [pc, #164]	; (8009548 <TIM_Base_SetConfig+0x124>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d017      	beq.n	80094d6 <TIM_Base_SetConfig+0xb2>
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	4a28      	ldr	r2, [pc, #160]	; (800954c <TIM_Base_SetConfig+0x128>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d013      	beq.n	80094d6 <TIM_Base_SetConfig+0xb2>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	4a27      	ldr	r2, [pc, #156]	; (8009550 <TIM_Base_SetConfig+0x12c>)
 80094b2:	4293      	cmp	r3, r2
 80094b4:	d00f      	beq.n	80094d6 <TIM_Base_SetConfig+0xb2>
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	4a26      	ldr	r2, [pc, #152]	; (8009554 <TIM_Base_SetConfig+0x130>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d00b      	beq.n	80094d6 <TIM_Base_SetConfig+0xb2>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	4a25      	ldr	r2, [pc, #148]	; (8009558 <TIM_Base_SetConfig+0x134>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d007      	beq.n	80094d6 <TIM_Base_SetConfig+0xb2>
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	4a24      	ldr	r2, [pc, #144]	; (800955c <TIM_Base_SetConfig+0x138>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d003      	beq.n	80094d6 <TIM_Base_SetConfig+0xb2>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	4a23      	ldr	r2, [pc, #140]	; (8009560 <TIM_Base_SetConfig+0x13c>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d108      	bne.n	80094e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	68db      	ldr	r3, [r3, #12]
 80094e2:	68fa      	ldr	r2, [r7, #12]
 80094e4:	4313      	orrs	r3, r2
 80094e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	695b      	ldr	r3, [r3, #20]
 80094f2:	4313      	orrs	r3, r2
 80094f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	68fa      	ldr	r2, [r7, #12]
 80094fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	689a      	ldr	r2, [r3, #8]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	681a      	ldr	r2, [r3, #0]
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	4a0a      	ldr	r2, [pc, #40]	; (8009538 <TIM_Base_SetConfig+0x114>)
 8009510:	4293      	cmp	r3, r2
 8009512:	d003      	beq.n	800951c <TIM_Base_SetConfig+0xf8>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	4a0c      	ldr	r2, [pc, #48]	; (8009548 <TIM_Base_SetConfig+0x124>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d103      	bne.n	8009524 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	691a      	ldr	r2, [r3, #16]
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2201      	movs	r2, #1
 8009528:	615a      	str	r2, [r3, #20]
}
 800952a:	bf00      	nop
 800952c:	3714      	adds	r7, #20
 800952e:	46bd      	mov	sp, r7
 8009530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009534:	4770      	bx	lr
 8009536:	bf00      	nop
 8009538:	40010000 	.word	0x40010000
 800953c:	40000400 	.word	0x40000400
 8009540:	40000800 	.word	0x40000800
 8009544:	40000c00 	.word	0x40000c00
 8009548:	40010400 	.word	0x40010400
 800954c:	40014000 	.word	0x40014000
 8009550:	40014400 	.word	0x40014400
 8009554:	40014800 	.word	0x40014800
 8009558:	40001800 	.word	0x40001800
 800955c:	40001c00 	.word	0x40001c00
 8009560:	40002000 	.word	0x40002000

08009564 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009564:	b480      	push	{r7}
 8009566:	b087      	sub	sp, #28
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
 800956c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6a1b      	ldr	r3, [r3, #32]
 8009572:	f023 0201 	bic.w	r2, r3, #1
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6a1b      	ldr	r3, [r3, #32]
 800957e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	699b      	ldr	r3, [r3, #24]
 800958a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800958c:	68fa      	ldr	r2, [r7, #12]
 800958e:	4b2b      	ldr	r3, [pc, #172]	; (800963c <TIM_OC1_SetConfig+0xd8>)
 8009590:	4013      	ands	r3, r2
 8009592:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	f023 0303 	bic.w	r3, r3, #3
 800959a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	68fa      	ldr	r2, [r7, #12]
 80095a2:	4313      	orrs	r3, r2
 80095a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	f023 0302 	bic.w	r3, r3, #2
 80095ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	689b      	ldr	r3, [r3, #8]
 80095b2:	697a      	ldr	r2, [r7, #20]
 80095b4:	4313      	orrs	r3, r2
 80095b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	4a21      	ldr	r2, [pc, #132]	; (8009640 <TIM_OC1_SetConfig+0xdc>)
 80095bc:	4293      	cmp	r3, r2
 80095be:	d003      	beq.n	80095c8 <TIM_OC1_SetConfig+0x64>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	4a20      	ldr	r2, [pc, #128]	; (8009644 <TIM_OC1_SetConfig+0xe0>)
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d10c      	bne.n	80095e2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80095c8:	697b      	ldr	r3, [r7, #20]
 80095ca:	f023 0308 	bic.w	r3, r3, #8
 80095ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	68db      	ldr	r3, [r3, #12]
 80095d4:	697a      	ldr	r2, [r7, #20]
 80095d6:	4313      	orrs	r3, r2
 80095d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	f023 0304 	bic.w	r3, r3, #4
 80095e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	4a16      	ldr	r2, [pc, #88]	; (8009640 <TIM_OC1_SetConfig+0xdc>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d003      	beq.n	80095f2 <TIM_OC1_SetConfig+0x8e>
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	4a15      	ldr	r2, [pc, #84]	; (8009644 <TIM_OC1_SetConfig+0xe0>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d111      	bne.n	8009616 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80095f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80095fa:	693b      	ldr	r3, [r7, #16]
 80095fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009600:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	695b      	ldr	r3, [r3, #20]
 8009606:	693a      	ldr	r2, [r7, #16]
 8009608:	4313      	orrs	r3, r2
 800960a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	699b      	ldr	r3, [r3, #24]
 8009610:	693a      	ldr	r2, [r7, #16]
 8009612:	4313      	orrs	r3, r2
 8009614:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	693a      	ldr	r2, [r7, #16]
 800961a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	68fa      	ldr	r2, [r7, #12]
 8009620:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	685a      	ldr	r2, [r3, #4]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	697a      	ldr	r2, [r7, #20]
 800962e:	621a      	str	r2, [r3, #32]
}
 8009630:	bf00      	nop
 8009632:	371c      	adds	r7, #28
 8009634:	46bd      	mov	sp, r7
 8009636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963a:	4770      	bx	lr
 800963c:	fffeff8f 	.word	0xfffeff8f
 8009640:	40010000 	.word	0x40010000
 8009644:	40010400 	.word	0x40010400

08009648 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009648:	b480      	push	{r7}
 800964a:	b087      	sub	sp, #28
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6a1b      	ldr	r3, [r3, #32]
 8009656:	f023 0210 	bic.w	r2, r3, #16
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6a1b      	ldr	r3, [r3, #32]
 8009662:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	685b      	ldr	r3, [r3, #4]
 8009668:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	699b      	ldr	r3, [r3, #24]
 800966e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009670:	68fa      	ldr	r2, [r7, #12]
 8009672:	4b2e      	ldr	r3, [pc, #184]	; (800972c <TIM_OC2_SetConfig+0xe4>)
 8009674:	4013      	ands	r3, r2
 8009676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800967e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	021b      	lsls	r3, r3, #8
 8009686:	68fa      	ldr	r2, [r7, #12]
 8009688:	4313      	orrs	r3, r2
 800968a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	f023 0320 	bic.w	r3, r3, #32
 8009692:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	689b      	ldr	r3, [r3, #8]
 8009698:	011b      	lsls	r3, r3, #4
 800969a:	697a      	ldr	r2, [r7, #20]
 800969c:	4313      	orrs	r3, r2
 800969e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	4a23      	ldr	r2, [pc, #140]	; (8009730 <TIM_OC2_SetConfig+0xe8>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d003      	beq.n	80096b0 <TIM_OC2_SetConfig+0x68>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	4a22      	ldr	r2, [pc, #136]	; (8009734 <TIM_OC2_SetConfig+0xec>)
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d10d      	bne.n	80096cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80096b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	68db      	ldr	r3, [r3, #12]
 80096bc:	011b      	lsls	r3, r3, #4
 80096be:	697a      	ldr	r2, [r7, #20]
 80096c0:	4313      	orrs	r3, r2
 80096c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	4a18      	ldr	r2, [pc, #96]	; (8009730 <TIM_OC2_SetConfig+0xe8>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d003      	beq.n	80096dc <TIM_OC2_SetConfig+0x94>
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	4a17      	ldr	r2, [pc, #92]	; (8009734 <TIM_OC2_SetConfig+0xec>)
 80096d8:	4293      	cmp	r3, r2
 80096da:	d113      	bne.n	8009704 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80096e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80096ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	695b      	ldr	r3, [r3, #20]
 80096f0:	009b      	lsls	r3, r3, #2
 80096f2:	693a      	ldr	r2, [r7, #16]
 80096f4:	4313      	orrs	r3, r2
 80096f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	699b      	ldr	r3, [r3, #24]
 80096fc:	009b      	lsls	r3, r3, #2
 80096fe:	693a      	ldr	r2, [r7, #16]
 8009700:	4313      	orrs	r3, r2
 8009702:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	693a      	ldr	r2, [r7, #16]
 8009708:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	68fa      	ldr	r2, [r7, #12]
 800970e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	685a      	ldr	r2, [r3, #4]
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	697a      	ldr	r2, [r7, #20]
 800971c:	621a      	str	r2, [r3, #32]
}
 800971e:	bf00      	nop
 8009720:	371c      	adds	r7, #28
 8009722:	46bd      	mov	sp, r7
 8009724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009728:	4770      	bx	lr
 800972a:	bf00      	nop
 800972c:	feff8fff 	.word	0xfeff8fff
 8009730:	40010000 	.word	0x40010000
 8009734:	40010400 	.word	0x40010400

08009738 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009738:	b480      	push	{r7}
 800973a:	b087      	sub	sp, #28
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
 8009740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6a1b      	ldr	r3, [r3, #32]
 8009746:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6a1b      	ldr	r3, [r3, #32]
 8009752:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	685b      	ldr	r3, [r3, #4]
 8009758:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	69db      	ldr	r3, [r3, #28]
 800975e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009760:	68fa      	ldr	r2, [r7, #12]
 8009762:	4b2d      	ldr	r3, [pc, #180]	; (8009818 <TIM_OC3_SetConfig+0xe0>)
 8009764:	4013      	ands	r3, r2
 8009766:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	f023 0303 	bic.w	r3, r3, #3
 800976e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	68fa      	ldr	r2, [r7, #12]
 8009776:	4313      	orrs	r3, r2
 8009778:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009780:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	689b      	ldr	r3, [r3, #8]
 8009786:	021b      	lsls	r3, r3, #8
 8009788:	697a      	ldr	r2, [r7, #20]
 800978a:	4313      	orrs	r3, r2
 800978c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	4a22      	ldr	r2, [pc, #136]	; (800981c <TIM_OC3_SetConfig+0xe4>)
 8009792:	4293      	cmp	r3, r2
 8009794:	d003      	beq.n	800979e <TIM_OC3_SetConfig+0x66>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	4a21      	ldr	r2, [pc, #132]	; (8009820 <TIM_OC3_SetConfig+0xe8>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d10d      	bne.n	80097ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80097a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	68db      	ldr	r3, [r3, #12]
 80097aa:	021b      	lsls	r3, r3, #8
 80097ac:	697a      	ldr	r2, [r7, #20]
 80097ae:	4313      	orrs	r3, r2
 80097b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80097b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	4a17      	ldr	r2, [pc, #92]	; (800981c <TIM_OC3_SetConfig+0xe4>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d003      	beq.n	80097ca <TIM_OC3_SetConfig+0x92>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	4a16      	ldr	r2, [pc, #88]	; (8009820 <TIM_OC3_SetConfig+0xe8>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d113      	bne.n	80097f2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80097d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80097d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	695b      	ldr	r3, [r3, #20]
 80097de:	011b      	lsls	r3, r3, #4
 80097e0:	693a      	ldr	r2, [r7, #16]
 80097e2:	4313      	orrs	r3, r2
 80097e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	699b      	ldr	r3, [r3, #24]
 80097ea:	011b      	lsls	r3, r3, #4
 80097ec:	693a      	ldr	r2, [r7, #16]
 80097ee:	4313      	orrs	r3, r2
 80097f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	693a      	ldr	r2, [r7, #16]
 80097f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	68fa      	ldr	r2, [r7, #12]
 80097fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	685a      	ldr	r2, [r3, #4]
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	697a      	ldr	r2, [r7, #20]
 800980a:	621a      	str	r2, [r3, #32]
}
 800980c:	bf00      	nop
 800980e:	371c      	adds	r7, #28
 8009810:	46bd      	mov	sp, r7
 8009812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009816:	4770      	bx	lr
 8009818:	fffeff8f 	.word	0xfffeff8f
 800981c:	40010000 	.word	0x40010000
 8009820:	40010400 	.word	0x40010400

08009824 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009824:	b480      	push	{r7}
 8009826:	b087      	sub	sp, #28
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
 800982c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6a1b      	ldr	r3, [r3, #32]
 8009832:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6a1b      	ldr	r3, [r3, #32]
 800983e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	685b      	ldr	r3, [r3, #4]
 8009844:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	69db      	ldr	r3, [r3, #28]
 800984a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800984c:	68fa      	ldr	r2, [r7, #12]
 800984e:	4b1e      	ldr	r3, [pc, #120]	; (80098c8 <TIM_OC4_SetConfig+0xa4>)
 8009850:	4013      	ands	r3, r2
 8009852:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800985a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	021b      	lsls	r3, r3, #8
 8009862:	68fa      	ldr	r2, [r7, #12]
 8009864:	4313      	orrs	r3, r2
 8009866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800986e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	689b      	ldr	r3, [r3, #8]
 8009874:	031b      	lsls	r3, r3, #12
 8009876:	693a      	ldr	r2, [r7, #16]
 8009878:	4313      	orrs	r3, r2
 800987a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	4a13      	ldr	r2, [pc, #76]	; (80098cc <TIM_OC4_SetConfig+0xa8>)
 8009880:	4293      	cmp	r3, r2
 8009882:	d003      	beq.n	800988c <TIM_OC4_SetConfig+0x68>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	4a12      	ldr	r2, [pc, #72]	; (80098d0 <TIM_OC4_SetConfig+0xac>)
 8009888:	4293      	cmp	r3, r2
 800988a:	d109      	bne.n	80098a0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009892:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	695b      	ldr	r3, [r3, #20]
 8009898:	019b      	lsls	r3, r3, #6
 800989a:	697a      	ldr	r2, [r7, #20]
 800989c:	4313      	orrs	r3, r2
 800989e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	697a      	ldr	r2, [r7, #20]
 80098a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	68fa      	ldr	r2, [r7, #12]
 80098aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	685a      	ldr	r2, [r3, #4]
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	693a      	ldr	r2, [r7, #16]
 80098b8:	621a      	str	r2, [r3, #32]
}
 80098ba:	bf00      	nop
 80098bc:	371c      	adds	r7, #28
 80098be:	46bd      	mov	sp, r7
 80098c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c4:	4770      	bx	lr
 80098c6:	bf00      	nop
 80098c8:	feff8fff 	.word	0xfeff8fff
 80098cc:	40010000 	.word	0x40010000
 80098d0:	40010400 	.word	0x40010400

080098d4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80098d4:	b480      	push	{r7}
 80098d6:	b087      	sub	sp, #28
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
 80098dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6a1b      	ldr	r3, [r3, #32]
 80098e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6a1b      	ldr	r3, [r3, #32]
 80098ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	685b      	ldr	r3, [r3, #4]
 80098f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80098fc:	68fa      	ldr	r2, [r7, #12]
 80098fe:	4b1b      	ldr	r3, [pc, #108]	; (800996c <TIM_OC5_SetConfig+0x98>)
 8009900:	4013      	ands	r3, r2
 8009902:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	68fa      	ldr	r2, [r7, #12]
 800990a:	4313      	orrs	r3, r2
 800990c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009914:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	689b      	ldr	r3, [r3, #8]
 800991a:	041b      	lsls	r3, r3, #16
 800991c:	693a      	ldr	r2, [r7, #16]
 800991e:	4313      	orrs	r3, r2
 8009920:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	4a12      	ldr	r2, [pc, #72]	; (8009970 <TIM_OC5_SetConfig+0x9c>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d003      	beq.n	8009932 <TIM_OC5_SetConfig+0x5e>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	4a11      	ldr	r2, [pc, #68]	; (8009974 <TIM_OC5_SetConfig+0xa0>)
 800992e:	4293      	cmp	r3, r2
 8009930:	d109      	bne.n	8009946 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009932:	697b      	ldr	r3, [r7, #20]
 8009934:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009938:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	695b      	ldr	r3, [r3, #20]
 800993e:	021b      	lsls	r3, r3, #8
 8009940:	697a      	ldr	r2, [r7, #20]
 8009942:	4313      	orrs	r3, r2
 8009944:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	697a      	ldr	r2, [r7, #20]
 800994a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	68fa      	ldr	r2, [r7, #12]
 8009950:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	685a      	ldr	r2, [r3, #4]
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	693a      	ldr	r2, [r7, #16]
 800995e:	621a      	str	r2, [r3, #32]
}
 8009960:	bf00      	nop
 8009962:	371c      	adds	r7, #28
 8009964:	46bd      	mov	sp, r7
 8009966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996a:	4770      	bx	lr
 800996c:	fffeff8f 	.word	0xfffeff8f
 8009970:	40010000 	.word	0x40010000
 8009974:	40010400 	.word	0x40010400

08009978 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009978:	b480      	push	{r7}
 800997a:	b087      	sub	sp, #28
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6a1b      	ldr	r3, [r3, #32]
 8009986:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6a1b      	ldr	r3, [r3, #32]
 8009992:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	685b      	ldr	r3, [r3, #4]
 8009998:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800999e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80099a0:	68fa      	ldr	r2, [r7, #12]
 80099a2:	4b1c      	ldr	r3, [pc, #112]	; (8009a14 <TIM_OC6_SetConfig+0x9c>)
 80099a4:	4013      	ands	r3, r2
 80099a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	021b      	lsls	r3, r3, #8
 80099ae:	68fa      	ldr	r2, [r7, #12]
 80099b0:	4313      	orrs	r3, r2
 80099b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80099b4:	693b      	ldr	r3, [r7, #16]
 80099b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80099ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	689b      	ldr	r3, [r3, #8]
 80099c0:	051b      	lsls	r3, r3, #20
 80099c2:	693a      	ldr	r2, [r7, #16]
 80099c4:	4313      	orrs	r3, r2
 80099c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	4a13      	ldr	r2, [pc, #76]	; (8009a18 <TIM_OC6_SetConfig+0xa0>)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d003      	beq.n	80099d8 <TIM_OC6_SetConfig+0x60>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	4a12      	ldr	r2, [pc, #72]	; (8009a1c <TIM_OC6_SetConfig+0xa4>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d109      	bne.n	80099ec <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80099de:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	695b      	ldr	r3, [r3, #20]
 80099e4:	029b      	lsls	r3, r3, #10
 80099e6:	697a      	ldr	r2, [r7, #20]
 80099e8:	4313      	orrs	r3, r2
 80099ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	697a      	ldr	r2, [r7, #20]
 80099f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	68fa      	ldr	r2, [r7, #12]
 80099f6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	685a      	ldr	r2, [r3, #4]
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	693a      	ldr	r2, [r7, #16]
 8009a04:	621a      	str	r2, [r3, #32]
}
 8009a06:	bf00      	nop
 8009a08:	371c      	adds	r7, #28
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a10:	4770      	bx	lr
 8009a12:	bf00      	nop
 8009a14:	feff8fff 	.word	0xfeff8fff
 8009a18:	40010000 	.word	0x40010000
 8009a1c:	40010400 	.word	0x40010400

08009a20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009a20:	b480      	push	{r7}
 8009a22:	b087      	sub	sp, #28
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	60f8      	str	r0, [r7, #12]
 8009a28:	60b9      	str	r1, [r7, #8]
 8009a2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	6a1b      	ldr	r3, [r3, #32]
 8009a30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	6a1b      	ldr	r3, [r3, #32]
 8009a36:	f023 0201 	bic.w	r2, r3, #1
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	699b      	ldr	r3, [r3, #24]
 8009a42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009a4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	011b      	lsls	r3, r3, #4
 8009a50:	693a      	ldr	r2, [r7, #16]
 8009a52:	4313      	orrs	r3, r2
 8009a54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	f023 030a 	bic.w	r3, r3, #10
 8009a5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009a5e:	697a      	ldr	r2, [r7, #20]
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	4313      	orrs	r3, r2
 8009a64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	693a      	ldr	r2, [r7, #16]
 8009a6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	697a      	ldr	r2, [r7, #20]
 8009a70:	621a      	str	r2, [r3, #32]
}
 8009a72:	bf00      	nop
 8009a74:	371c      	adds	r7, #28
 8009a76:	46bd      	mov	sp, r7
 8009a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7c:	4770      	bx	lr

08009a7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009a7e:	b480      	push	{r7}
 8009a80:	b087      	sub	sp, #28
 8009a82:	af00      	add	r7, sp, #0
 8009a84:	60f8      	str	r0, [r7, #12]
 8009a86:	60b9      	str	r1, [r7, #8]
 8009a88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	6a1b      	ldr	r3, [r3, #32]
 8009a8e:	f023 0210 	bic.w	r2, r3, #16
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	699b      	ldr	r3, [r3, #24]
 8009a9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	6a1b      	ldr	r3, [r3, #32]
 8009aa0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009aa8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	031b      	lsls	r3, r3, #12
 8009aae:	697a      	ldr	r2, [r7, #20]
 8009ab0:	4313      	orrs	r3, r2
 8009ab2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009aba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	011b      	lsls	r3, r3, #4
 8009ac0:	693a      	ldr	r2, [r7, #16]
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	697a      	ldr	r2, [r7, #20]
 8009aca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	693a      	ldr	r2, [r7, #16]
 8009ad0:	621a      	str	r2, [r3, #32]
}
 8009ad2:	bf00      	nop
 8009ad4:	371c      	adds	r7, #28
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009adc:	4770      	bx	lr

08009ade <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009ade:	b480      	push	{r7}
 8009ae0:	b085      	sub	sp, #20
 8009ae2:	af00      	add	r7, sp, #0
 8009ae4:	6078      	str	r0, [r7, #4]
 8009ae6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	689b      	ldr	r3, [r3, #8]
 8009aec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009af4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009af6:	683a      	ldr	r2, [r7, #0]
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	4313      	orrs	r3, r2
 8009afc:	f043 0307 	orr.w	r3, r3, #7
 8009b00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	68fa      	ldr	r2, [r7, #12]
 8009b06:	609a      	str	r2, [r3, #8]
}
 8009b08:	bf00      	nop
 8009b0a:	3714      	adds	r7, #20
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b12:	4770      	bx	lr

08009b14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009b14:	b480      	push	{r7}
 8009b16:	b087      	sub	sp, #28
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	60f8      	str	r0, [r7, #12]
 8009b1c:	60b9      	str	r1, [r7, #8]
 8009b1e:	607a      	str	r2, [r7, #4]
 8009b20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	689b      	ldr	r3, [r3, #8]
 8009b26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009b2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	021a      	lsls	r2, r3, #8
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	431a      	orrs	r2, r3
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	4313      	orrs	r3, r2
 8009b3c:	697a      	ldr	r2, [r7, #20]
 8009b3e:	4313      	orrs	r3, r2
 8009b40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	697a      	ldr	r2, [r7, #20]
 8009b46:	609a      	str	r2, [r3, #8]
}
 8009b48:	bf00      	nop
 8009b4a:	371c      	adds	r7, #28
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b52:	4770      	bx	lr

08009b54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009b54:	b480      	push	{r7}
 8009b56:	b087      	sub	sp, #28
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	60f8      	str	r0, [r7, #12]
 8009b5c:	60b9      	str	r1, [r7, #8]
 8009b5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	f003 031f 	and.w	r3, r3, #31
 8009b66:	2201      	movs	r2, #1
 8009b68:	fa02 f303 	lsl.w	r3, r2, r3
 8009b6c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	6a1a      	ldr	r2, [r3, #32]
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	43db      	mvns	r3, r3
 8009b76:	401a      	ands	r2, r3
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	6a1a      	ldr	r2, [r3, #32]
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	f003 031f 	and.w	r3, r3, #31
 8009b86:	6879      	ldr	r1, [r7, #4]
 8009b88:	fa01 f303 	lsl.w	r3, r1, r3
 8009b8c:	431a      	orrs	r2, r3
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	621a      	str	r2, [r3, #32]
}
 8009b92:	bf00      	nop
 8009b94:	371c      	adds	r7, #28
 8009b96:	46bd      	mov	sp, r7
 8009b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9c:	4770      	bx	lr
	...

08009ba0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	b085      	sub	sp, #20
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009bb0:	2b01      	cmp	r3, #1
 8009bb2:	d101      	bne.n	8009bb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009bb4:	2302      	movs	r3, #2
 8009bb6:	e06d      	b.n	8009c94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2201      	movs	r2, #1
 8009bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2202      	movs	r2, #2
 8009bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	685b      	ldr	r3, [r3, #4]
 8009bce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	689b      	ldr	r3, [r3, #8]
 8009bd6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	4a30      	ldr	r2, [pc, #192]	; (8009ca0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d004      	beq.n	8009bec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	4a2f      	ldr	r2, [pc, #188]	; (8009ca4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d108      	bne.n	8009bfe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009bf2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	685b      	ldr	r3, [r3, #4]
 8009bf8:	68fa      	ldr	r2, [r7, #12]
 8009bfa:	4313      	orrs	r3, r2
 8009bfc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c04:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	68fa      	ldr	r2, [r7, #12]
 8009c0c:	4313      	orrs	r3, r2
 8009c0e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	68fa      	ldr	r2, [r7, #12]
 8009c16:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	4a20      	ldr	r2, [pc, #128]	; (8009ca0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	d022      	beq.n	8009c68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c2a:	d01d      	beq.n	8009c68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	4a1d      	ldr	r2, [pc, #116]	; (8009ca8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d018      	beq.n	8009c68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	4a1c      	ldr	r2, [pc, #112]	; (8009cac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d013      	beq.n	8009c68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	4a1a      	ldr	r2, [pc, #104]	; (8009cb0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009c46:	4293      	cmp	r3, r2
 8009c48:	d00e      	beq.n	8009c68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	4a15      	ldr	r2, [pc, #84]	; (8009ca4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009c50:	4293      	cmp	r3, r2
 8009c52:	d009      	beq.n	8009c68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	4a16      	ldr	r2, [pc, #88]	; (8009cb4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	d004      	beq.n	8009c68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	4a15      	ldr	r2, [pc, #84]	; (8009cb8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009c64:	4293      	cmp	r3, r2
 8009c66:	d10c      	bne.n	8009c82 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c6e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	689b      	ldr	r3, [r3, #8]
 8009c74:	68ba      	ldr	r2, [r7, #8]
 8009c76:	4313      	orrs	r3, r2
 8009c78:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	68ba      	ldr	r2, [r7, #8]
 8009c80:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2201      	movs	r2, #1
 8009c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009c92:	2300      	movs	r3, #0
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	3714      	adds	r7, #20
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9e:	4770      	bx	lr
 8009ca0:	40010000 	.word	0x40010000
 8009ca4:	40010400 	.word	0x40010400
 8009ca8:	40000400 	.word	0x40000400
 8009cac:	40000800 	.word	0x40000800
 8009cb0:	40000c00 	.word	0x40000c00
 8009cb4:	40014000 	.word	0x40014000
 8009cb8:	40001800 	.word	0x40001800

08009cbc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	b085      	sub	sp, #20
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
 8009cc4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009cd0:	2b01      	cmp	r3, #1
 8009cd2:	d101      	bne.n	8009cd8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009cd4:	2302      	movs	r3, #2
 8009cd6:	e065      	b.n	8009da4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2201      	movs	r2, #1
 8009cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	68db      	ldr	r3, [r3, #12]
 8009cea:	4313      	orrs	r3, r2
 8009cec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	689b      	ldr	r3, [r3, #8]
 8009cf8:	4313      	orrs	r3, r2
 8009cfa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	685b      	ldr	r3, [r3, #4]
 8009d06:	4313      	orrs	r3, r2
 8009d08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	4313      	orrs	r3, r2
 8009d16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	691b      	ldr	r3, [r3, #16]
 8009d22:	4313      	orrs	r3, r2
 8009d24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	695b      	ldr	r3, [r3, #20]
 8009d30:	4313      	orrs	r3, r2
 8009d32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d3e:	4313      	orrs	r3, r2
 8009d40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	699b      	ldr	r3, [r3, #24]
 8009d4c:	041b      	lsls	r3, r3, #16
 8009d4e:	4313      	orrs	r3, r2
 8009d50:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	4a16      	ldr	r2, [pc, #88]	; (8009db0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	d004      	beq.n	8009d66 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4a14      	ldr	r2, [pc, #80]	; (8009db4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d115      	bne.n	8009d92 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d70:	051b      	lsls	r3, r3, #20
 8009d72:	4313      	orrs	r3, r2
 8009d74:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	69db      	ldr	r3, [r3, #28]
 8009d80:	4313      	orrs	r3, r2
 8009d82:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	6a1b      	ldr	r3, [r3, #32]
 8009d8e:	4313      	orrs	r3, r2
 8009d90:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	68fa      	ldr	r2, [r7, #12]
 8009d98:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009da2:	2300      	movs	r3, #0
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	3714      	adds	r7, #20
 8009da8:	46bd      	mov	sp, r7
 8009daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dae:	4770      	bx	lr
 8009db0:	40010000 	.word	0x40010000
 8009db4:	40010400 	.word	0x40010400

08009db8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b083      	sub	sp, #12
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009dc0:	bf00      	nop
 8009dc2:	370c      	adds	r7, #12
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dca:	4770      	bx	lr

08009dcc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009dcc:	b480      	push	{r7}
 8009dce:	b083      	sub	sp, #12
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009dd4:	bf00      	nop
 8009dd6:	370c      	adds	r7, #12
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dde:	4770      	bx	lr

08009de0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009de0:	b480      	push	{r7}
 8009de2:	b083      	sub	sp, #12
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009de8:	bf00      	nop
 8009dea:	370c      	adds	r7, #12
 8009dec:	46bd      	mov	sp, r7
 8009dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df2:	4770      	bx	lr

08009df4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b082      	sub	sp, #8
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d101      	bne.n	8009e06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009e02:	2301      	movs	r3, #1
 8009e04:	e040      	b.n	8009e88 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d106      	bne.n	8009e1c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2200      	movs	r2, #0
 8009e12:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f7f9 fa6a 	bl	80032f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2224      	movs	r2, #36	; 0x24
 8009e20:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	681a      	ldr	r2, [r3, #0]
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f022 0201 	bic.w	r2, r2, #1
 8009e30:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	f000 fad2 	bl	800a3dc <UART_SetConfig>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	2b01      	cmp	r3, #1
 8009e3c:	d101      	bne.n	8009e42 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009e3e:	2301      	movs	r3, #1
 8009e40:	e022      	b.n	8009e88 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d002      	beq.n	8009e50 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f000 fd28 	bl	800a8a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	685a      	ldr	r2, [r3, #4]
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009e5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	689a      	ldr	r2, [r3, #8]
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009e6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	681a      	ldr	r2, [r3, #0]
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f042 0201 	orr.w	r2, r2, #1
 8009e7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f000 fdaf 	bl	800a9e4 <UART_CheckIdleState>
 8009e86:	4603      	mov	r3, r0
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	3708      	adds	r7, #8
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}

08009e90 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009e90:	b480      	push	{r7}
 8009e92:	b085      	sub	sp, #20
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	60f8      	str	r0, [r7, #12]
 8009e98:	60b9      	str	r1, [r7, #8]
 8009e9a:	4613      	mov	r3, r2
 8009e9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ea2:	2b20      	cmp	r3, #32
 8009ea4:	d145      	bne.n	8009f32 <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d002      	beq.n	8009eb2 <HAL_UART_Transmit_IT+0x22>
 8009eac:	88fb      	ldrh	r3, [r7, #6]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d101      	bne.n	8009eb6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	e03e      	b.n	8009f34 <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009ebc:	2b01      	cmp	r3, #1
 8009ebe:	d101      	bne.n	8009ec4 <HAL_UART_Transmit_IT+0x34>
 8009ec0:	2302      	movs	r3, #2
 8009ec2:	e037      	b.n	8009f34 <HAL_UART_Transmit_IT+0xa4>
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	2201      	movs	r2, #1
 8009ec8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	68ba      	ldr	r2, [r7, #8]
 8009ed0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	88fa      	ldrh	r2, [r7, #6]
 8009ed6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	88fa      	ldrh	r2, [r7, #6]
 8009ede:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	2200      	movs	r2, #0
 8009eec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	2221      	movs	r2, #33	; 0x21
 8009ef4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	689b      	ldr	r3, [r3, #8]
 8009efa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009efe:	d107      	bne.n	8009f10 <HAL_UART_Transmit_IT+0x80>
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	691b      	ldr	r3, [r3, #16]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d103      	bne.n	8009f10 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	4a0d      	ldr	r2, [pc, #52]	; (8009f40 <HAL_UART_Transmit_IT+0xb0>)
 8009f0c:	669a      	str	r2, [r3, #104]	; 0x68
 8009f0e:	e002      	b.n	8009f16 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	4a0c      	ldr	r2, [pc, #48]	; (8009f44 <HAL_UART_Transmit_IT+0xb4>)
 8009f14:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	681a      	ldr	r2, [r3, #0]
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009f2c:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	e000      	b.n	8009f34 <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 8009f32:	2302      	movs	r3, #2
  }
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	3714      	adds	r7, #20
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3e:	4770      	bx	lr
 8009f40:	0800ad51 	.word	0x0800ad51
 8009f44:	0800acdf 	.word	0x0800acdf

08009f48 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b084      	sub	sp, #16
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	60f8      	str	r0, [r7, #12]
 8009f50:	60b9      	str	r1, [r7, #8]
 8009f52:	4613      	mov	r3, r2
 8009f54:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f5a:	2b20      	cmp	r3, #32
 8009f5c:	d12c      	bne.n	8009fb8 <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d002      	beq.n	8009f6a <HAL_UART_Receive_IT+0x22>
 8009f64:	88fb      	ldrh	r3, [r7, #6]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d101      	bne.n	8009f6e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	e025      	b.n	8009fba <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009f74:	2b01      	cmp	r3, #1
 8009f76:	d101      	bne.n	8009f7c <HAL_UART_Receive_IT+0x34>
 8009f78:	2302      	movs	r3, #2
 8009f7a:	e01e      	b.n	8009fba <HAL_UART_Receive_IT+0x72>
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	2201      	movs	r2, #1
 8009f80:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	2200      	movs	r2, #0
 8009f88:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d007      	beq.n	8009fa8 <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	681a      	ldr	r2, [r3, #0]
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8009fa6:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009fa8:	88fb      	ldrh	r3, [r7, #6]
 8009faa:	461a      	mov	r2, r3
 8009fac:	68b9      	ldr	r1, [r7, #8]
 8009fae:	68f8      	ldr	r0, [r7, #12]
 8009fb0:	f000 fdc8 	bl	800ab44 <UART_Start_Receive_IT>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	e000      	b.n	8009fba <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 8009fb8:	2302      	movs	r3, #2
  }
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	3710      	adds	r7, #16
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}
	...

08009fc4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b088      	sub	sp, #32
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	69db      	ldr	r3, [r3, #28]
 8009fd2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	689b      	ldr	r3, [r3, #8]
 8009fe2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009fe4:	69fa      	ldr	r2, [r7, #28]
 8009fe6:	f640 030f 	movw	r3, #2063	; 0x80f
 8009fea:	4013      	ands	r3, r2
 8009fec:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8009fee:	693b      	ldr	r3, [r7, #16]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d113      	bne.n	800a01c <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009ff4:	69fb      	ldr	r3, [r7, #28]
 8009ff6:	f003 0320 	and.w	r3, r3, #32
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d00e      	beq.n	800a01c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009ffe:	69bb      	ldr	r3, [r7, #24]
 800a000:	f003 0320 	and.w	r3, r3, #32
 800a004:	2b00      	cmp	r3, #0
 800a006:	d009      	beq.n	800a01c <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	f000 81b9 	beq.w	800a384 <HAL_UART_IRQHandler+0x3c0>
      {
        huart->RxISR(huart);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	4798      	blx	r3
      }
      return;
 800a01a:	e1b3      	b.n	800a384 <HAL_UART_IRQHandler+0x3c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a01c:	693b      	ldr	r3, [r7, #16]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	f000 80e3 	beq.w	800a1ea <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a024:	697b      	ldr	r3, [r7, #20]
 800a026:	f003 0301 	and.w	r3, r3, #1
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d105      	bne.n	800a03a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800a02e:	69ba      	ldr	r2, [r7, #24]
 800a030:	4ba5      	ldr	r3, [pc, #660]	; (800a2c8 <HAL_UART_IRQHandler+0x304>)
 800a032:	4013      	ands	r3, r2
 800a034:	2b00      	cmp	r3, #0
 800a036:	f000 80d8 	beq.w	800a1ea <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a03a:	69fb      	ldr	r3, [r7, #28]
 800a03c:	f003 0301 	and.w	r3, r3, #1
 800a040:	2b00      	cmp	r3, #0
 800a042:	d010      	beq.n	800a066 <HAL_UART_IRQHandler+0xa2>
 800a044:	69bb      	ldr	r3, [r7, #24]
 800a046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d00b      	beq.n	800a066 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	2201      	movs	r2, #1
 800a054:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a05c:	f043 0201 	orr.w	r2, r3, #1
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a066:	69fb      	ldr	r3, [r7, #28]
 800a068:	f003 0302 	and.w	r3, r3, #2
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d010      	beq.n	800a092 <HAL_UART_IRQHandler+0xce>
 800a070:	697b      	ldr	r3, [r7, #20]
 800a072:	f003 0301 	and.w	r3, r3, #1
 800a076:	2b00      	cmp	r3, #0
 800a078:	d00b      	beq.n	800a092 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	2202      	movs	r2, #2
 800a080:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a088:	f043 0204 	orr.w	r2, r3, #4
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a092:	69fb      	ldr	r3, [r7, #28]
 800a094:	f003 0304 	and.w	r3, r3, #4
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d010      	beq.n	800a0be <HAL_UART_IRQHandler+0xfa>
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	f003 0301 	and.w	r3, r3, #1
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d00b      	beq.n	800a0be <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	2204      	movs	r2, #4
 800a0ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a0b4:	f043 0202 	orr.w	r2, r3, #2
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a0be:	69fb      	ldr	r3, [r7, #28]
 800a0c0:	f003 0308 	and.w	r3, r3, #8
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d015      	beq.n	800a0f4 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a0c8:	69bb      	ldr	r3, [r7, #24]
 800a0ca:	f003 0320 	and.w	r3, r3, #32
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d104      	bne.n	800a0dc <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d00b      	beq.n	800a0f4 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	2208      	movs	r2, #8
 800a0e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a0ea:	f043 0208 	orr.w	r2, r3, #8
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a0f4:	69fb      	ldr	r3, [r7, #28]
 800a0f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d011      	beq.n	800a122 <HAL_UART_IRQHandler+0x15e>
 800a0fe:	69bb      	ldr	r3, [r7, #24]
 800a100:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a104:	2b00      	cmp	r3, #0
 800a106:	d00c      	beq.n	800a122 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a110:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a118:	f043 0220 	orr.w	r2, r3, #32
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a128:	2b00      	cmp	r3, #0
 800a12a:	f000 812d 	beq.w	800a388 <HAL_UART_IRQHandler+0x3c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a12e:	69fb      	ldr	r3, [r7, #28]
 800a130:	f003 0320 	and.w	r3, r3, #32
 800a134:	2b00      	cmp	r3, #0
 800a136:	d00c      	beq.n	800a152 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a138:	69bb      	ldr	r3, [r7, #24]
 800a13a:	f003 0320 	and.w	r3, r3, #32
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d007      	beq.n	800a152 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a146:	2b00      	cmp	r3, #0
 800a148:	d003      	beq.n	800a152 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a158:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	689b      	ldr	r3, [r3, #8]
 800a160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a164:	2b40      	cmp	r3, #64	; 0x40
 800a166:	d004      	beq.n	800a172 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d031      	beq.n	800a1d6 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f000 fd6e 	bl	800ac54 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	689b      	ldr	r3, [r3, #8]
 800a17e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a182:	2b40      	cmp	r3, #64	; 0x40
 800a184:	d123      	bne.n	800a1ce <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	689a      	ldr	r2, [r3, #8]
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a194:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d013      	beq.n	800a1c6 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1a2:	4a4a      	ldr	r2, [pc, #296]	; (800a2cc <HAL_UART_IRQHandler+0x308>)
 800a1a4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f7fa fc3e 	bl	8004a2c <HAL_DMA_Abort_IT>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d017      	beq.n	800a1e6 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1bc:	687a      	ldr	r2, [r7, #4]
 800a1be:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800a1c0:	4610      	mov	r0, r2
 800a1c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1c4:	e00f      	b.n	800a1e6 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f000 f8f2 	bl	800a3b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1cc:	e00b      	b.n	800a1e6 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f000 f8ee 	bl	800a3b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1d4:	e007      	b.n	800a1e6 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f000 f8ea 	bl	800a3b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800a1e4:	e0d0      	b.n	800a388 <HAL_UART_IRQHandler+0x3c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1e6:	bf00      	nop
    return;
 800a1e8:	e0ce      	b.n	800a388 <HAL_UART_IRQHandler+0x3c4>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1ee:	2b01      	cmp	r3, #1
 800a1f0:	f040 80a7 	bne.w	800a342 <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a1f4:	69fb      	ldr	r3, [r7, #28]
 800a1f6:	f003 0310 	and.w	r3, r3, #16
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	f000 80a1 	beq.w	800a342 <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a200:	69bb      	ldr	r3, [r7, #24]
 800a202:	f003 0310 	and.w	r3, r3, #16
 800a206:	2b00      	cmp	r3, #0
 800a208:	f000 809b 	beq.w	800a342 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	2210      	movs	r2, #16
 800a212:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	689b      	ldr	r3, [r3, #8]
 800a21a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a21e:	2b40      	cmp	r3, #64	; 0x40
 800a220:	d156      	bne.n	800a2d0 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	685b      	ldr	r3, [r3, #4]
 800a22a:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800a22c:	893b      	ldrh	r3, [r7, #8]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	f000 80ac 	beq.w	800a38c <HAL_UART_IRQHandler+0x3c8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a23a:	893a      	ldrh	r2, [r7, #8]
 800a23c:	429a      	cmp	r2, r3
 800a23e:	f080 80a5 	bcs.w	800a38c <HAL_UART_IRQHandler+0x3c8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	893a      	ldrh	r2, [r7, #8]
 800a246:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a24e:	69db      	ldr	r3, [r3, #28]
 800a250:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a254:	d02a      	beq.n	800a2ac <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	681a      	ldr	r2, [r3, #0]
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a264:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	689a      	ldr	r2, [r3, #8]
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f022 0201 	bic.w	r2, r2, #1
 800a274:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	689a      	ldr	r2, [r3, #8]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a284:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2220      	movs	r2, #32
 800a28a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2200      	movs	r2, #0
 800a290:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	681a      	ldr	r2, [r3, #0]
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	f022 0210 	bic.w	r2, r2, #16
 800a2a0:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f7fa fb50 	bl	800494c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a2b8:	b29b      	uxth	r3, r3
 800a2ba:	1ad3      	subs	r3, r2, r3
 800a2bc:	b29b      	uxth	r3, r3
 800a2be:	4619      	mov	r1, r3
 800a2c0:	6878      	ldr	r0, [r7, #4]
 800a2c2:	f000 f87f 	bl	800a3c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a2c6:	e061      	b.n	800a38c <HAL_UART_IRQHandler+0x3c8>
 800a2c8:	04000120 	.word	0x04000120
 800a2cc:	0800acb3 	.word	0x0800acb3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a2dc:	b29b      	uxth	r3, r3
 800a2de:	1ad3      	subs	r3, r2, r3
 800a2e0:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a2e8:	b29b      	uxth	r3, r3
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d050      	beq.n	800a390 <HAL_UART_IRQHandler+0x3cc>
          && (nb_rx_data > 0U))
 800a2ee:	897b      	ldrh	r3, [r7, #10]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d04d      	beq.n	800a390 <HAL_UART_IRQHandler+0x3cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	681a      	ldr	r2, [r3, #0]
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a302:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	689a      	ldr	r2, [r3, #8]
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	f022 0201 	bic.w	r2, r2, #1
 800a312:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2220      	movs	r2, #32
 800a318:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2200      	movs	r2, #0
 800a31e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2200      	movs	r2, #0
 800a324:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	681a      	ldr	r2, [r3, #0]
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f022 0210 	bic.w	r2, r2, #16
 800a334:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a336:	897b      	ldrh	r3, [r7, #10]
 800a338:	4619      	mov	r1, r3
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f000 f842 	bl	800a3c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a340:	e026      	b.n	800a390 <HAL_UART_IRQHandler+0x3cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a342:	69fb      	ldr	r3, [r7, #28]
 800a344:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d00d      	beq.n	800a368 <HAL_UART_IRQHandler+0x3a4>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a34c:	69bb      	ldr	r3, [r7, #24]
 800a34e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a352:	2b00      	cmp	r3, #0
 800a354:	d008      	beq.n	800a368 <HAL_UART_IRQHandler+0x3a4>
  {
    if (huart->TxISR != NULL)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d01a      	beq.n	800a394 <HAL_UART_IRQHandler+0x3d0>
    {
      huart->TxISR(huart);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	4798      	blx	r3
    }
    return;
 800a366:	e015      	b.n	800a394 <HAL_UART_IRQHandler+0x3d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a368:	69fb      	ldr	r3, [r7, #28]
 800a36a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d011      	beq.n	800a396 <HAL_UART_IRQHandler+0x3d2>
 800a372:	69bb      	ldr	r3, [r7, #24]
 800a374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d00c      	beq.n	800a396 <HAL_UART_IRQHandler+0x3d2>
  {
    UART_EndTransmit_IT(huart);
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f000 fd25 	bl	800adcc <UART_EndTransmit_IT>
    return;
 800a382:	e008      	b.n	800a396 <HAL_UART_IRQHandler+0x3d2>
      return;
 800a384:	bf00      	nop
 800a386:	e006      	b.n	800a396 <HAL_UART_IRQHandler+0x3d2>
    return;
 800a388:	bf00      	nop
 800a38a:	e004      	b.n	800a396 <HAL_UART_IRQHandler+0x3d2>
      return;
 800a38c:	bf00      	nop
 800a38e:	e002      	b.n	800a396 <HAL_UART_IRQHandler+0x3d2>
      return;
 800a390:	bf00      	nop
 800a392:	e000      	b.n	800a396 <HAL_UART_IRQHandler+0x3d2>
    return;
 800a394:	bf00      	nop
  }

}
 800a396:	3720      	adds	r7, #32
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}

0800a39c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a39c:	b480      	push	{r7}
 800a39e:	b083      	sub	sp, #12
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a3a4:	bf00      	nop
 800a3a6:	370c      	adds	r7, #12
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ae:	4770      	bx	lr

0800a3b0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b083      	sub	sp, #12
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a3b8:	bf00      	nop
 800a3ba:	370c      	adds	r7, #12
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c2:	4770      	bx	lr

0800a3c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b083      	sub	sp, #12
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
 800a3cc:	460b      	mov	r3, r1
 800a3ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a3d0:	bf00      	nop
 800a3d2:	370c      	adds	r7, #12
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3da:	4770      	bx	lr

0800a3dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b088      	sub	sp, #32
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	689a      	ldr	r2, [r3, #8]
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	691b      	ldr	r3, [r3, #16]
 800a3f0:	431a      	orrs	r2, r3
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	695b      	ldr	r3, [r3, #20]
 800a3f6:	431a      	orrs	r2, r3
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	69db      	ldr	r3, [r3, #28]
 800a3fc:	4313      	orrs	r3, r2
 800a3fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	681a      	ldr	r2, [r3, #0]
 800a406:	4ba7      	ldr	r3, [pc, #668]	; (800a6a4 <UART_SetConfig+0x2c8>)
 800a408:	4013      	ands	r3, r2
 800a40a:	687a      	ldr	r2, [r7, #4]
 800a40c:	6812      	ldr	r2, [r2, #0]
 800a40e:	6979      	ldr	r1, [r7, #20]
 800a410:	430b      	orrs	r3, r1
 800a412:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	685b      	ldr	r3, [r3, #4]
 800a41a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	68da      	ldr	r2, [r3, #12]
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	430a      	orrs	r2, r1
 800a428:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	699b      	ldr	r3, [r3, #24]
 800a42e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6a1b      	ldr	r3, [r3, #32]
 800a434:	697a      	ldr	r2, [r7, #20]
 800a436:	4313      	orrs	r3, r2
 800a438:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	689b      	ldr	r3, [r3, #8]
 800a440:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	697a      	ldr	r2, [r7, #20]
 800a44a:	430a      	orrs	r2, r1
 800a44c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	4a95      	ldr	r2, [pc, #596]	; (800a6a8 <UART_SetConfig+0x2cc>)
 800a454:	4293      	cmp	r3, r2
 800a456:	d120      	bne.n	800a49a <UART_SetConfig+0xbe>
 800a458:	4b94      	ldr	r3, [pc, #592]	; (800a6ac <UART_SetConfig+0x2d0>)
 800a45a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a45e:	f003 0303 	and.w	r3, r3, #3
 800a462:	2b03      	cmp	r3, #3
 800a464:	d816      	bhi.n	800a494 <UART_SetConfig+0xb8>
 800a466:	a201      	add	r2, pc, #4	; (adr r2, 800a46c <UART_SetConfig+0x90>)
 800a468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a46c:	0800a47d 	.word	0x0800a47d
 800a470:	0800a489 	.word	0x0800a489
 800a474:	0800a483 	.word	0x0800a483
 800a478:	0800a48f 	.word	0x0800a48f
 800a47c:	2301      	movs	r3, #1
 800a47e:	77fb      	strb	r3, [r7, #31]
 800a480:	e14f      	b.n	800a722 <UART_SetConfig+0x346>
 800a482:	2302      	movs	r3, #2
 800a484:	77fb      	strb	r3, [r7, #31]
 800a486:	e14c      	b.n	800a722 <UART_SetConfig+0x346>
 800a488:	2304      	movs	r3, #4
 800a48a:	77fb      	strb	r3, [r7, #31]
 800a48c:	e149      	b.n	800a722 <UART_SetConfig+0x346>
 800a48e:	2308      	movs	r3, #8
 800a490:	77fb      	strb	r3, [r7, #31]
 800a492:	e146      	b.n	800a722 <UART_SetConfig+0x346>
 800a494:	2310      	movs	r3, #16
 800a496:	77fb      	strb	r3, [r7, #31]
 800a498:	e143      	b.n	800a722 <UART_SetConfig+0x346>
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	4a84      	ldr	r2, [pc, #528]	; (800a6b0 <UART_SetConfig+0x2d4>)
 800a4a0:	4293      	cmp	r3, r2
 800a4a2:	d132      	bne.n	800a50a <UART_SetConfig+0x12e>
 800a4a4:	4b81      	ldr	r3, [pc, #516]	; (800a6ac <UART_SetConfig+0x2d0>)
 800a4a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4aa:	f003 030c 	and.w	r3, r3, #12
 800a4ae:	2b0c      	cmp	r3, #12
 800a4b0:	d828      	bhi.n	800a504 <UART_SetConfig+0x128>
 800a4b2:	a201      	add	r2, pc, #4	; (adr r2, 800a4b8 <UART_SetConfig+0xdc>)
 800a4b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4b8:	0800a4ed 	.word	0x0800a4ed
 800a4bc:	0800a505 	.word	0x0800a505
 800a4c0:	0800a505 	.word	0x0800a505
 800a4c4:	0800a505 	.word	0x0800a505
 800a4c8:	0800a4f9 	.word	0x0800a4f9
 800a4cc:	0800a505 	.word	0x0800a505
 800a4d0:	0800a505 	.word	0x0800a505
 800a4d4:	0800a505 	.word	0x0800a505
 800a4d8:	0800a4f3 	.word	0x0800a4f3
 800a4dc:	0800a505 	.word	0x0800a505
 800a4e0:	0800a505 	.word	0x0800a505
 800a4e4:	0800a505 	.word	0x0800a505
 800a4e8:	0800a4ff 	.word	0x0800a4ff
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	77fb      	strb	r3, [r7, #31]
 800a4f0:	e117      	b.n	800a722 <UART_SetConfig+0x346>
 800a4f2:	2302      	movs	r3, #2
 800a4f4:	77fb      	strb	r3, [r7, #31]
 800a4f6:	e114      	b.n	800a722 <UART_SetConfig+0x346>
 800a4f8:	2304      	movs	r3, #4
 800a4fa:	77fb      	strb	r3, [r7, #31]
 800a4fc:	e111      	b.n	800a722 <UART_SetConfig+0x346>
 800a4fe:	2308      	movs	r3, #8
 800a500:	77fb      	strb	r3, [r7, #31]
 800a502:	e10e      	b.n	800a722 <UART_SetConfig+0x346>
 800a504:	2310      	movs	r3, #16
 800a506:	77fb      	strb	r3, [r7, #31]
 800a508:	e10b      	b.n	800a722 <UART_SetConfig+0x346>
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	4a69      	ldr	r2, [pc, #420]	; (800a6b4 <UART_SetConfig+0x2d8>)
 800a510:	4293      	cmp	r3, r2
 800a512:	d120      	bne.n	800a556 <UART_SetConfig+0x17a>
 800a514:	4b65      	ldr	r3, [pc, #404]	; (800a6ac <UART_SetConfig+0x2d0>)
 800a516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a51a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a51e:	2b30      	cmp	r3, #48	; 0x30
 800a520:	d013      	beq.n	800a54a <UART_SetConfig+0x16e>
 800a522:	2b30      	cmp	r3, #48	; 0x30
 800a524:	d814      	bhi.n	800a550 <UART_SetConfig+0x174>
 800a526:	2b20      	cmp	r3, #32
 800a528:	d009      	beq.n	800a53e <UART_SetConfig+0x162>
 800a52a:	2b20      	cmp	r3, #32
 800a52c:	d810      	bhi.n	800a550 <UART_SetConfig+0x174>
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d002      	beq.n	800a538 <UART_SetConfig+0x15c>
 800a532:	2b10      	cmp	r3, #16
 800a534:	d006      	beq.n	800a544 <UART_SetConfig+0x168>
 800a536:	e00b      	b.n	800a550 <UART_SetConfig+0x174>
 800a538:	2300      	movs	r3, #0
 800a53a:	77fb      	strb	r3, [r7, #31]
 800a53c:	e0f1      	b.n	800a722 <UART_SetConfig+0x346>
 800a53e:	2302      	movs	r3, #2
 800a540:	77fb      	strb	r3, [r7, #31]
 800a542:	e0ee      	b.n	800a722 <UART_SetConfig+0x346>
 800a544:	2304      	movs	r3, #4
 800a546:	77fb      	strb	r3, [r7, #31]
 800a548:	e0eb      	b.n	800a722 <UART_SetConfig+0x346>
 800a54a:	2308      	movs	r3, #8
 800a54c:	77fb      	strb	r3, [r7, #31]
 800a54e:	e0e8      	b.n	800a722 <UART_SetConfig+0x346>
 800a550:	2310      	movs	r3, #16
 800a552:	77fb      	strb	r3, [r7, #31]
 800a554:	e0e5      	b.n	800a722 <UART_SetConfig+0x346>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	4a57      	ldr	r2, [pc, #348]	; (800a6b8 <UART_SetConfig+0x2dc>)
 800a55c:	4293      	cmp	r3, r2
 800a55e:	d120      	bne.n	800a5a2 <UART_SetConfig+0x1c6>
 800a560:	4b52      	ldr	r3, [pc, #328]	; (800a6ac <UART_SetConfig+0x2d0>)
 800a562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a566:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a56a:	2bc0      	cmp	r3, #192	; 0xc0
 800a56c:	d013      	beq.n	800a596 <UART_SetConfig+0x1ba>
 800a56e:	2bc0      	cmp	r3, #192	; 0xc0
 800a570:	d814      	bhi.n	800a59c <UART_SetConfig+0x1c0>
 800a572:	2b80      	cmp	r3, #128	; 0x80
 800a574:	d009      	beq.n	800a58a <UART_SetConfig+0x1ae>
 800a576:	2b80      	cmp	r3, #128	; 0x80
 800a578:	d810      	bhi.n	800a59c <UART_SetConfig+0x1c0>
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d002      	beq.n	800a584 <UART_SetConfig+0x1a8>
 800a57e:	2b40      	cmp	r3, #64	; 0x40
 800a580:	d006      	beq.n	800a590 <UART_SetConfig+0x1b4>
 800a582:	e00b      	b.n	800a59c <UART_SetConfig+0x1c0>
 800a584:	2300      	movs	r3, #0
 800a586:	77fb      	strb	r3, [r7, #31]
 800a588:	e0cb      	b.n	800a722 <UART_SetConfig+0x346>
 800a58a:	2302      	movs	r3, #2
 800a58c:	77fb      	strb	r3, [r7, #31]
 800a58e:	e0c8      	b.n	800a722 <UART_SetConfig+0x346>
 800a590:	2304      	movs	r3, #4
 800a592:	77fb      	strb	r3, [r7, #31]
 800a594:	e0c5      	b.n	800a722 <UART_SetConfig+0x346>
 800a596:	2308      	movs	r3, #8
 800a598:	77fb      	strb	r3, [r7, #31]
 800a59a:	e0c2      	b.n	800a722 <UART_SetConfig+0x346>
 800a59c:	2310      	movs	r3, #16
 800a59e:	77fb      	strb	r3, [r7, #31]
 800a5a0:	e0bf      	b.n	800a722 <UART_SetConfig+0x346>
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	4a45      	ldr	r2, [pc, #276]	; (800a6bc <UART_SetConfig+0x2e0>)
 800a5a8:	4293      	cmp	r3, r2
 800a5aa:	d125      	bne.n	800a5f8 <UART_SetConfig+0x21c>
 800a5ac:	4b3f      	ldr	r3, [pc, #252]	; (800a6ac <UART_SetConfig+0x2d0>)
 800a5ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a5b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a5ba:	d017      	beq.n	800a5ec <UART_SetConfig+0x210>
 800a5bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a5c0:	d817      	bhi.n	800a5f2 <UART_SetConfig+0x216>
 800a5c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5c6:	d00b      	beq.n	800a5e0 <UART_SetConfig+0x204>
 800a5c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5cc:	d811      	bhi.n	800a5f2 <UART_SetConfig+0x216>
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d003      	beq.n	800a5da <UART_SetConfig+0x1fe>
 800a5d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5d6:	d006      	beq.n	800a5e6 <UART_SetConfig+0x20a>
 800a5d8:	e00b      	b.n	800a5f2 <UART_SetConfig+0x216>
 800a5da:	2300      	movs	r3, #0
 800a5dc:	77fb      	strb	r3, [r7, #31]
 800a5de:	e0a0      	b.n	800a722 <UART_SetConfig+0x346>
 800a5e0:	2302      	movs	r3, #2
 800a5e2:	77fb      	strb	r3, [r7, #31]
 800a5e4:	e09d      	b.n	800a722 <UART_SetConfig+0x346>
 800a5e6:	2304      	movs	r3, #4
 800a5e8:	77fb      	strb	r3, [r7, #31]
 800a5ea:	e09a      	b.n	800a722 <UART_SetConfig+0x346>
 800a5ec:	2308      	movs	r3, #8
 800a5ee:	77fb      	strb	r3, [r7, #31]
 800a5f0:	e097      	b.n	800a722 <UART_SetConfig+0x346>
 800a5f2:	2310      	movs	r3, #16
 800a5f4:	77fb      	strb	r3, [r7, #31]
 800a5f6:	e094      	b.n	800a722 <UART_SetConfig+0x346>
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	4a30      	ldr	r2, [pc, #192]	; (800a6c0 <UART_SetConfig+0x2e4>)
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d125      	bne.n	800a64e <UART_SetConfig+0x272>
 800a602:	4b2a      	ldr	r3, [pc, #168]	; (800a6ac <UART_SetConfig+0x2d0>)
 800a604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a608:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a60c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a610:	d017      	beq.n	800a642 <UART_SetConfig+0x266>
 800a612:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a616:	d817      	bhi.n	800a648 <UART_SetConfig+0x26c>
 800a618:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a61c:	d00b      	beq.n	800a636 <UART_SetConfig+0x25a>
 800a61e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a622:	d811      	bhi.n	800a648 <UART_SetConfig+0x26c>
 800a624:	2b00      	cmp	r3, #0
 800a626:	d003      	beq.n	800a630 <UART_SetConfig+0x254>
 800a628:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a62c:	d006      	beq.n	800a63c <UART_SetConfig+0x260>
 800a62e:	e00b      	b.n	800a648 <UART_SetConfig+0x26c>
 800a630:	2301      	movs	r3, #1
 800a632:	77fb      	strb	r3, [r7, #31]
 800a634:	e075      	b.n	800a722 <UART_SetConfig+0x346>
 800a636:	2302      	movs	r3, #2
 800a638:	77fb      	strb	r3, [r7, #31]
 800a63a:	e072      	b.n	800a722 <UART_SetConfig+0x346>
 800a63c:	2304      	movs	r3, #4
 800a63e:	77fb      	strb	r3, [r7, #31]
 800a640:	e06f      	b.n	800a722 <UART_SetConfig+0x346>
 800a642:	2308      	movs	r3, #8
 800a644:	77fb      	strb	r3, [r7, #31]
 800a646:	e06c      	b.n	800a722 <UART_SetConfig+0x346>
 800a648:	2310      	movs	r3, #16
 800a64a:	77fb      	strb	r3, [r7, #31]
 800a64c:	e069      	b.n	800a722 <UART_SetConfig+0x346>
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	4a1c      	ldr	r2, [pc, #112]	; (800a6c4 <UART_SetConfig+0x2e8>)
 800a654:	4293      	cmp	r3, r2
 800a656:	d137      	bne.n	800a6c8 <UART_SetConfig+0x2ec>
 800a658:	4b14      	ldr	r3, [pc, #80]	; (800a6ac <UART_SetConfig+0x2d0>)
 800a65a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a65e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a662:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a666:	d017      	beq.n	800a698 <UART_SetConfig+0x2bc>
 800a668:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a66c:	d817      	bhi.n	800a69e <UART_SetConfig+0x2c2>
 800a66e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a672:	d00b      	beq.n	800a68c <UART_SetConfig+0x2b0>
 800a674:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a678:	d811      	bhi.n	800a69e <UART_SetConfig+0x2c2>
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d003      	beq.n	800a686 <UART_SetConfig+0x2aa>
 800a67e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a682:	d006      	beq.n	800a692 <UART_SetConfig+0x2b6>
 800a684:	e00b      	b.n	800a69e <UART_SetConfig+0x2c2>
 800a686:	2300      	movs	r3, #0
 800a688:	77fb      	strb	r3, [r7, #31]
 800a68a:	e04a      	b.n	800a722 <UART_SetConfig+0x346>
 800a68c:	2302      	movs	r3, #2
 800a68e:	77fb      	strb	r3, [r7, #31]
 800a690:	e047      	b.n	800a722 <UART_SetConfig+0x346>
 800a692:	2304      	movs	r3, #4
 800a694:	77fb      	strb	r3, [r7, #31]
 800a696:	e044      	b.n	800a722 <UART_SetConfig+0x346>
 800a698:	2308      	movs	r3, #8
 800a69a:	77fb      	strb	r3, [r7, #31]
 800a69c:	e041      	b.n	800a722 <UART_SetConfig+0x346>
 800a69e:	2310      	movs	r3, #16
 800a6a0:	77fb      	strb	r3, [r7, #31]
 800a6a2:	e03e      	b.n	800a722 <UART_SetConfig+0x346>
 800a6a4:	efff69f3 	.word	0xefff69f3
 800a6a8:	40011000 	.word	0x40011000
 800a6ac:	40023800 	.word	0x40023800
 800a6b0:	40004400 	.word	0x40004400
 800a6b4:	40004800 	.word	0x40004800
 800a6b8:	40004c00 	.word	0x40004c00
 800a6bc:	40005000 	.word	0x40005000
 800a6c0:	40011400 	.word	0x40011400
 800a6c4:	40007800 	.word	0x40007800
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	4a71      	ldr	r2, [pc, #452]	; (800a894 <UART_SetConfig+0x4b8>)
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d125      	bne.n	800a71e <UART_SetConfig+0x342>
 800a6d2:	4b71      	ldr	r3, [pc, #452]	; (800a898 <UART_SetConfig+0x4bc>)
 800a6d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a6dc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a6e0:	d017      	beq.n	800a712 <UART_SetConfig+0x336>
 800a6e2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a6e6:	d817      	bhi.n	800a718 <UART_SetConfig+0x33c>
 800a6e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a6ec:	d00b      	beq.n	800a706 <UART_SetConfig+0x32a>
 800a6ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a6f2:	d811      	bhi.n	800a718 <UART_SetConfig+0x33c>
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d003      	beq.n	800a700 <UART_SetConfig+0x324>
 800a6f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a6fc:	d006      	beq.n	800a70c <UART_SetConfig+0x330>
 800a6fe:	e00b      	b.n	800a718 <UART_SetConfig+0x33c>
 800a700:	2300      	movs	r3, #0
 800a702:	77fb      	strb	r3, [r7, #31]
 800a704:	e00d      	b.n	800a722 <UART_SetConfig+0x346>
 800a706:	2302      	movs	r3, #2
 800a708:	77fb      	strb	r3, [r7, #31]
 800a70a:	e00a      	b.n	800a722 <UART_SetConfig+0x346>
 800a70c:	2304      	movs	r3, #4
 800a70e:	77fb      	strb	r3, [r7, #31]
 800a710:	e007      	b.n	800a722 <UART_SetConfig+0x346>
 800a712:	2308      	movs	r3, #8
 800a714:	77fb      	strb	r3, [r7, #31]
 800a716:	e004      	b.n	800a722 <UART_SetConfig+0x346>
 800a718:	2310      	movs	r3, #16
 800a71a:	77fb      	strb	r3, [r7, #31]
 800a71c:	e001      	b.n	800a722 <UART_SetConfig+0x346>
 800a71e:	2310      	movs	r3, #16
 800a720:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	69db      	ldr	r3, [r3, #28]
 800a726:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a72a:	d15b      	bne.n	800a7e4 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800a72c:	7ffb      	ldrb	r3, [r7, #31]
 800a72e:	2b08      	cmp	r3, #8
 800a730:	d827      	bhi.n	800a782 <UART_SetConfig+0x3a6>
 800a732:	a201      	add	r2, pc, #4	; (adr r2, 800a738 <UART_SetConfig+0x35c>)
 800a734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a738:	0800a75d 	.word	0x0800a75d
 800a73c:	0800a765 	.word	0x0800a765
 800a740:	0800a76d 	.word	0x0800a76d
 800a744:	0800a783 	.word	0x0800a783
 800a748:	0800a773 	.word	0x0800a773
 800a74c:	0800a783 	.word	0x0800a783
 800a750:	0800a783 	.word	0x0800a783
 800a754:	0800a783 	.word	0x0800a783
 800a758:	0800a77b 	.word	0x0800a77b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a75c:	f7fb fa60 	bl	8005c20 <HAL_RCC_GetPCLK1Freq>
 800a760:	61b8      	str	r0, [r7, #24]
        break;
 800a762:	e013      	b.n	800a78c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a764:	f7fb fa70 	bl	8005c48 <HAL_RCC_GetPCLK2Freq>
 800a768:	61b8      	str	r0, [r7, #24]
        break;
 800a76a:	e00f      	b.n	800a78c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a76c:	4b4b      	ldr	r3, [pc, #300]	; (800a89c <UART_SetConfig+0x4c0>)
 800a76e:	61bb      	str	r3, [r7, #24]
        break;
 800a770:	e00c      	b.n	800a78c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a772:	f7fb f969 	bl	8005a48 <HAL_RCC_GetSysClockFreq>
 800a776:	61b8      	str	r0, [r7, #24]
        break;
 800a778:	e008      	b.n	800a78c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a77a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a77e:	61bb      	str	r3, [r7, #24]
        break;
 800a780:	e004      	b.n	800a78c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800a782:	2300      	movs	r3, #0
 800a784:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a786:	2301      	movs	r3, #1
 800a788:	77bb      	strb	r3, [r7, #30]
        break;
 800a78a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a78c:	69bb      	ldr	r3, [r7, #24]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d074      	beq.n	800a87c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a792:	69bb      	ldr	r3, [r7, #24]
 800a794:	005a      	lsls	r2, r3, #1
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	685b      	ldr	r3, [r3, #4]
 800a79a:	085b      	lsrs	r3, r3, #1
 800a79c:	441a      	add	r2, r3
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	685b      	ldr	r3, [r3, #4]
 800a7a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7a6:	b29b      	uxth	r3, r3
 800a7a8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a7aa:	693b      	ldr	r3, [r7, #16]
 800a7ac:	2b0f      	cmp	r3, #15
 800a7ae:	d916      	bls.n	800a7de <UART_SetConfig+0x402>
 800a7b0:	693b      	ldr	r3, [r7, #16]
 800a7b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7b6:	d212      	bcs.n	800a7de <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a7b8:	693b      	ldr	r3, [r7, #16]
 800a7ba:	b29b      	uxth	r3, r3
 800a7bc:	f023 030f 	bic.w	r3, r3, #15
 800a7c0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	085b      	lsrs	r3, r3, #1
 800a7c6:	b29b      	uxth	r3, r3
 800a7c8:	f003 0307 	and.w	r3, r3, #7
 800a7cc:	b29a      	uxth	r2, r3
 800a7ce:	89fb      	ldrh	r3, [r7, #14]
 800a7d0:	4313      	orrs	r3, r2
 800a7d2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	89fa      	ldrh	r2, [r7, #14]
 800a7da:	60da      	str	r2, [r3, #12]
 800a7dc:	e04e      	b.n	800a87c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800a7de:	2301      	movs	r3, #1
 800a7e0:	77bb      	strb	r3, [r7, #30]
 800a7e2:	e04b      	b.n	800a87c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a7e4:	7ffb      	ldrb	r3, [r7, #31]
 800a7e6:	2b08      	cmp	r3, #8
 800a7e8:	d827      	bhi.n	800a83a <UART_SetConfig+0x45e>
 800a7ea:	a201      	add	r2, pc, #4	; (adr r2, 800a7f0 <UART_SetConfig+0x414>)
 800a7ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7f0:	0800a815 	.word	0x0800a815
 800a7f4:	0800a81d 	.word	0x0800a81d
 800a7f8:	0800a825 	.word	0x0800a825
 800a7fc:	0800a83b 	.word	0x0800a83b
 800a800:	0800a82b 	.word	0x0800a82b
 800a804:	0800a83b 	.word	0x0800a83b
 800a808:	0800a83b 	.word	0x0800a83b
 800a80c:	0800a83b 	.word	0x0800a83b
 800a810:	0800a833 	.word	0x0800a833
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a814:	f7fb fa04 	bl	8005c20 <HAL_RCC_GetPCLK1Freq>
 800a818:	61b8      	str	r0, [r7, #24]
        break;
 800a81a:	e013      	b.n	800a844 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a81c:	f7fb fa14 	bl	8005c48 <HAL_RCC_GetPCLK2Freq>
 800a820:	61b8      	str	r0, [r7, #24]
        break;
 800a822:	e00f      	b.n	800a844 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a824:	4b1d      	ldr	r3, [pc, #116]	; (800a89c <UART_SetConfig+0x4c0>)
 800a826:	61bb      	str	r3, [r7, #24]
        break;
 800a828:	e00c      	b.n	800a844 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a82a:	f7fb f90d 	bl	8005a48 <HAL_RCC_GetSysClockFreq>
 800a82e:	61b8      	str	r0, [r7, #24]
        break;
 800a830:	e008      	b.n	800a844 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a832:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a836:	61bb      	str	r3, [r7, #24]
        break;
 800a838:	e004      	b.n	800a844 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800a83a:	2300      	movs	r3, #0
 800a83c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a83e:	2301      	movs	r3, #1
 800a840:	77bb      	strb	r3, [r7, #30]
        break;
 800a842:	bf00      	nop
    }

    if (pclk != 0U)
 800a844:	69bb      	ldr	r3, [r7, #24]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d018      	beq.n	800a87c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	685b      	ldr	r3, [r3, #4]
 800a84e:	085a      	lsrs	r2, r3, #1
 800a850:	69bb      	ldr	r3, [r7, #24]
 800a852:	441a      	add	r2, r3
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	685b      	ldr	r3, [r3, #4]
 800a858:	fbb2 f3f3 	udiv	r3, r2, r3
 800a85c:	b29b      	uxth	r3, r3
 800a85e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a860:	693b      	ldr	r3, [r7, #16]
 800a862:	2b0f      	cmp	r3, #15
 800a864:	d908      	bls.n	800a878 <UART_SetConfig+0x49c>
 800a866:	693b      	ldr	r3, [r7, #16]
 800a868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a86c:	d204      	bcs.n	800a878 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	693a      	ldr	r2, [r7, #16]
 800a874:	60da      	str	r2, [r3, #12]
 800a876:	e001      	b.n	800a87c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800a878:	2301      	movs	r3, #1
 800a87a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2200      	movs	r2, #0
 800a880:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2200      	movs	r2, #0
 800a886:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a888:	7fbb      	ldrb	r3, [r7, #30]
}
 800a88a:	4618      	mov	r0, r3
 800a88c:	3720      	adds	r7, #32
 800a88e:	46bd      	mov	sp, r7
 800a890:	bd80      	pop	{r7, pc}
 800a892:	bf00      	nop
 800a894:	40007c00 	.word	0x40007c00
 800a898:	40023800 	.word	0x40023800
 800a89c:	00f42400 	.word	0x00f42400

0800a8a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b083      	sub	sp, #12
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ac:	f003 0301 	and.w	r3, r3, #1
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d00a      	beq.n	800a8ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	685b      	ldr	r3, [r3, #4]
 800a8ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	430a      	orrs	r2, r1
 800a8c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ce:	f003 0302 	and.w	r3, r3, #2
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d00a      	beq.n	800a8ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	685b      	ldr	r3, [r3, #4]
 800a8dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	430a      	orrs	r2, r1
 800a8ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8f0:	f003 0304 	and.w	r3, r3, #4
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d00a      	beq.n	800a90e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	685b      	ldr	r3, [r3, #4]
 800a8fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	430a      	orrs	r2, r1
 800a90c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a912:	f003 0308 	and.w	r3, r3, #8
 800a916:	2b00      	cmp	r3, #0
 800a918:	d00a      	beq.n	800a930 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	685b      	ldr	r3, [r3, #4]
 800a920:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	430a      	orrs	r2, r1
 800a92e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a934:	f003 0310 	and.w	r3, r3, #16
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d00a      	beq.n	800a952 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	689b      	ldr	r3, [r3, #8]
 800a942:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	430a      	orrs	r2, r1
 800a950:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a956:	f003 0320 	and.w	r3, r3, #32
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d00a      	beq.n	800a974 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	689b      	ldr	r3, [r3, #8]
 800a964:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	430a      	orrs	r2, r1
 800a972:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d01a      	beq.n	800a9b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	685b      	ldr	r3, [r3, #4]
 800a986:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	430a      	orrs	r2, r1
 800a994:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a99a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a99e:	d10a      	bne.n	800a9b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	685b      	ldr	r3, [r3, #4]
 800a9a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	430a      	orrs	r2, r1
 800a9b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d00a      	beq.n	800a9d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	685b      	ldr	r3, [r3, #4]
 800a9c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	430a      	orrs	r2, r1
 800a9d6:	605a      	str	r2, [r3, #4]
  }
}
 800a9d8:	bf00      	nop
 800a9da:	370c      	adds	r7, #12
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e2:	4770      	bx	lr

0800a9e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b086      	sub	sp, #24
 800a9e8:	af02      	add	r7, sp, #8
 800a9ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a9f4:	f7f9 f938 	bl	8003c68 <HAL_GetTick>
 800a9f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	f003 0308 	and.w	r3, r3, #8
 800aa04:	2b08      	cmp	r3, #8
 800aa06:	d10e      	bne.n	800aa26 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aa08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aa0c:	9300      	str	r3, [sp, #0]
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	2200      	movs	r2, #0
 800aa12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	f000 f817 	bl	800aa4a <UART_WaitOnFlagUntilTimeout>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d001      	beq.n	800aa26 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aa22:	2303      	movs	r3, #3
 800aa24:	e00d      	b.n	800aa42 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2220      	movs	r2, #32
 800aa2a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2220      	movs	r2, #32
 800aa30:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2200      	movs	r2, #0
 800aa36:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800aa40:	2300      	movs	r3, #0
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	3710      	adds	r7, #16
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}

0800aa4a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aa4a:	b580      	push	{r7, lr}
 800aa4c:	b084      	sub	sp, #16
 800aa4e:	af00      	add	r7, sp, #0
 800aa50:	60f8      	str	r0, [r7, #12]
 800aa52:	60b9      	str	r1, [r7, #8]
 800aa54:	603b      	str	r3, [r7, #0]
 800aa56:	4613      	mov	r3, r2
 800aa58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa5a:	e05e      	b.n	800ab1a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa5c:	69bb      	ldr	r3, [r7, #24]
 800aa5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa62:	d05a      	beq.n	800ab1a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa64:	f7f9 f900 	bl	8003c68 <HAL_GetTick>
 800aa68:	4602      	mov	r2, r0
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	1ad3      	subs	r3, r2, r3
 800aa6e:	69ba      	ldr	r2, [r7, #24]
 800aa70:	429a      	cmp	r2, r3
 800aa72:	d302      	bcc.n	800aa7a <UART_WaitOnFlagUntilTimeout+0x30>
 800aa74:	69bb      	ldr	r3, [r7, #24]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d11b      	bne.n	800aab2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	681a      	ldr	r2, [r3, #0]
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800aa88:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	689a      	ldr	r2, [r3, #8]
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	f022 0201 	bic.w	r2, r2, #1
 800aa98:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	2220      	movs	r2, #32
 800aa9e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	2220      	movs	r2, #32
 800aaa4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800aaae:	2303      	movs	r3, #3
 800aab0:	e043      	b.n	800ab3a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	f003 0304 	and.w	r3, r3, #4
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d02c      	beq.n	800ab1a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	69db      	ldr	r3, [r3, #28]
 800aac6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aaca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aace:	d124      	bne.n	800ab1a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aad8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	681a      	ldr	r2, [r3, #0]
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800aae8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	689a      	ldr	r2, [r3, #8]
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	f022 0201 	bic.w	r2, r2, #1
 800aaf8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	2220      	movs	r2, #32
 800aafe:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	2220      	movs	r2, #32
 800ab04:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	2220      	movs	r2, #32
 800ab0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	2200      	movs	r2, #0
 800ab12:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800ab16:	2303      	movs	r3, #3
 800ab18:	e00f      	b.n	800ab3a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	69da      	ldr	r2, [r3, #28]
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	4013      	ands	r3, r2
 800ab24:	68ba      	ldr	r2, [r7, #8]
 800ab26:	429a      	cmp	r2, r3
 800ab28:	bf0c      	ite	eq
 800ab2a:	2301      	moveq	r3, #1
 800ab2c:	2300      	movne	r3, #0
 800ab2e:	b2db      	uxtb	r3, r3
 800ab30:	461a      	mov	r2, r3
 800ab32:	79fb      	ldrb	r3, [r7, #7]
 800ab34:	429a      	cmp	r2, r3
 800ab36:	d091      	beq.n	800aa5c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ab38:	2300      	movs	r3, #0
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3710      	adds	r7, #16
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}
	...

0800ab44 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ab44:	b480      	push	{r7}
 800ab46:	b085      	sub	sp, #20
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	60f8      	str	r0, [r7, #12]
 800ab4c:	60b9      	str	r1, [r7, #8]
 800ab4e:	4613      	mov	r3, r2
 800ab50:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	68ba      	ldr	r2, [r7, #8]
 800ab56:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	88fa      	ldrh	r2, [r7, #6]
 800ab5c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	88fa      	ldrh	r2, [r7, #6]
 800ab64:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	689b      	ldr	r3, [r3, #8]
 800ab72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab76:	d10e      	bne.n	800ab96 <UART_Start_Receive_IT+0x52>
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	691b      	ldr	r3, [r3, #16]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d105      	bne.n	800ab8c <UART_Start_Receive_IT+0x48>
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ab86:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ab8a:	e02d      	b.n	800abe8 <UART_Start_Receive_IT+0xa4>
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	22ff      	movs	r2, #255	; 0xff
 800ab90:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ab94:	e028      	b.n	800abe8 <UART_Start_Receive_IT+0xa4>
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	689b      	ldr	r3, [r3, #8]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d10d      	bne.n	800abba <UART_Start_Receive_IT+0x76>
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	691b      	ldr	r3, [r3, #16]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d104      	bne.n	800abb0 <UART_Start_Receive_IT+0x6c>
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	22ff      	movs	r2, #255	; 0xff
 800abaa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800abae:	e01b      	b.n	800abe8 <UART_Start_Receive_IT+0xa4>
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	227f      	movs	r2, #127	; 0x7f
 800abb4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800abb8:	e016      	b.n	800abe8 <UART_Start_Receive_IT+0xa4>
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	689b      	ldr	r3, [r3, #8]
 800abbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800abc2:	d10d      	bne.n	800abe0 <UART_Start_Receive_IT+0x9c>
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	691b      	ldr	r3, [r3, #16]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d104      	bne.n	800abd6 <UART_Start_Receive_IT+0x92>
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	227f      	movs	r2, #127	; 0x7f
 800abd0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800abd4:	e008      	b.n	800abe8 <UART_Start_Receive_IT+0xa4>
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	223f      	movs	r2, #63	; 0x3f
 800abda:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800abde:	e003      	b.n	800abe8 <UART_Start_Receive_IT+0xa4>
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	2200      	movs	r2, #0
 800abe4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	2200      	movs	r2, #0
 800abec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	2222      	movs	r2, #34	; 0x22
 800abf4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	689a      	ldr	r2, [r3, #8]
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f042 0201 	orr.w	r2, r2, #1
 800ac04:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	689b      	ldr	r3, [r3, #8]
 800ac0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac0e:	d107      	bne.n	800ac20 <UART_Start_Receive_IT+0xdc>
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	691b      	ldr	r3, [r3, #16]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d103      	bne.n	800ac20 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	4a0c      	ldr	r2, [pc, #48]	; (800ac4c <UART_Start_Receive_IT+0x108>)
 800ac1c:	665a      	str	r2, [r3, #100]	; 0x64
 800ac1e:	e002      	b.n	800ac26 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	4a0b      	ldr	r2, [pc, #44]	; (800ac50 <UART_Start_Receive_IT+0x10c>)
 800ac24:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	2200      	movs	r2, #0
 800ac2a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	681a      	ldr	r2, [r3, #0]
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800ac3c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800ac3e:	2300      	movs	r3, #0
}
 800ac40:	4618      	mov	r0, r3
 800ac42:	3714      	adds	r7, #20
 800ac44:	46bd      	mov	sp, r7
 800ac46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4a:	4770      	bx	lr
 800ac4c:	0800aed3 	.word	0x0800aed3
 800ac50:	0800adff 	.word	0x0800adff

0800ac54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ac54:	b480      	push	{r7}
 800ac56:	b083      	sub	sp, #12
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	681a      	ldr	r2, [r3, #0]
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ac6a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	689a      	ldr	r2, [r3, #8]
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	f022 0201 	bic.w	r2, r2, #1
 800ac7a:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac80:	2b01      	cmp	r3, #1
 800ac82:	d107      	bne.n	800ac94 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	681a      	ldr	r2, [r3, #0]
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	f022 0210 	bic.w	r2, r2, #16
 800ac92:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2220      	movs	r2, #32
 800ac98:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2200      	movs	r2, #0
 800aca4:	665a      	str	r2, [r3, #100]	; 0x64
}
 800aca6:	bf00      	nop
 800aca8:	370c      	adds	r7, #12
 800acaa:	46bd      	mov	sp, r7
 800acac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb0:	4770      	bx	lr

0800acb2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800acb2:	b580      	push	{r7, lr}
 800acb4:	b084      	sub	sp, #16
 800acb6:	af00      	add	r7, sp, #0
 800acb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acbe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	2200      	movs	r2, #0
 800acc4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	2200      	movs	r2, #0
 800accc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800acd0:	68f8      	ldr	r0, [r7, #12]
 800acd2:	f7ff fb6d 	bl	800a3b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800acd6:	bf00      	nop
 800acd8:	3710      	adds	r7, #16
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}

0800acde <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800acde:	b480      	push	{r7}
 800ace0:	b083      	sub	sp, #12
 800ace2:	af00      	add	r7, sp, #0
 800ace4:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800acea:	2b21      	cmp	r3, #33	; 0x21
 800acec:	d12a      	bne.n	800ad44 <UART_TxISR_8BIT+0x66>
  {
    if (huart->TxXferCount == 0U)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800acf4:	b29b      	uxth	r3, r3
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d110      	bne.n	800ad1c <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	681a      	ldr	r2, [r3, #0]
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ad08:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	681a      	ldr	r2, [r3, #0]
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ad18:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800ad1a:	e013      	b.n	800ad44 <UART_TxISR_8BIT+0x66>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad20:	781a      	ldrb	r2, [r3, #0]
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad2c:	1c5a      	adds	r2, r3, #1
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ad38:	b29b      	uxth	r3, r3
 800ad3a:	3b01      	subs	r3, #1
 800ad3c:	b29a      	uxth	r2, r3
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800ad44:	bf00      	nop
 800ad46:	370c      	adds	r7, #12
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4e:	4770      	bx	lr

0800ad50 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ad50:	b480      	push	{r7}
 800ad52:	b085      	sub	sp, #20
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad5c:	2b21      	cmp	r3, #33	; 0x21
 800ad5e:	d12f      	bne.n	800adc0 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ad66:	b29b      	uxth	r3, r3
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d110      	bne.n	800ad8e <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	681a      	ldr	r2, [r3, #0]
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ad7a:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	681a      	ldr	r2, [r3, #0]
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ad8a:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800ad8c:	e018      	b.n	800adc0 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad92:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	881b      	ldrh	r3, [r3, #0]
 800ad98:	461a      	mov	r2, r3
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ada2:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ada8:	1c9a      	adds	r2, r3, #2
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800adb4:	b29b      	uxth	r3, r3
 800adb6:	3b01      	subs	r3, #1
 800adb8:	b29a      	uxth	r2, r3
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800adc0:	bf00      	nop
 800adc2:	3714      	adds	r7, #20
 800adc4:	46bd      	mov	sp, r7
 800adc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adca:	4770      	bx	lr

0800adcc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b082      	sub	sp, #8
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	681a      	ldr	r2, [r3, #0]
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ade2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2220      	movs	r2, #32
 800ade8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2200      	movs	r2, #0
 800adee:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f7ff fad3 	bl	800a39c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800adf6:	bf00      	nop
 800adf8:	3708      	adds	r7, #8
 800adfa:	46bd      	mov	sp, r7
 800adfc:	bd80      	pop	{r7, pc}

0800adfe <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800adfe:	b580      	push	{r7, lr}
 800ae00:	b084      	sub	sp, #16
 800ae02:	af00      	add	r7, sp, #0
 800ae04:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ae0c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae12:	2b22      	cmp	r3, #34	; 0x22
 800ae14:	d151      	bne.n	800aeba <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae1c:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ae1e:	89bb      	ldrh	r3, [r7, #12]
 800ae20:	b2d9      	uxtb	r1, r3
 800ae22:	89fb      	ldrh	r3, [r7, #14]
 800ae24:	b2da      	uxtb	r2, r3
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae2a:	400a      	ands	r2, r1
 800ae2c:	b2d2      	uxtb	r2, r2
 800ae2e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae34:	1c5a      	adds	r2, r3, #1
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ae40:	b29b      	uxth	r3, r3
 800ae42:	3b01      	subs	r3, #1
 800ae44:	b29a      	uxth	r2, r3
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ae52:	b29b      	uxth	r3, r3
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d138      	bne.n	800aeca <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	681a      	ldr	r2, [r3, #0]
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ae66:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	689a      	ldr	r2, [r3, #8]
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	f022 0201 	bic.w	r2, r2, #1
 800ae76:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2220      	movs	r2, #32
 800ae7c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2200      	movs	r2, #0
 800ae82:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae88:	2b01      	cmp	r3, #1
 800ae8a:	d10f      	bne.n	800aeac <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	681a      	ldr	r2, [r3, #0]
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f022 0210 	bic.w	r2, r2, #16
 800ae9a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800aea2:	4619      	mov	r1, r3
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f7ff fa8d 	bl	800a3c4 <HAL_UARTEx_RxEventCallback>
 800aeaa:	e002      	b.n	800aeb2 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f7f8 fbbb 	bl	8003628 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800aeb8:	e007      	b.n	800aeca <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	699a      	ldr	r2, [r3, #24]
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	f042 0208 	orr.w	r2, r2, #8
 800aec8:	619a      	str	r2, [r3, #24]
}
 800aeca:	bf00      	nop
 800aecc:	3710      	adds	r7, #16
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}

0800aed2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800aed2:	b580      	push	{r7, lr}
 800aed4:	b084      	sub	sp, #16
 800aed6:	af00      	add	r7, sp, #0
 800aed8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800aee0:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aee6:	2b22      	cmp	r3, #34	; 0x22
 800aee8:	d151      	bne.n	800af8e <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aef0:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aef6:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800aef8:	89ba      	ldrh	r2, [r7, #12]
 800aefa:	89fb      	ldrh	r3, [r7, #14]
 800aefc:	4013      	ands	r3, r2
 800aefe:	b29a      	uxth	r2, r3
 800af00:	68bb      	ldr	r3, [r7, #8]
 800af02:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af08:	1c9a      	adds	r2, r3, #2
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800af14:	b29b      	uxth	r3, r3
 800af16:	3b01      	subs	r3, #1
 800af18:	b29a      	uxth	r2, r3
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800af26:	b29b      	uxth	r3, r3
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d138      	bne.n	800af9e <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	681a      	ldr	r2, [r3, #0]
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800af3a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	689a      	ldr	r2, [r3, #8]
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	f022 0201 	bic.w	r2, r2, #1
 800af4a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2220      	movs	r2, #32
 800af50:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2200      	movs	r2, #0
 800af56:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af5c:	2b01      	cmp	r3, #1
 800af5e:	d10f      	bne.n	800af80 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	681a      	ldr	r2, [r3, #0]
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	f022 0210 	bic.w	r2, r2, #16
 800af6e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800af76:	4619      	mov	r1, r3
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f7ff fa23 	bl	800a3c4 <HAL_UARTEx_RxEventCallback>
 800af7e:	e002      	b.n	800af86 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f7f8 fb51 	bl	8003628 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2200      	movs	r2, #0
 800af8a:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800af8c:	e007      	b.n	800af9e <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	699a      	ldr	r2, [r3, #24]
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	f042 0208 	orr.w	r2, r2, #8
 800af9c:	619a      	str	r2, [r3, #24]
}
 800af9e:	bf00      	nop
 800afa0:	3710      	adds	r7, #16
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bd80      	pop	{r7, pc}
	...

0800afa8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800afa8:	b084      	sub	sp, #16
 800afaa:	b480      	push	{r7}
 800afac:	b085      	sub	sp, #20
 800afae:	af00      	add	r7, sp, #0
 800afb0:	6078      	str	r0, [r7, #4]
 800afb2:	f107 001c 	add.w	r0, r7, #28
 800afb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800afba:	2300      	movs	r3, #0
 800afbc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800afbe:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800afc0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800afc2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800afc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800afc6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800afc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800afca:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800afcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800afce:	431a      	orrs	r2, r3
             Init.ClockDiv
 800afd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800afd2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800afd4:	68fa      	ldr	r2, [r7, #12]
 800afd6:	4313      	orrs	r3, r2
 800afd8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	685a      	ldr	r2, [r3, #4]
 800afde:	4b07      	ldr	r3, [pc, #28]	; (800affc <SDMMC_Init+0x54>)
 800afe0:	4013      	ands	r3, r2
 800afe2:	68fa      	ldr	r2, [r7, #12]
 800afe4:	431a      	orrs	r2, r3
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800afea:	2300      	movs	r3, #0
}
 800afec:	4618      	mov	r0, r3
 800afee:	3714      	adds	r7, #20
 800aff0:	46bd      	mov	sp, r7
 800aff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff6:	b004      	add	sp, #16
 800aff8:	4770      	bx	lr
 800affa:	bf00      	nop
 800affc:	ffff8100 	.word	0xffff8100

0800b000 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b000:	b480      	push	{r7}
 800b002:	b083      	sub	sp, #12
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b00e:	4618      	mov	r0, r3
 800b010:	370c      	adds	r7, #12
 800b012:	46bd      	mov	sp, r7
 800b014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b018:	4770      	bx	lr

0800b01a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800b01a:	b480      	push	{r7}
 800b01c:	b083      	sub	sp, #12
 800b01e:	af00      	add	r7, sp, #0
 800b020:	6078      	str	r0, [r7, #4]
 800b022:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	681a      	ldr	r2, [r3, #0]
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b02e:	2300      	movs	r3, #0
}
 800b030:	4618      	mov	r0, r3
 800b032:	370c      	adds	r7, #12
 800b034:	46bd      	mov	sp, r7
 800b036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03a:	4770      	bx	lr

0800b03c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b082      	sub	sp, #8
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2203      	movs	r2, #3
 800b048:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800b04a:	2002      	movs	r0, #2
 800b04c:	f7f8 fe18 	bl	8003c80 <HAL_Delay>
  
  return HAL_OK;
 800b050:	2300      	movs	r3, #0
}
 800b052:	4618      	mov	r0, r3
 800b054:	3708      	adds	r7, #8
 800b056:	46bd      	mov	sp, r7
 800b058:	bd80      	pop	{r7, pc}

0800b05a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800b05a:	b480      	push	{r7}
 800b05c:	b083      	sub	sp, #12
 800b05e:	af00      	add	r7, sp, #0
 800b060:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f003 0303 	and.w	r3, r3, #3
}
 800b06a:	4618      	mov	r0, r3
 800b06c:	370c      	adds	r7, #12
 800b06e:	46bd      	mov	sp, r7
 800b070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b074:	4770      	bx	lr
	...

0800b078 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b078:	b480      	push	{r7}
 800b07a:	b085      	sub	sp, #20
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
 800b080:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b082:	2300      	movs	r3, #0
 800b084:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	681a      	ldr	r2, [r3, #0]
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b096:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b09c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b09e:	683b      	ldr	r3, [r7, #0]
 800b0a0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b0a2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b0a4:	68fa      	ldr	r2, [r7, #12]
 800b0a6:	4313      	orrs	r3, r2
 800b0a8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	68da      	ldr	r2, [r3, #12]
 800b0ae:	4b06      	ldr	r3, [pc, #24]	; (800b0c8 <SDMMC_SendCommand+0x50>)
 800b0b0:	4013      	ands	r3, r2
 800b0b2:	68fa      	ldr	r2, [r7, #12]
 800b0b4:	431a      	orrs	r2, r3
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800b0ba:	2300      	movs	r3, #0
}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	3714      	adds	r7, #20
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c6:	4770      	bx	lr
 800b0c8:	fffff000 	.word	0xfffff000

0800b0cc <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b0cc:	b480      	push	{r7}
 800b0ce:	b083      	sub	sp, #12
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	691b      	ldr	r3, [r3, #16]
 800b0d8:	b2db      	uxtb	r3, r3
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	370c      	adds	r7, #12
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e4:	4770      	bx	lr

0800b0e6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b0e6:	b480      	push	{r7}
 800b0e8:	b085      	sub	sp, #20
 800b0ea:	af00      	add	r7, sp, #0
 800b0ec:	6078      	str	r0, [r7, #4]
 800b0ee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	3314      	adds	r3, #20
 800b0f4:	461a      	mov	r2, r3
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	4413      	add	r3, r2
 800b0fa:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	681b      	ldr	r3, [r3, #0]
}  
 800b100:	4618      	mov	r0, r3
 800b102:	3714      	adds	r7, #20
 800b104:	46bd      	mov	sp, r7
 800b106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10a:	4770      	bx	lr

0800b10c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800b10c:	b480      	push	{r7}
 800b10e:	b085      	sub	sp, #20
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
 800b114:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b116:	2300      	movs	r3, #0
 800b118:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	681a      	ldr	r2, [r3, #0]
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	685a      	ldr	r2, [r3, #4]
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b132:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b138:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b13e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b140:	68fa      	ldr	r2, [r7, #12]
 800b142:	4313      	orrs	r3, r2
 800b144:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b14a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	431a      	orrs	r2, r3
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b156:	2300      	movs	r3, #0

}
 800b158:	4618      	mov	r0, r3
 800b15a:	3714      	adds	r7, #20
 800b15c:	46bd      	mov	sp, r7
 800b15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b162:	4770      	bx	lr

0800b164 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b088      	sub	sp, #32
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
 800b16c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b172:	2310      	movs	r3, #16
 800b174:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b176:	2340      	movs	r3, #64	; 0x40
 800b178:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b17a:	2300      	movs	r3, #0
 800b17c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b17e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b182:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b184:	f107 0308 	add.w	r3, r7, #8
 800b188:	4619      	mov	r1, r3
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f7ff ff74 	bl	800b078 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b190:	f241 3288 	movw	r2, #5000	; 0x1388
 800b194:	2110      	movs	r1, #16
 800b196:	6878      	ldr	r0, [r7, #4]
 800b198:	f000 fa46 	bl	800b628 <SDMMC_GetCmdResp1>
 800b19c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b19e:	69fb      	ldr	r3, [r7, #28]
}
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	3720      	adds	r7, #32
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	bd80      	pop	{r7, pc}

0800b1a8 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b088      	sub	sp, #32
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
 800b1b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b1b6:	2311      	movs	r3, #17
 800b1b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b1ba:	2340      	movs	r3, #64	; 0x40
 800b1bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b1be:	2300      	movs	r3, #0
 800b1c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b1c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b1c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b1c8:	f107 0308 	add.w	r3, r7, #8
 800b1cc:	4619      	mov	r1, r3
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f7ff ff52 	bl	800b078 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b1d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1d8:	2111      	movs	r1, #17
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	f000 fa24 	bl	800b628 <SDMMC_GetCmdResp1>
 800b1e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b1e2:	69fb      	ldr	r3, [r7, #28]
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	3720      	adds	r7, #32
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}

0800b1ec <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b088      	sub	sp, #32
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
 800b1f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b1fa:	2312      	movs	r3, #18
 800b1fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b1fe:	2340      	movs	r3, #64	; 0x40
 800b200:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b202:	2300      	movs	r3, #0
 800b204:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b206:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b20a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b20c:	f107 0308 	add.w	r3, r7, #8
 800b210:	4619      	mov	r1, r3
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	f7ff ff30 	bl	800b078 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b218:	f241 3288 	movw	r2, #5000	; 0x1388
 800b21c:	2112      	movs	r1, #18
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	f000 fa02 	bl	800b628 <SDMMC_GetCmdResp1>
 800b224:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b226:	69fb      	ldr	r3, [r7, #28]
}
 800b228:	4618      	mov	r0, r3
 800b22a:	3720      	adds	r7, #32
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd80      	pop	{r7, pc}

0800b230 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b088      	sub	sp, #32
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
 800b238:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b23e:	2318      	movs	r3, #24
 800b240:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b242:	2340      	movs	r3, #64	; 0x40
 800b244:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b246:	2300      	movs	r3, #0
 800b248:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b24a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b24e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b250:	f107 0308 	add.w	r3, r7, #8
 800b254:	4619      	mov	r1, r3
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f7ff ff0e 	bl	800b078 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b25c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b260:	2118      	movs	r1, #24
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f000 f9e0 	bl	800b628 <SDMMC_GetCmdResp1>
 800b268:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b26a:	69fb      	ldr	r3, [r7, #28]
}
 800b26c:	4618      	mov	r0, r3
 800b26e:	3720      	adds	r7, #32
 800b270:	46bd      	mov	sp, r7
 800b272:	bd80      	pop	{r7, pc}

0800b274 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b088      	sub	sp, #32
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
 800b27c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b282:	2319      	movs	r3, #25
 800b284:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b286:	2340      	movs	r3, #64	; 0x40
 800b288:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b28a:	2300      	movs	r3, #0
 800b28c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b28e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b292:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b294:	f107 0308 	add.w	r3, r7, #8
 800b298:	4619      	mov	r1, r3
 800b29a:	6878      	ldr	r0, [r7, #4]
 800b29c:	f7ff feec 	bl	800b078 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b2a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2a4:	2119      	movs	r1, #25
 800b2a6:	6878      	ldr	r0, [r7, #4]
 800b2a8:	f000 f9be 	bl	800b628 <SDMMC_GetCmdResp1>
 800b2ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b2ae:	69fb      	ldr	r3, [r7, #28]
}
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	3720      	adds	r7, #32
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd80      	pop	{r7, pc}

0800b2b8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b088      	sub	sp, #32
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b2c4:	230c      	movs	r3, #12
 800b2c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b2c8:	2340      	movs	r3, #64	; 0x40
 800b2ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b2d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b2d6:	f107 0308 	add.w	r3, r7, #8
 800b2da:	4619      	mov	r1, r3
 800b2dc:	6878      	ldr	r0, [r7, #4]
 800b2de:	f7ff fecb 	bl	800b078 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b2e2:	4a05      	ldr	r2, [pc, #20]	; (800b2f8 <SDMMC_CmdStopTransfer+0x40>)
 800b2e4:	210c      	movs	r1, #12
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f000 f99e 	bl	800b628 <SDMMC_GetCmdResp1>
 800b2ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b2ee:	69fb      	ldr	r3, [r7, #28]
}
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	3720      	adds	r7, #32
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}
 800b2f8:	05f5e100 	.word	0x05f5e100

0800b2fc <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b08a      	sub	sp, #40	; 0x28
 800b300:	af00      	add	r7, sp, #0
 800b302:	60f8      	str	r0, [r7, #12]
 800b304:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b30c:	2307      	movs	r3, #7
 800b30e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b310:	2340      	movs	r3, #64	; 0x40
 800b312:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b314:	2300      	movs	r3, #0
 800b316:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b318:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b31c:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b31e:	f107 0310 	add.w	r3, r7, #16
 800b322:	4619      	mov	r1, r3
 800b324:	68f8      	ldr	r0, [r7, #12]
 800b326:	f7ff fea7 	bl	800b078 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b32a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b32e:	2107      	movs	r1, #7
 800b330:	68f8      	ldr	r0, [r7, #12]
 800b332:	f000 f979 	bl	800b628 <SDMMC_GetCmdResp1>
 800b336:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	3728      	adds	r7, #40	; 0x28
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}

0800b342 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b342:	b580      	push	{r7, lr}
 800b344:	b088      	sub	sp, #32
 800b346:	af00      	add	r7, sp, #0
 800b348:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800b34a:	2300      	movs	r3, #0
 800b34c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b34e:	2300      	movs	r3, #0
 800b350:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b352:	2300      	movs	r3, #0
 800b354:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b356:	2300      	movs	r3, #0
 800b358:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b35a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b35e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b360:	f107 0308 	add.w	r3, r7, #8
 800b364:	4619      	mov	r1, r3
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	f7ff fe86 	bl	800b078 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f000 f92f 	bl	800b5d0 <SDMMC_GetCmdError>
 800b372:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b374:	69fb      	ldr	r3, [r7, #28]
}
 800b376:	4618      	mov	r0, r3
 800b378:	3720      	adds	r7, #32
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bd80      	pop	{r7, pc}

0800b37e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b37e:	b580      	push	{r7, lr}
 800b380:	b088      	sub	sp, #32
 800b382:	af00      	add	r7, sp, #0
 800b384:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b386:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b38a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b38c:	2308      	movs	r3, #8
 800b38e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b390:	2340      	movs	r3, #64	; 0x40
 800b392:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b394:	2300      	movs	r3, #0
 800b396:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b398:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b39c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b39e:	f107 0308 	add.w	r3, r7, #8
 800b3a2:	4619      	mov	r1, r3
 800b3a4:	6878      	ldr	r0, [r7, #4]
 800b3a6:	f7ff fe67 	bl	800b078 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	f000 fb26 	bl	800b9fc <SDMMC_GetCmdResp7>
 800b3b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3b2:	69fb      	ldr	r3, [r7, #28]
}
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	3720      	adds	r7, #32
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	bd80      	pop	{r7, pc}

0800b3bc <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b088      	sub	sp, #32
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
 800b3c4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b3ca:	2337      	movs	r3, #55	; 0x37
 800b3cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b3ce:	2340      	movs	r3, #64	; 0x40
 800b3d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b3d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3da:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b3dc:	f107 0308 	add.w	r3, r7, #8
 800b3e0:	4619      	mov	r1, r3
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f7ff fe48 	bl	800b078 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b3e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3ec:	2137      	movs	r1, #55	; 0x37
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f000 f91a 	bl	800b628 <SDMMC_GetCmdResp1>
 800b3f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3f6:	69fb      	ldr	r3, [r7, #28]
}
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	3720      	adds	r7, #32
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bd80      	pop	{r7, pc}

0800b400 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b088      	sub	sp, #32
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
 800b408:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800b40a:	683a      	ldr	r2, [r7, #0]
 800b40c:	4b0d      	ldr	r3, [pc, #52]	; (800b444 <SDMMC_CmdAppOperCommand+0x44>)
 800b40e:	4313      	orrs	r3, r2
 800b410:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b412:	2329      	movs	r3, #41	; 0x29
 800b414:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b416:	2340      	movs	r3, #64	; 0x40
 800b418:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b41a:	2300      	movs	r3, #0
 800b41c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b41e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b422:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b424:	f107 0308 	add.w	r3, r7, #8
 800b428:	4619      	mov	r1, r3
 800b42a:	6878      	ldr	r0, [r7, #4]
 800b42c:	f7ff fe24 	bl	800b078 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b430:	6878      	ldr	r0, [r7, #4]
 800b432:	f000 fa2f 	bl	800b894 <SDMMC_GetCmdResp3>
 800b436:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b438:	69fb      	ldr	r3, [r7, #28]
}
 800b43a:	4618      	mov	r0, r3
 800b43c:	3720      	adds	r7, #32
 800b43e:	46bd      	mov	sp, r7
 800b440:	bd80      	pop	{r7, pc}
 800b442:	bf00      	nop
 800b444:	80100000 	.word	0x80100000

0800b448 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b088      	sub	sp, #32
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
 800b450:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b456:	2306      	movs	r3, #6
 800b458:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b45a:	2340      	movs	r3, #64	; 0x40
 800b45c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b45e:	2300      	movs	r3, #0
 800b460:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b462:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b466:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b468:	f107 0308 	add.w	r3, r7, #8
 800b46c:	4619      	mov	r1, r3
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	f7ff fe02 	bl	800b078 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b474:	f241 3288 	movw	r2, #5000	; 0x1388
 800b478:	2106      	movs	r1, #6
 800b47a:	6878      	ldr	r0, [r7, #4]
 800b47c:	f000 f8d4 	bl	800b628 <SDMMC_GetCmdResp1>
 800b480:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b482:	69fb      	ldr	r3, [r7, #28]
}
 800b484:	4618      	mov	r0, r3
 800b486:	3720      	adds	r7, #32
 800b488:	46bd      	mov	sp, r7
 800b48a:	bd80      	pop	{r7, pc}

0800b48c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b088      	sub	sp, #32
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b494:	2300      	movs	r3, #0
 800b496:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b498:	2333      	movs	r3, #51	; 0x33
 800b49a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b49c:	2340      	movs	r3, #64	; 0x40
 800b49e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b4a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b4aa:	f107 0308 	add.w	r3, r7, #8
 800b4ae:	4619      	mov	r1, r3
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f7ff fde1 	bl	800b078 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b4b6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4ba:	2133      	movs	r1, #51	; 0x33
 800b4bc:	6878      	ldr	r0, [r7, #4]
 800b4be:	f000 f8b3 	bl	800b628 <SDMMC_GetCmdResp1>
 800b4c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4c4:	69fb      	ldr	r3, [r7, #28]
}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	3720      	adds	r7, #32
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}

0800b4ce <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b4ce:	b580      	push	{r7, lr}
 800b4d0:	b088      	sub	sp, #32
 800b4d2:	af00      	add	r7, sp, #0
 800b4d4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b4da:	2302      	movs	r3, #2
 800b4dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b4de:	23c0      	movs	r3, #192	; 0xc0
 800b4e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b4e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b4ec:	f107 0308 	add.w	r3, r7, #8
 800b4f0:	4619      	mov	r1, r3
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	f7ff fdc0 	bl	800b078 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b4f8:	6878      	ldr	r0, [r7, #4]
 800b4fa:	f000 f983 	bl	800b804 <SDMMC_GetCmdResp2>
 800b4fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b500:	69fb      	ldr	r3, [r7, #28]
}
 800b502:	4618      	mov	r0, r3
 800b504:	3720      	adds	r7, #32
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}

0800b50a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b50a:	b580      	push	{r7, lr}
 800b50c:	b088      	sub	sp, #32
 800b50e:	af00      	add	r7, sp, #0
 800b510:	6078      	str	r0, [r7, #4]
 800b512:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b518:	2309      	movs	r3, #9
 800b51a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b51c:	23c0      	movs	r3, #192	; 0xc0
 800b51e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b520:	2300      	movs	r3, #0
 800b522:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b524:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b528:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b52a:	f107 0308 	add.w	r3, r7, #8
 800b52e:	4619      	mov	r1, r3
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f7ff fda1 	bl	800b078 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f000 f964 	bl	800b804 <SDMMC_GetCmdResp2>
 800b53c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b53e:	69fb      	ldr	r3, [r7, #28]
}
 800b540:	4618      	mov	r0, r3
 800b542:	3720      	adds	r7, #32
 800b544:	46bd      	mov	sp, r7
 800b546:	bd80      	pop	{r7, pc}

0800b548 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b088      	sub	sp, #32
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
 800b550:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b552:	2300      	movs	r3, #0
 800b554:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b556:	2303      	movs	r3, #3
 800b558:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b55a:	2340      	movs	r3, #64	; 0x40
 800b55c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b55e:	2300      	movs	r3, #0
 800b560:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b562:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b566:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b568:	f107 0308 	add.w	r3, r7, #8
 800b56c:	4619      	mov	r1, r3
 800b56e:	6878      	ldr	r0, [r7, #4]
 800b570:	f7ff fd82 	bl	800b078 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b574:	683a      	ldr	r2, [r7, #0]
 800b576:	2103      	movs	r1, #3
 800b578:	6878      	ldr	r0, [r7, #4]
 800b57a:	f000 f9c9 	bl	800b910 <SDMMC_GetCmdResp6>
 800b57e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b580:	69fb      	ldr	r3, [r7, #28]
}
 800b582:	4618      	mov	r0, r3
 800b584:	3720      	adds	r7, #32
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}

0800b58a <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b58a:	b580      	push	{r7, lr}
 800b58c:	b088      	sub	sp, #32
 800b58e:	af00      	add	r7, sp, #0
 800b590:	6078      	str	r0, [r7, #4]
 800b592:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b598:	230d      	movs	r3, #13
 800b59a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b59c:	2340      	movs	r3, #64	; 0x40
 800b59e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b5a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b5a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b5aa:	f107 0308 	add.w	r3, r7, #8
 800b5ae:	4619      	mov	r1, r3
 800b5b0:	6878      	ldr	r0, [r7, #4]
 800b5b2:	f7ff fd61 	bl	800b078 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b5b6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5ba:	210d      	movs	r1, #13
 800b5bc:	6878      	ldr	r0, [r7, #4]
 800b5be:	f000 f833 	bl	800b628 <SDMMC_GetCmdResp1>
 800b5c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5c4:	69fb      	ldr	r3, [r7, #28]
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	3720      	adds	r7, #32
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bd80      	pop	{r7, pc}
	...

0800b5d0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b5d0:	b480      	push	{r7}
 800b5d2:	b085      	sub	sp, #20
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b5d8:	4b11      	ldr	r3, [pc, #68]	; (800b620 <SDMMC_GetCmdError+0x50>)
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	4a11      	ldr	r2, [pc, #68]	; (800b624 <SDMMC_GetCmdError+0x54>)
 800b5de:	fba2 2303 	umull	r2, r3, r2, r3
 800b5e2:	0a5b      	lsrs	r3, r3, #9
 800b5e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5e8:	fb02 f303 	mul.w	r3, r2, r3
 800b5ec:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	1e5a      	subs	r2, r3, #1
 800b5f2:	60fa      	str	r2, [r7, #12]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d102      	bne.n	800b5fe <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b5f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b5fc:	e009      	b.n	800b612 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b606:	2b00      	cmp	r3, #0
 800b608:	d0f1      	beq.n	800b5ee <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	22c5      	movs	r2, #197	; 0xc5
 800b60e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800b610:	2300      	movs	r3, #0
}
 800b612:	4618      	mov	r0, r3
 800b614:	3714      	adds	r7, #20
 800b616:	46bd      	mov	sp, r7
 800b618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61c:	4770      	bx	lr
 800b61e:	bf00      	nop
 800b620:	20000004 	.word	0x20000004
 800b624:	10624dd3 	.word	0x10624dd3

0800b628 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b088      	sub	sp, #32
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	60f8      	str	r0, [r7, #12]
 800b630:	460b      	mov	r3, r1
 800b632:	607a      	str	r2, [r7, #4]
 800b634:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b636:	4b70      	ldr	r3, [pc, #448]	; (800b7f8 <SDMMC_GetCmdResp1+0x1d0>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	4a70      	ldr	r2, [pc, #448]	; (800b7fc <SDMMC_GetCmdResp1+0x1d4>)
 800b63c:	fba2 2303 	umull	r2, r3, r2, r3
 800b640:	0a5a      	lsrs	r2, r3, #9
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	fb02 f303 	mul.w	r3, r2, r3
 800b648:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b64a:	69fb      	ldr	r3, [r7, #28]
 800b64c:	1e5a      	subs	r2, r3, #1
 800b64e:	61fa      	str	r2, [r7, #28]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d102      	bne.n	800b65a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b654:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b658:	e0c9      	b.n	800b7ee <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b65e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b660:	69bb      	ldr	r3, [r7, #24]
 800b662:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b666:	2b00      	cmp	r3, #0
 800b668:	d0ef      	beq.n	800b64a <SDMMC_GetCmdResp1+0x22>
 800b66a:	69bb      	ldr	r3, [r7, #24]
 800b66c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b670:	2b00      	cmp	r3, #0
 800b672:	d1ea      	bne.n	800b64a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b678:	f003 0304 	and.w	r3, r3, #4
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d004      	beq.n	800b68a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	2204      	movs	r2, #4
 800b684:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b686:	2304      	movs	r3, #4
 800b688:	e0b1      	b.n	800b7ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b68e:	f003 0301 	and.w	r3, r3, #1
 800b692:	2b00      	cmp	r3, #0
 800b694:	d004      	beq.n	800b6a0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	2201      	movs	r2, #1
 800b69a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b69c:	2301      	movs	r3, #1
 800b69e:	e0a6      	b.n	800b7ee <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	22c5      	movs	r2, #197	; 0xc5
 800b6a4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b6a6:	68f8      	ldr	r0, [r7, #12]
 800b6a8:	f7ff fd10 	bl	800b0cc <SDMMC_GetCommandResponse>
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	461a      	mov	r2, r3
 800b6b0:	7afb      	ldrb	r3, [r7, #11]
 800b6b2:	4293      	cmp	r3, r2
 800b6b4:	d001      	beq.n	800b6ba <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b6b6:	2301      	movs	r3, #1
 800b6b8:	e099      	b.n	800b7ee <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b6ba:	2100      	movs	r1, #0
 800b6bc:	68f8      	ldr	r0, [r7, #12]
 800b6be:	f7ff fd12 	bl	800b0e6 <SDMMC_GetResponse>
 800b6c2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b6c4:	697a      	ldr	r2, [r7, #20]
 800b6c6:	4b4e      	ldr	r3, [pc, #312]	; (800b800 <SDMMC_GetCmdResp1+0x1d8>)
 800b6c8:	4013      	ands	r3, r2
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d101      	bne.n	800b6d2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	e08d      	b.n	800b7ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b6d2:	697b      	ldr	r3, [r7, #20]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	da02      	bge.n	800b6de <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b6d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b6dc:	e087      	b.n	800b7ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b6de:	697b      	ldr	r3, [r7, #20]
 800b6e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d001      	beq.n	800b6ec <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b6e8:	2340      	movs	r3, #64	; 0x40
 800b6ea:	e080      	b.n	800b7ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b6ec:	697b      	ldr	r3, [r7, #20]
 800b6ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d001      	beq.n	800b6fa <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b6f6:	2380      	movs	r3, #128	; 0x80
 800b6f8:	e079      	b.n	800b7ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b6fa:	697b      	ldr	r3, [r7, #20]
 800b6fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b700:	2b00      	cmp	r3, #0
 800b702:	d002      	beq.n	800b70a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b704:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b708:	e071      	b.n	800b7ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b70a:	697b      	ldr	r3, [r7, #20]
 800b70c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b710:	2b00      	cmp	r3, #0
 800b712:	d002      	beq.n	800b71a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b714:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b718:	e069      	b.n	800b7ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b71a:	697b      	ldr	r3, [r7, #20]
 800b71c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b720:	2b00      	cmp	r3, #0
 800b722:	d002      	beq.n	800b72a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b724:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b728:	e061      	b.n	800b7ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b72a:	697b      	ldr	r3, [r7, #20]
 800b72c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b730:	2b00      	cmp	r3, #0
 800b732:	d002      	beq.n	800b73a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b734:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b738:	e059      	b.n	800b7ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b73a:	697b      	ldr	r3, [r7, #20]
 800b73c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b740:	2b00      	cmp	r3, #0
 800b742:	d002      	beq.n	800b74a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b744:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b748:	e051      	b.n	800b7ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b74a:	697b      	ldr	r3, [r7, #20]
 800b74c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b750:	2b00      	cmp	r3, #0
 800b752:	d002      	beq.n	800b75a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b754:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b758:	e049      	b.n	800b7ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b75a:	697b      	ldr	r3, [r7, #20]
 800b75c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b760:	2b00      	cmp	r3, #0
 800b762:	d002      	beq.n	800b76a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b764:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b768:	e041      	b.n	800b7ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b76a:	697b      	ldr	r3, [r7, #20]
 800b76c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b770:	2b00      	cmp	r3, #0
 800b772:	d002      	beq.n	800b77a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b774:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b778:	e039      	b.n	800b7ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b77a:	697b      	ldr	r3, [r7, #20]
 800b77c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b780:	2b00      	cmp	r3, #0
 800b782:	d002      	beq.n	800b78a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b784:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b788:	e031      	b.n	800b7ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b78a:	697b      	ldr	r3, [r7, #20]
 800b78c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b790:	2b00      	cmp	r3, #0
 800b792:	d002      	beq.n	800b79a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b794:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b798:	e029      	b.n	800b7ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b79a:	697b      	ldr	r3, [r7, #20]
 800b79c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d002      	beq.n	800b7aa <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b7a4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b7a8:	e021      	b.n	800b7ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b7aa:	697b      	ldr	r3, [r7, #20]
 800b7ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d002      	beq.n	800b7ba <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b7b4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b7b8:	e019      	b.n	800b7ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b7ba:	697b      	ldr	r3, [r7, #20]
 800b7bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d002      	beq.n	800b7ca <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b7c4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b7c8:	e011      	b.n	800b7ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b7ca:	697b      	ldr	r3, [r7, #20]
 800b7cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d002      	beq.n	800b7da <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b7d4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b7d8:	e009      	b.n	800b7ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b7da:	697b      	ldr	r3, [r7, #20]
 800b7dc:	f003 0308 	and.w	r3, r3, #8
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d002      	beq.n	800b7ea <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b7e4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b7e8:	e001      	b.n	800b7ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b7ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	3720      	adds	r7, #32
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}
 800b7f6:	bf00      	nop
 800b7f8:	20000004 	.word	0x20000004
 800b7fc:	10624dd3 	.word	0x10624dd3
 800b800:	fdffe008 	.word	0xfdffe008

0800b804 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b804:	b480      	push	{r7}
 800b806:	b085      	sub	sp, #20
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b80c:	4b1f      	ldr	r3, [pc, #124]	; (800b88c <SDMMC_GetCmdResp2+0x88>)
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	4a1f      	ldr	r2, [pc, #124]	; (800b890 <SDMMC_GetCmdResp2+0x8c>)
 800b812:	fba2 2303 	umull	r2, r3, r2, r3
 800b816:	0a5b      	lsrs	r3, r3, #9
 800b818:	f241 3288 	movw	r2, #5000	; 0x1388
 800b81c:	fb02 f303 	mul.w	r3, r2, r3
 800b820:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	1e5a      	subs	r2, r3, #1
 800b826:	60fa      	str	r2, [r7, #12]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d102      	bne.n	800b832 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b82c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b830:	e026      	b.n	800b880 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b836:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b838:	68bb      	ldr	r3, [r7, #8]
 800b83a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d0ef      	beq.n	800b822 <SDMMC_GetCmdResp2+0x1e>
 800b842:	68bb      	ldr	r3, [r7, #8]
 800b844:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d1ea      	bne.n	800b822 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b850:	f003 0304 	and.w	r3, r3, #4
 800b854:	2b00      	cmp	r3, #0
 800b856:	d004      	beq.n	800b862 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2204      	movs	r2, #4
 800b85c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b85e:	2304      	movs	r3, #4
 800b860:	e00e      	b.n	800b880 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b866:	f003 0301 	and.w	r3, r3, #1
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d004      	beq.n	800b878 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	2201      	movs	r2, #1
 800b872:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b874:	2301      	movs	r3, #1
 800b876:	e003      	b.n	800b880 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	22c5      	movs	r2, #197	; 0xc5
 800b87c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b87e:	2300      	movs	r3, #0
}
 800b880:	4618      	mov	r0, r3
 800b882:	3714      	adds	r7, #20
 800b884:	46bd      	mov	sp, r7
 800b886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88a:	4770      	bx	lr
 800b88c:	20000004 	.word	0x20000004
 800b890:	10624dd3 	.word	0x10624dd3

0800b894 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b894:	b480      	push	{r7}
 800b896:	b085      	sub	sp, #20
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b89c:	4b1a      	ldr	r3, [pc, #104]	; (800b908 <SDMMC_GetCmdResp3+0x74>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	4a1a      	ldr	r2, [pc, #104]	; (800b90c <SDMMC_GetCmdResp3+0x78>)
 800b8a2:	fba2 2303 	umull	r2, r3, r2, r3
 800b8a6:	0a5b      	lsrs	r3, r3, #9
 800b8a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8ac:	fb02 f303 	mul.w	r3, r2, r3
 800b8b0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	1e5a      	subs	r2, r3, #1
 800b8b6:	60fa      	str	r2, [r7, #12]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d102      	bne.n	800b8c2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b8bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b8c0:	e01b      	b.n	800b8fa <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8c6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d0ef      	beq.n	800b8b2 <SDMMC_GetCmdResp3+0x1e>
 800b8d2:	68bb      	ldr	r3, [r7, #8]
 800b8d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d1ea      	bne.n	800b8b2 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8e0:	f003 0304 	and.w	r3, r3, #4
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d004      	beq.n	800b8f2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2204      	movs	r2, #4
 800b8ec:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b8ee:	2304      	movs	r3, #4
 800b8f0:	e003      	b.n	800b8fa <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	22c5      	movs	r2, #197	; 0xc5
 800b8f6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b8f8:	2300      	movs	r3, #0
}
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	3714      	adds	r7, #20
 800b8fe:	46bd      	mov	sp, r7
 800b900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b904:	4770      	bx	lr
 800b906:	bf00      	nop
 800b908:	20000004 	.word	0x20000004
 800b90c:	10624dd3 	.word	0x10624dd3

0800b910 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b088      	sub	sp, #32
 800b914:	af00      	add	r7, sp, #0
 800b916:	60f8      	str	r0, [r7, #12]
 800b918:	460b      	mov	r3, r1
 800b91a:	607a      	str	r2, [r7, #4]
 800b91c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b91e:	4b35      	ldr	r3, [pc, #212]	; (800b9f4 <SDMMC_GetCmdResp6+0xe4>)
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	4a35      	ldr	r2, [pc, #212]	; (800b9f8 <SDMMC_GetCmdResp6+0xe8>)
 800b924:	fba2 2303 	umull	r2, r3, r2, r3
 800b928:	0a5b      	lsrs	r3, r3, #9
 800b92a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b92e:	fb02 f303 	mul.w	r3, r2, r3
 800b932:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b934:	69fb      	ldr	r3, [r7, #28]
 800b936:	1e5a      	subs	r2, r3, #1
 800b938:	61fa      	str	r2, [r7, #28]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d102      	bne.n	800b944 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b93e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b942:	e052      	b.n	800b9ea <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b948:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b94a:	69bb      	ldr	r3, [r7, #24]
 800b94c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b950:	2b00      	cmp	r3, #0
 800b952:	d0ef      	beq.n	800b934 <SDMMC_GetCmdResp6+0x24>
 800b954:	69bb      	ldr	r3, [r7, #24]
 800b956:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d1ea      	bne.n	800b934 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b962:	f003 0304 	and.w	r3, r3, #4
 800b966:	2b00      	cmp	r3, #0
 800b968:	d004      	beq.n	800b974 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	2204      	movs	r2, #4
 800b96e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b970:	2304      	movs	r3, #4
 800b972:	e03a      	b.n	800b9ea <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b978:	f003 0301 	and.w	r3, r3, #1
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d004      	beq.n	800b98a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	2201      	movs	r2, #1
 800b984:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b986:	2301      	movs	r3, #1
 800b988:	e02f      	b.n	800b9ea <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b98a:	68f8      	ldr	r0, [r7, #12]
 800b98c:	f7ff fb9e 	bl	800b0cc <SDMMC_GetCommandResponse>
 800b990:	4603      	mov	r3, r0
 800b992:	461a      	mov	r2, r3
 800b994:	7afb      	ldrb	r3, [r7, #11]
 800b996:	4293      	cmp	r3, r2
 800b998:	d001      	beq.n	800b99e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b99a:	2301      	movs	r3, #1
 800b99c:	e025      	b.n	800b9ea <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	22c5      	movs	r2, #197	; 0xc5
 800b9a2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b9a4:	2100      	movs	r1, #0
 800b9a6:	68f8      	ldr	r0, [r7, #12]
 800b9a8:	f7ff fb9d 	bl	800b0e6 <SDMMC_GetResponse>
 800b9ac:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b9ae:	697b      	ldr	r3, [r7, #20]
 800b9b0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d106      	bne.n	800b9c6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b9b8:	697b      	ldr	r3, [r7, #20]
 800b9ba:	0c1b      	lsrs	r3, r3, #16
 800b9bc:	b29a      	uxth	r2, r3
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	e011      	b.n	800b9ea <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b9c6:	697b      	ldr	r3, [r7, #20]
 800b9c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d002      	beq.n	800b9d6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b9d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b9d4:	e009      	b.n	800b9ea <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b9d6:	697b      	ldr	r3, [r7, #20]
 800b9d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d002      	beq.n	800b9e6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b9e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b9e4:	e001      	b.n	800b9ea <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b9e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	3720      	adds	r7, #32
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}
 800b9f2:	bf00      	nop
 800b9f4:	20000004 	.word	0x20000004
 800b9f8:	10624dd3 	.word	0x10624dd3

0800b9fc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b9fc:	b480      	push	{r7}
 800b9fe:	b085      	sub	sp, #20
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ba04:	4b22      	ldr	r3, [pc, #136]	; (800ba90 <SDMMC_GetCmdResp7+0x94>)
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	4a22      	ldr	r2, [pc, #136]	; (800ba94 <SDMMC_GetCmdResp7+0x98>)
 800ba0a:	fba2 2303 	umull	r2, r3, r2, r3
 800ba0e:	0a5b      	lsrs	r3, r3, #9
 800ba10:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba14:	fb02 f303 	mul.w	r3, r2, r3
 800ba18:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	1e5a      	subs	r2, r3, #1
 800ba1e:	60fa      	str	r2, [r7, #12]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d102      	bne.n	800ba2a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ba24:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ba28:	e02c      	b.n	800ba84 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba2e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ba30:	68bb      	ldr	r3, [r7, #8]
 800ba32:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d0ef      	beq.n	800ba1a <SDMMC_GetCmdResp7+0x1e>
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d1ea      	bne.n	800ba1a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba48:	f003 0304 	and.w	r3, r3, #4
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d004      	beq.n	800ba5a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2204      	movs	r2, #4
 800ba54:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ba56:	2304      	movs	r3, #4
 800ba58:	e014      	b.n	800ba84 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba5e:	f003 0301 	and.w	r3, r3, #1
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d004      	beq.n	800ba70 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	2201      	movs	r2, #1
 800ba6a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ba6c:	2301      	movs	r3, #1
 800ba6e:	e009      	b.n	800ba84 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d002      	beq.n	800ba82 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2240      	movs	r2, #64	; 0x40
 800ba80:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ba82:	2300      	movs	r3, #0
  
}
 800ba84:	4618      	mov	r0, r3
 800ba86:	3714      	adds	r7, #20
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8e:	4770      	bx	lr
 800ba90:	20000004 	.word	0x20000004
 800ba94:	10624dd3 	.word	0x10624dd3

0800ba98 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ba9c:	4904      	ldr	r1, [pc, #16]	; (800bab0 <MX_FATFS_Init+0x18>)
 800ba9e:	4805      	ldr	r0, [pc, #20]	; (800bab4 <MX_FATFS_Init+0x1c>)
 800baa0:	f000 faa0 	bl	800bfe4 <FATFS_LinkDriver>
 800baa4:	4603      	mov	r3, r0
 800baa6:	461a      	mov	r2, r3
 800baa8:	4b03      	ldr	r3, [pc, #12]	; (800bab8 <MX_FATFS_Init+0x20>)
 800baaa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800baac:	bf00      	nop
 800baae:	bd80      	pop	{r7, pc}
 800bab0:	200008a0 	.word	0x200008a0
 800bab4:	0800eea4 	.word	0x0800eea4
 800bab8:	2000089c 	.word	0x2000089c

0800babc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b082      	sub	sp, #8
 800bac0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800bac2:	2300      	movs	r3, #0
 800bac4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800bac6:	f000 f896 	bl	800bbf6 <BSP_SD_IsDetected>
 800baca:	4603      	mov	r3, r0
 800bacc:	2b01      	cmp	r3, #1
 800bace:	d001      	beq.n	800bad4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800bad0:	2302      	movs	r3, #2
 800bad2:	e012      	b.n	800bafa <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800bad4:	480b      	ldr	r0, [pc, #44]	; (800bb04 <BSP_SD_Init+0x48>)
 800bad6:	f7fa fcfb 	bl	80064d0 <HAL_SD_Init>
 800bada:	4603      	mov	r3, r0
 800badc:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800bade:	79fb      	ldrb	r3, [r7, #7]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d109      	bne.n	800baf8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800bae4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800bae8:	4806      	ldr	r0, [pc, #24]	; (800bb04 <BSP_SD_Init+0x48>)
 800baea:	f7fb fabf 	bl	800706c <HAL_SD_ConfigWideBusOperation>
 800baee:	4603      	mov	r3, r0
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d001      	beq.n	800baf8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800baf4:	2301      	movs	r3, #1
 800baf6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800baf8:	79fb      	ldrb	r3, [r7, #7]
}
 800bafa:	4618      	mov	r0, r3
 800bafc:	3708      	adds	r7, #8
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bd80      	pop	{r7, pc}
 800bb02:	bf00      	nop
 800bb04:	20000534 	.word	0x20000534

0800bb08 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b086      	sub	sp, #24
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	60f8      	str	r0, [r7, #12]
 800bb10:	60b9      	str	r1, [r7, #8]
 800bb12:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800bb14:	2300      	movs	r3, #0
 800bb16:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	68ba      	ldr	r2, [r7, #8]
 800bb1c:	68f9      	ldr	r1, [r7, #12]
 800bb1e:	4806      	ldr	r0, [pc, #24]	; (800bb38 <BSP_SD_ReadBlocks_DMA+0x30>)
 800bb20:	f7fa fd8c 	bl	800663c <HAL_SD_ReadBlocks_DMA>
 800bb24:	4603      	mov	r3, r0
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d001      	beq.n	800bb2e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800bb2a:	2301      	movs	r3, #1
 800bb2c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800bb2e:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb30:	4618      	mov	r0, r3
 800bb32:	3718      	adds	r7, #24
 800bb34:	46bd      	mov	sp, r7
 800bb36:	bd80      	pop	{r7, pc}
 800bb38:	20000534 	.word	0x20000534

0800bb3c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b086      	sub	sp, #24
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	60f8      	str	r0, [r7, #12]
 800bb44:	60b9      	str	r1, [r7, #8]
 800bb46:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800bb48:	2300      	movs	r3, #0
 800bb4a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	68ba      	ldr	r2, [r7, #8]
 800bb50:	68f9      	ldr	r1, [r7, #12]
 800bb52:	4806      	ldr	r0, [pc, #24]	; (800bb6c <BSP_SD_WriteBlocks_DMA+0x30>)
 800bb54:	f7fa fe54 	bl	8006800 <HAL_SD_WriteBlocks_DMA>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d001      	beq.n	800bb62 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800bb5e:	2301      	movs	r3, #1
 800bb60:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800bb62:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb64:	4618      	mov	r0, r3
 800bb66:	3718      	adds	r7, #24
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	bd80      	pop	{r7, pc}
 800bb6c:	20000534 	.word	0x20000534

0800bb70 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800bb74:	4805      	ldr	r0, [pc, #20]	; (800bb8c <BSP_SD_GetCardState+0x1c>)
 800bb76:	f7fb fb13 	bl	80071a0 <HAL_SD_GetCardState>
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	2b04      	cmp	r3, #4
 800bb7e:	bf14      	ite	ne
 800bb80:	2301      	movne	r3, #1
 800bb82:	2300      	moveq	r3, #0
 800bb84:	b2db      	uxtb	r3, r3
}
 800bb86:	4618      	mov	r0, r3
 800bb88:	bd80      	pop	{r7, pc}
 800bb8a:	bf00      	nop
 800bb8c:	20000534 	.word	0x20000534

0800bb90 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b082      	sub	sp, #8
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800bb98:	6879      	ldr	r1, [r7, #4]
 800bb9a:	4803      	ldr	r0, [pc, #12]	; (800bba8 <BSP_SD_GetCardInfo+0x18>)
 800bb9c:	f7fb fa3a 	bl	8007014 <HAL_SD_GetCardInfo>
}
 800bba0:	bf00      	nop
 800bba2:	3708      	adds	r7, #8
 800bba4:	46bd      	mov	sp, r7
 800bba6:	bd80      	pop	{r7, pc}
 800bba8:	20000534 	.word	0x20000534

0800bbac <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b082      	sub	sp, #8
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800bbb4:	f000 f818 	bl	800bbe8 <BSP_SD_AbortCallback>
}
 800bbb8:	bf00      	nop
 800bbba:	3708      	adds	r7, #8
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	bd80      	pop	{r7, pc}

0800bbc0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b082      	sub	sp, #8
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800bbc8:	f000 f9a8 	bl	800bf1c <BSP_SD_WriteCpltCallback>
}
 800bbcc:	bf00      	nop
 800bbce:	3708      	adds	r7, #8
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	bd80      	pop	{r7, pc}

0800bbd4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b082      	sub	sp, #8
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800bbdc:	f000 f9aa 	bl	800bf34 <BSP_SD_ReadCpltCallback>
}
 800bbe0:	bf00      	nop
 800bbe2:	3708      	adds	r7, #8
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	bd80      	pop	{r7, pc}

0800bbe8 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800bbe8:	b480      	push	{r7}
 800bbea:	af00      	add	r7, sp, #0

}
 800bbec:	bf00      	nop
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf4:	4770      	bx	lr

0800bbf6 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800bbf6:	b580      	push	{r7, lr}
 800bbf8:	b082      	sub	sp, #8
 800bbfa:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800bbfc:	2301      	movs	r3, #1
 800bbfe:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800bc00:	f000 f80c 	bl	800bc1c <BSP_PlatformIsDetected>
 800bc04:	4603      	mov	r3, r0
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d101      	bne.n	800bc0e <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800bc0e:	79fb      	ldrb	r3, [r7, #7]
 800bc10:	b2db      	uxtb	r3, r3
}
 800bc12:	4618      	mov	r0, r3
 800bc14:	3708      	adds	r7, #8
 800bc16:	46bd      	mov	sp, r7
 800bc18:	bd80      	pop	{r7, pc}
	...

0800bc1c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b082      	sub	sp, #8
 800bc20:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800bc22:	2301      	movs	r3, #1
 800bc24:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800bc26:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800bc2a:	4806      	ldr	r0, [pc, #24]	; (800bc44 <BSP_PlatformIsDetected+0x28>)
 800bc2c:	f7f9 fb32 	bl	8005294 <HAL_GPIO_ReadPin>
 800bc30:	4603      	mov	r3, r0
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d001      	beq.n	800bc3a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800bc36:	2300      	movs	r3, #0
 800bc38:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800bc3a:	79fb      	ldrb	r3, [r7, #7]
}
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	3708      	adds	r7, #8
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bd80      	pop	{r7, pc}
 800bc44:	40020000 	.word	0x40020000

0800bc48 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b084      	sub	sp, #16
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800bc50:	f7f8 f80a 	bl	8003c68 <HAL_GetTick>
 800bc54:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800bc56:	e006      	b.n	800bc66 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bc58:	f7ff ff8a 	bl	800bb70 <BSP_SD_GetCardState>
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d101      	bne.n	800bc66 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800bc62:	2300      	movs	r3, #0
 800bc64:	e009      	b.n	800bc7a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800bc66:	f7f7 ffff 	bl	8003c68 <HAL_GetTick>
 800bc6a:	4602      	mov	r2, r0
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	1ad3      	subs	r3, r2, r3
 800bc70:	687a      	ldr	r2, [r7, #4]
 800bc72:	429a      	cmp	r2, r3
 800bc74:	d8f0      	bhi.n	800bc58 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800bc76:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	3710      	adds	r7, #16
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bd80      	pop	{r7, pc}
	...

0800bc84 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b082      	sub	sp, #8
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800bc8e:	4b0b      	ldr	r3, [pc, #44]	; (800bcbc <SD_CheckStatus+0x38>)
 800bc90:	2201      	movs	r2, #1
 800bc92:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800bc94:	f7ff ff6c 	bl	800bb70 <BSP_SD_GetCardState>
 800bc98:	4603      	mov	r3, r0
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d107      	bne.n	800bcae <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800bc9e:	4b07      	ldr	r3, [pc, #28]	; (800bcbc <SD_CheckStatus+0x38>)
 800bca0:	781b      	ldrb	r3, [r3, #0]
 800bca2:	b2db      	uxtb	r3, r3
 800bca4:	f023 0301 	bic.w	r3, r3, #1
 800bca8:	b2da      	uxtb	r2, r3
 800bcaa:	4b04      	ldr	r3, [pc, #16]	; (800bcbc <SD_CheckStatus+0x38>)
 800bcac:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800bcae:	4b03      	ldr	r3, [pc, #12]	; (800bcbc <SD_CheckStatus+0x38>)
 800bcb0:	781b      	ldrb	r3, [r3, #0]
 800bcb2:	b2db      	uxtb	r3, r3
}
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	3708      	adds	r7, #8
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	bd80      	pop	{r7, pc}
 800bcbc:	2000000d 	.word	0x2000000d

0800bcc0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b082      	sub	sp, #8
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800bcca:	f7ff fef7 	bl	800babc <BSP_SD_Init>
 800bcce:	4603      	mov	r3, r0
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d107      	bne.n	800bce4 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800bcd4:	79fb      	ldrb	r3, [r7, #7]
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	f7ff ffd4 	bl	800bc84 <SD_CheckStatus>
 800bcdc:	4603      	mov	r3, r0
 800bcde:	461a      	mov	r2, r3
 800bce0:	4b04      	ldr	r3, [pc, #16]	; (800bcf4 <SD_initialize+0x34>)
 800bce2:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800bce4:	4b03      	ldr	r3, [pc, #12]	; (800bcf4 <SD_initialize+0x34>)
 800bce6:	781b      	ldrb	r3, [r3, #0]
 800bce8:	b2db      	uxtb	r3, r3
}
 800bcea:	4618      	mov	r0, r3
 800bcec:	3708      	adds	r7, #8
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	bd80      	pop	{r7, pc}
 800bcf2:	bf00      	nop
 800bcf4:	2000000d 	.word	0x2000000d

0800bcf8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b082      	sub	sp, #8
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	4603      	mov	r3, r0
 800bd00:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800bd02:	79fb      	ldrb	r3, [r7, #7]
 800bd04:	4618      	mov	r0, r3
 800bd06:	f7ff ffbd 	bl	800bc84 <SD_CheckStatus>
 800bd0a:	4603      	mov	r3, r0
}
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	3708      	adds	r7, #8
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}

0800bd14 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b086      	sub	sp, #24
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	60b9      	str	r1, [r7, #8]
 800bd1c:	607a      	str	r2, [r7, #4]
 800bd1e:	603b      	str	r3, [r7, #0]
 800bd20:	4603      	mov	r3, r0
 800bd22:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bd24:	2301      	movs	r3, #1
 800bd26:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800bd28:	f247 5030 	movw	r0, #30000	; 0x7530
 800bd2c:	f7ff ff8c 	bl	800bc48 <SD_CheckStatusWithTimeout>
 800bd30:	4603      	mov	r3, r0
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	da01      	bge.n	800bd3a <SD_read+0x26>
  {
    return res;
 800bd36:	7dfb      	ldrb	r3, [r7, #23]
 800bd38:	e03b      	b.n	800bdb2 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800bd3a:	683a      	ldr	r2, [r7, #0]
 800bd3c:	6879      	ldr	r1, [r7, #4]
 800bd3e:	68b8      	ldr	r0, [r7, #8]
 800bd40:	f7ff fee2 	bl	800bb08 <BSP_SD_ReadBlocks_DMA>
 800bd44:	4603      	mov	r3, r0
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d132      	bne.n	800bdb0 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800bd4a:	4b1c      	ldr	r3, [pc, #112]	; (800bdbc <SD_read+0xa8>)
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800bd50:	f7f7 ff8a 	bl	8003c68 <HAL_GetTick>
 800bd54:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800bd56:	bf00      	nop
 800bd58:	4b18      	ldr	r3, [pc, #96]	; (800bdbc <SD_read+0xa8>)
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d108      	bne.n	800bd72 <SD_read+0x5e>
 800bd60:	f7f7 ff82 	bl	8003c68 <HAL_GetTick>
 800bd64:	4602      	mov	r2, r0
 800bd66:	693b      	ldr	r3, [r7, #16]
 800bd68:	1ad3      	subs	r3, r2, r3
 800bd6a:	f247 522f 	movw	r2, #29999	; 0x752f
 800bd6e:	4293      	cmp	r3, r2
 800bd70:	d9f2      	bls.n	800bd58 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800bd72:	4b12      	ldr	r3, [pc, #72]	; (800bdbc <SD_read+0xa8>)
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d102      	bne.n	800bd80 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800bd7a:	2301      	movs	r3, #1
 800bd7c:	75fb      	strb	r3, [r7, #23]
 800bd7e:	e017      	b.n	800bdb0 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800bd80:	4b0e      	ldr	r3, [pc, #56]	; (800bdbc <SD_read+0xa8>)
 800bd82:	2200      	movs	r2, #0
 800bd84:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800bd86:	f7f7 ff6f 	bl	8003c68 <HAL_GetTick>
 800bd8a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800bd8c:	e007      	b.n	800bd9e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bd8e:	f7ff feef 	bl	800bb70 <BSP_SD_GetCardState>
 800bd92:	4603      	mov	r3, r0
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d102      	bne.n	800bd9e <SD_read+0x8a>
          {
            res = RES_OK;
 800bd98:	2300      	movs	r3, #0
 800bd9a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800bd9c:	e008      	b.n	800bdb0 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800bd9e:	f7f7 ff63 	bl	8003c68 <HAL_GetTick>
 800bda2:	4602      	mov	r2, r0
 800bda4:	693b      	ldr	r3, [r7, #16]
 800bda6:	1ad3      	subs	r3, r2, r3
 800bda8:	f247 522f 	movw	r2, #29999	; 0x752f
 800bdac:	4293      	cmp	r3, r2
 800bdae:	d9ee      	bls.n	800bd8e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800bdb0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	3718      	adds	r7, #24
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bd80      	pop	{r7, pc}
 800bdba:	bf00      	nop
 800bdbc:	2000023c 	.word	0x2000023c

0800bdc0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b086      	sub	sp, #24
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	60b9      	str	r1, [r7, #8]
 800bdc8:	607a      	str	r2, [r7, #4]
 800bdca:	603b      	str	r3, [r7, #0]
 800bdcc:	4603      	mov	r3, r0
 800bdce:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bdd0:	2301      	movs	r3, #1
 800bdd2:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800bdd4:	4b24      	ldr	r3, [pc, #144]	; (800be68 <SD_write+0xa8>)
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800bdda:	f247 5030 	movw	r0, #30000	; 0x7530
 800bdde:	f7ff ff33 	bl	800bc48 <SD_CheckStatusWithTimeout>
 800bde2:	4603      	mov	r3, r0
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	da01      	bge.n	800bdec <SD_write+0x2c>
  {
    return res;
 800bde8:	7dfb      	ldrb	r3, [r7, #23]
 800bdea:	e038      	b.n	800be5e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800bdec:	683a      	ldr	r2, [r7, #0]
 800bdee:	6879      	ldr	r1, [r7, #4]
 800bdf0:	68b8      	ldr	r0, [r7, #8]
 800bdf2:	f7ff fea3 	bl	800bb3c <BSP_SD_WriteBlocks_DMA>
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d12f      	bne.n	800be5c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800bdfc:	f7f7 ff34 	bl	8003c68 <HAL_GetTick>
 800be00:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800be02:	bf00      	nop
 800be04:	4b18      	ldr	r3, [pc, #96]	; (800be68 <SD_write+0xa8>)
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d108      	bne.n	800be1e <SD_write+0x5e>
 800be0c:	f7f7 ff2c 	bl	8003c68 <HAL_GetTick>
 800be10:	4602      	mov	r2, r0
 800be12:	693b      	ldr	r3, [r7, #16]
 800be14:	1ad3      	subs	r3, r2, r3
 800be16:	f247 522f 	movw	r2, #29999	; 0x752f
 800be1a:	4293      	cmp	r3, r2
 800be1c:	d9f2      	bls.n	800be04 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800be1e:	4b12      	ldr	r3, [pc, #72]	; (800be68 <SD_write+0xa8>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d102      	bne.n	800be2c <SD_write+0x6c>
      {
        res = RES_ERROR;
 800be26:	2301      	movs	r3, #1
 800be28:	75fb      	strb	r3, [r7, #23]
 800be2a:	e017      	b.n	800be5c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800be2c:	4b0e      	ldr	r3, [pc, #56]	; (800be68 <SD_write+0xa8>)
 800be2e:	2200      	movs	r2, #0
 800be30:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800be32:	f7f7 ff19 	bl	8003c68 <HAL_GetTick>
 800be36:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800be38:	e007      	b.n	800be4a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800be3a:	f7ff fe99 	bl	800bb70 <BSP_SD_GetCardState>
 800be3e:	4603      	mov	r3, r0
 800be40:	2b00      	cmp	r3, #0
 800be42:	d102      	bne.n	800be4a <SD_write+0x8a>
          {
            res = RES_OK;
 800be44:	2300      	movs	r3, #0
 800be46:	75fb      	strb	r3, [r7, #23]
            break;
 800be48:	e008      	b.n	800be5c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800be4a:	f7f7 ff0d 	bl	8003c68 <HAL_GetTick>
 800be4e:	4602      	mov	r2, r0
 800be50:	693b      	ldr	r3, [r7, #16]
 800be52:	1ad3      	subs	r3, r2, r3
 800be54:	f247 522f 	movw	r2, #29999	; 0x752f
 800be58:	4293      	cmp	r3, r2
 800be5a:	d9ee      	bls.n	800be3a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800be5c:	7dfb      	ldrb	r3, [r7, #23]
}
 800be5e:	4618      	mov	r0, r3
 800be60:	3718      	adds	r7, #24
 800be62:	46bd      	mov	sp, r7
 800be64:	bd80      	pop	{r7, pc}
 800be66:	bf00      	nop
 800be68:	20000238 	.word	0x20000238

0800be6c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b08c      	sub	sp, #48	; 0x30
 800be70:	af00      	add	r7, sp, #0
 800be72:	4603      	mov	r3, r0
 800be74:	603a      	str	r2, [r7, #0]
 800be76:	71fb      	strb	r3, [r7, #7]
 800be78:	460b      	mov	r3, r1
 800be7a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800be7c:	2301      	movs	r3, #1
 800be7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800be82:	4b25      	ldr	r3, [pc, #148]	; (800bf18 <SD_ioctl+0xac>)
 800be84:	781b      	ldrb	r3, [r3, #0]
 800be86:	b2db      	uxtb	r3, r3
 800be88:	f003 0301 	and.w	r3, r3, #1
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d001      	beq.n	800be94 <SD_ioctl+0x28>
 800be90:	2303      	movs	r3, #3
 800be92:	e03c      	b.n	800bf0e <SD_ioctl+0xa2>

  switch (cmd)
 800be94:	79bb      	ldrb	r3, [r7, #6]
 800be96:	2b03      	cmp	r3, #3
 800be98:	d834      	bhi.n	800bf04 <SD_ioctl+0x98>
 800be9a:	a201      	add	r2, pc, #4	; (adr r2, 800bea0 <SD_ioctl+0x34>)
 800be9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bea0:	0800beb1 	.word	0x0800beb1
 800bea4:	0800beb9 	.word	0x0800beb9
 800bea8:	0800bed1 	.word	0x0800bed1
 800beac:	0800beeb 	.word	0x0800beeb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800beb0:	2300      	movs	r3, #0
 800beb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800beb6:	e028      	b.n	800bf0a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800beb8:	f107 030c 	add.w	r3, r7, #12
 800bebc:	4618      	mov	r0, r3
 800bebe:	f7ff fe67 	bl	800bb90 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800bec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bec4:	683b      	ldr	r3, [r7, #0]
 800bec6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800bec8:	2300      	movs	r3, #0
 800beca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bece:	e01c      	b.n	800bf0a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800bed0:	f107 030c 	add.w	r3, r7, #12
 800bed4:	4618      	mov	r0, r3
 800bed6:	f7ff fe5b 	bl	800bb90 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800beda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bedc:	b29a      	uxth	r2, r3
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800bee2:	2300      	movs	r3, #0
 800bee4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bee8:	e00f      	b.n	800bf0a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800beea:	f107 030c 	add.w	r3, r7, #12
 800beee:	4618      	mov	r0, r3
 800bef0:	f7ff fe4e 	bl	800bb90 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800bef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bef6:	0a5a      	lsrs	r2, r3, #9
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800befc:	2300      	movs	r3, #0
 800befe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bf02:	e002      	b.n	800bf0a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800bf04:	2304      	movs	r3, #4
 800bf06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800bf0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800bf0e:	4618      	mov	r0, r3
 800bf10:	3730      	adds	r7, #48	; 0x30
 800bf12:	46bd      	mov	sp, r7
 800bf14:	bd80      	pop	{r7, pc}
 800bf16:	bf00      	nop
 800bf18:	2000000d 	.word	0x2000000d

0800bf1c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800bf1c:	b480      	push	{r7}
 800bf1e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800bf20:	4b03      	ldr	r3, [pc, #12]	; (800bf30 <BSP_SD_WriteCpltCallback+0x14>)
 800bf22:	2201      	movs	r2, #1
 800bf24:	601a      	str	r2, [r3, #0]
}
 800bf26:	bf00      	nop
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2e:	4770      	bx	lr
 800bf30:	20000238 	.word	0x20000238

0800bf34 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800bf34:	b480      	push	{r7}
 800bf36:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800bf38:	4b03      	ldr	r3, [pc, #12]	; (800bf48 <BSP_SD_ReadCpltCallback+0x14>)
 800bf3a:	2201      	movs	r2, #1
 800bf3c:	601a      	str	r2, [r3, #0]
}
 800bf3e:	bf00      	nop
 800bf40:	46bd      	mov	sp, r7
 800bf42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf46:	4770      	bx	lr
 800bf48:	2000023c 	.word	0x2000023c

0800bf4c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800bf4c:	b480      	push	{r7}
 800bf4e:	b087      	sub	sp, #28
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	60f8      	str	r0, [r7, #12]
 800bf54:	60b9      	str	r1, [r7, #8]
 800bf56:	4613      	mov	r3, r2
 800bf58:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800bf5a:	2301      	movs	r3, #1
 800bf5c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800bf5e:	2300      	movs	r3, #0
 800bf60:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800bf62:	4b1f      	ldr	r3, [pc, #124]	; (800bfe0 <FATFS_LinkDriverEx+0x94>)
 800bf64:	7a5b      	ldrb	r3, [r3, #9]
 800bf66:	b2db      	uxtb	r3, r3
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d131      	bne.n	800bfd0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800bf6c:	4b1c      	ldr	r3, [pc, #112]	; (800bfe0 <FATFS_LinkDriverEx+0x94>)
 800bf6e:	7a5b      	ldrb	r3, [r3, #9]
 800bf70:	b2db      	uxtb	r3, r3
 800bf72:	461a      	mov	r2, r3
 800bf74:	4b1a      	ldr	r3, [pc, #104]	; (800bfe0 <FATFS_LinkDriverEx+0x94>)
 800bf76:	2100      	movs	r1, #0
 800bf78:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800bf7a:	4b19      	ldr	r3, [pc, #100]	; (800bfe0 <FATFS_LinkDriverEx+0x94>)
 800bf7c:	7a5b      	ldrb	r3, [r3, #9]
 800bf7e:	b2db      	uxtb	r3, r3
 800bf80:	4a17      	ldr	r2, [pc, #92]	; (800bfe0 <FATFS_LinkDriverEx+0x94>)
 800bf82:	009b      	lsls	r3, r3, #2
 800bf84:	4413      	add	r3, r2
 800bf86:	68fa      	ldr	r2, [r7, #12]
 800bf88:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800bf8a:	4b15      	ldr	r3, [pc, #84]	; (800bfe0 <FATFS_LinkDriverEx+0x94>)
 800bf8c:	7a5b      	ldrb	r3, [r3, #9]
 800bf8e:	b2db      	uxtb	r3, r3
 800bf90:	461a      	mov	r2, r3
 800bf92:	4b13      	ldr	r3, [pc, #76]	; (800bfe0 <FATFS_LinkDriverEx+0x94>)
 800bf94:	4413      	add	r3, r2
 800bf96:	79fa      	ldrb	r2, [r7, #7]
 800bf98:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800bf9a:	4b11      	ldr	r3, [pc, #68]	; (800bfe0 <FATFS_LinkDriverEx+0x94>)
 800bf9c:	7a5b      	ldrb	r3, [r3, #9]
 800bf9e:	b2db      	uxtb	r3, r3
 800bfa0:	1c5a      	adds	r2, r3, #1
 800bfa2:	b2d1      	uxtb	r1, r2
 800bfa4:	4a0e      	ldr	r2, [pc, #56]	; (800bfe0 <FATFS_LinkDriverEx+0x94>)
 800bfa6:	7251      	strb	r1, [r2, #9]
 800bfa8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800bfaa:	7dbb      	ldrb	r3, [r7, #22]
 800bfac:	3330      	adds	r3, #48	; 0x30
 800bfae:	b2da      	uxtb	r2, r3
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800bfb4:	68bb      	ldr	r3, [r7, #8]
 800bfb6:	3301      	adds	r3, #1
 800bfb8:	223a      	movs	r2, #58	; 0x3a
 800bfba:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800bfbc:	68bb      	ldr	r3, [r7, #8]
 800bfbe:	3302      	adds	r3, #2
 800bfc0:	222f      	movs	r2, #47	; 0x2f
 800bfc2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800bfc4:	68bb      	ldr	r3, [r7, #8]
 800bfc6:	3303      	adds	r3, #3
 800bfc8:	2200      	movs	r2, #0
 800bfca:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bfcc:	2300      	movs	r3, #0
 800bfce:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800bfd0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	371c      	adds	r7, #28
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfdc:	4770      	bx	lr
 800bfde:	bf00      	nop
 800bfe0:	20000240 	.word	0x20000240

0800bfe4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b082      	sub	sp, #8
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
 800bfec:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bfee:	2200      	movs	r2, #0
 800bff0:	6839      	ldr	r1, [r7, #0]
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	f7ff ffaa 	bl	800bf4c <FATFS_LinkDriverEx>
 800bff8:	4603      	mov	r3, r0
}
 800bffa:	4618      	mov	r0, r3
 800bffc:	3708      	adds	r7, #8
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}
	...

0800c004 <__errno>:
 800c004:	4b01      	ldr	r3, [pc, #4]	; (800c00c <__errno+0x8>)
 800c006:	6818      	ldr	r0, [r3, #0]
 800c008:	4770      	bx	lr
 800c00a:	bf00      	nop
 800c00c:	20000010 	.word	0x20000010

0800c010 <__libc_init_array>:
 800c010:	b570      	push	{r4, r5, r6, lr}
 800c012:	4d0d      	ldr	r5, [pc, #52]	; (800c048 <__libc_init_array+0x38>)
 800c014:	4c0d      	ldr	r4, [pc, #52]	; (800c04c <__libc_init_array+0x3c>)
 800c016:	1b64      	subs	r4, r4, r5
 800c018:	10a4      	asrs	r4, r4, #2
 800c01a:	2600      	movs	r6, #0
 800c01c:	42a6      	cmp	r6, r4
 800c01e:	d109      	bne.n	800c034 <__libc_init_array+0x24>
 800c020:	4d0b      	ldr	r5, [pc, #44]	; (800c050 <__libc_init_array+0x40>)
 800c022:	4c0c      	ldr	r4, [pc, #48]	; (800c054 <__libc_init_array+0x44>)
 800c024:	f002 feb6 	bl	800ed94 <_init>
 800c028:	1b64      	subs	r4, r4, r5
 800c02a:	10a4      	asrs	r4, r4, #2
 800c02c:	2600      	movs	r6, #0
 800c02e:	42a6      	cmp	r6, r4
 800c030:	d105      	bne.n	800c03e <__libc_init_array+0x2e>
 800c032:	bd70      	pop	{r4, r5, r6, pc}
 800c034:	f855 3b04 	ldr.w	r3, [r5], #4
 800c038:	4798      	blx	r3
 800c03a:	3601      	adds	r6, #1
 800c03c:	e7ee      	b.n	800c01c <__libc_init_array+0xc>
 800c03e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c042:	4798      	blx	r3
 800c044:	3601      	adds	r6, #1
 800c046:	e7f2      	b.n	800c02e <__libc_init_array+0x1e>
 800c048:	0800f2a4 	.word	0x0800f2a4
 800c04c:	0800f2a4 	.word	0x0800f2a4
 800c050:	0800f2a4 	.word	0x0800f2a4
 800c054:	0800f2a8 	.word	0x0800f2a8

0800c058 <memset>:
 800c058:	4402      	add	r2, r0
 800c05a:	4603      	mov	r3, r0
 800c05c:	4293      	cmp	r3, r2
 800c05e:	d100      	bne.n	800c062 <memset+0xa>
 800c060:	4770      	bx	lr
 800c062:	f803 1b01 	strb.w	r1, [r3], #1
 800c066:	e7f9      	b.n	800c05c <memset+0x4>

0800c068 <__cvt>:
 800c068:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c06c:	ec55 4b10 	vmov	r4, r5, d0
 800c070:	2d00      	cmp	r5, #0
 800c072:	460e      	mov	r6, r1
 800c074:	4619      	mov	r1, r3
 800c076:	462b      	mov	r3, r5
 800c078:	bfbb      	ittet	lt
 800c07a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c07e:	461d      	movlt	r5, r3
 800c080:	2300      	movge	r3, #0
 800c082:	232d      	movlt	r3, #45	; 0x2d
 800c084:	700b      	strb	r3, [r1, #0]
 800c086:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c088:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c08c:	4691      	mov	r9, r2
 800c08e:	f023 0820 	bic.w	r8, r3, #32
 800c092:	bfbc      	itt	lt
 800c094:	4622      	movlt	r2, r4
 800c096:	4614      	movlt	r4, r2
 800c098:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c09c:	d005      	beq.n	800c0aa <__cvt+0x42>
 800c09e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c0a2:	d100      	bne.n	800c0a6 <__cvt+0x3e>
 800c0a4:	3601      	adds	r6, #1
 800c0a6:	2102      	movs	r1, #2
 800c0a8:	e000      	b.n	800c0ac <__cvt+0x44>
 800c0aa:	2103      	movs	r1, #3
 800c0ac:	ab03      	add	r3, sp, #12
 800c0ae:	9301      	str	r3, [sp, #4]
 800c0b0:	ab02      	add	r3, sp, #8
 800c0b2:	9300      	str	r3, [sp, #0]
 800c0b4:	ec45 4b10 	vmov	d0, r4, r5
 800c0b8:	4653      	mov	r3, sl
 800c0ba:	4632      	mov	r2, r6
 800c0bc:	f000 fcec 	bl	800ca98 <_dtoa_r>
 800c0c0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c0c4:	4607      	mov	r7, r0
 800c0c6:	d102      	bne.n	800c0ce <__cvt+0x66>
 800c0c8:	f019 0f01 	tst.w	r9, #1
 800c0cc:	d022      	beq.n	800c114 <__cvt+0xac>
 800c0ce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c0d2:	eb07 0906 	add.w	r9, r7, r6
 800c0d6:	d110      	bne.n	800c0fa <__cvt+0x92>
 800c0d8:	783b      	ldrb	r3, [r7, #0]
 800c0da:	2b30      	cmp	r3, #48	; 0x30
 800c0dc:	d10a      	bne.n	800c0f4 <__cvt+0x8c>
 800c0de:	2200      	movs	r2, #0
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	4620      	mov	r0, r4
 800c0e4:	4629      	mov	r1, r5
 800c0e6:	f7f4 fd17 	bl	8000b18 <__aeabi_dcmpeq>
 800c0ea:	b918      	cbnz	r0, 800c0f4 <__cvt+0x8c>
 800c0ec:	f1c6 0601 	rsb	r6, r6, #1
 800c0f0:	f8ca 6000 	str.w	r6, [sl]
 800c0f4:	f8da 3000 	ldr.w	r3, [sl]
 800c0f8:	4499      	add	r9, r3
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	4620      	mov	r0, r4
 800c100:	4629      	mov	r1, r5
 800c102:	f7f4 fd09 	bl	8000b18 <__aeabi_dcmpeq>
 800c106:	b108      	cbz	r0, 800c10c <__cvt+0xa4>
 800c108:	f8cd 900c 	str.w	r9, [sp, #12]
 800c10c:	2230      	movs	r2, #48	; 0x30
 800c10e:	9b03      	ldr	r3, [sp, #12]
 800c110:	454b      	cmp	r3, r9
 800c112:	d307      	bcc.n	800c124 <__cvt+0xbc>
 800c114:	9b03      	ldr	r3, [sp, #12]
 800c116:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c118:	1bdb      	subs	r3, r3, r7
 800c11a:	4638      	mov	r0, r7
 800c11c:	6013      	str	r3, [r2, #0]
 800c11e:	b004      	add	sp, #16
 800c120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c124:	1c59      	adds	r1, r3, #1
 800c126:	9103      	str	r1, [sp, #12]
 800c128:	701a      	strb	r2, [r3, #0]
 800c12a:	e7f0      	b.n	800c10e <__cvt+0xa6>

0800c12c <__exponent>:
 800c12c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c12e:	4603      	mov	r3, r0
 800c130:	2900      	cmp	r1, #0
 800c132:	bfb8      	it	lt
 800c134:	4249      	neglt	r1, r1
 800c136:	f803 2b02 	strb.w	r2, [r3], #2
 800c13a:	bfb4      	ite	lt
 800c13c:	222d      	movlt	r2, #45	; 0x2d
 800c13e:	222b      	movge	r2, #43	; 0x2b
 800c140:	2909      	cmp	r1, #9
 800c142:	7042      	strb	r2, [r0, #1]
 800c144:	dd2a      	ble.n	800c19c <__exponent+0x70>
 800c146:	f10d 0407 	add.w	r4, sp, #7
 800c14a:	46a4      	mov	ip, r4
 800c14c:	270a      	movs	r7, #10
 800c14e:	46a6      	mov	lr, r4
 800c150:	460a      	mov	r2, r1
 800c152:	fb91 f6f7 	sdiv	r6, r1, r7
 800c156:	fb07 1516 	mls	r5, r7, r6, r1
 800c15a:	3530      	adds	r5, #48	; 0x30
 800c15c:	2a63      	cmp	r2, #99	; 0x63
 800c15e:	f104 34ff 	add.w	r4, r4, #4294967295
 800c162:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c166:	4631      	mov	r1, r6
 800c168:	dcf1      	bgt.n	800c14e <__exponent+0x22>
 800c16a:	3130      	adds	r1, #48	; 0x30
 800c16c:	f1ae 0502 	sub.w	r5, lr, #2
 800c170:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c174:	1c44      	adds	r4, r0, #1
 800c176:	4629      	mov	r1, r5
 800c178:	4561      	cmp	r1, ip
 800c17a:	d30a      	bcc.n	800c192 <__exponent+0x66>
 800c17c:	f10d 0209 	add.w	r2, sp, #9
 800c180:	eba2 020e 	sub.w	r2, r2, lr
 800c184:	4565      	cmp	r5, ip
 800c186:	bf88      	it	hi
 800c188:	2200      	movhi	r2, #0
 800c18a:	4413      	add	r3, r2
 800c18c:	1a18      	subs	r0, r3, r0
 800c18e:	b003      	add	sp, #12
 800c190:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c192:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c196:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c19a:	e7ed      	b.n	800c178 <__exponent+0x4c>
 800c19c:	2330      	movs	r3, #48	; 0x30
 800c19e:	3130      	adds	r1, #48	; 0x30
 800c1a0:	7083      	strb	r3, [r0, #2]
 800c1a2:	70c1      	strb	r1, [r0, #3]
 800c1a4:	1d03      	adds	r3, r0, #4
 800c1a6:	e7f1      	b.n	800c18c <__exponent+0x60>

0800c1a8 <_printf_float>:
 800c1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1ac:	ed2d 8b02 	vpush	{d8}
 800c1b0:	b08d      	sub	sp, #52	; 0x34
 800c1b2:	460c      	mov	r4, r1
 800c1b4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c1b8:	4616      	mov	r6, r2
 800c1ba:	461f      	mov	r7, r3
 800c1bc:	4605      	mov	r5, r0
 800c1be:	f001 fa57 	bl	800d670 <_localeconv_r>
 800c1c2:	f8d0 a000 	ldr.w	sl, [r0]
 800c1c6:	4650      	mov	r0, sl
 800c1c8:	f7f4 f82a 	bl	8000220 <strlen>
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	930a      	str	r3, [sp, #40]	; 0x28
 800c1d0:	6823      	ldr	r3, [r4, #0]
 800c1d2:	9305      	str	r3, [sp, #20]
 800c1d4:	f8d8 3000 	ldr.w	r3, [r8]
 800c1d8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c1dc:	3307      	adds	r3, #7
 800c1de:	f023 0307 	bic.w	r3, r3, #7
 800c1e2:	f103 0208 	add.w	r2, r3, #8
 800c1e6:	f8c8 2000 	str.w	r2, [r8]
 800c1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ee:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c1f2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c1f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c1fa:	9307      	str	r3, [sp, #28]
 800c1fc:	f8cd 8018 	str.w	r8, [sp, #24]
 800c200:	ee08 0a10 	vmov	s16, r0
 800c204:	4b9f      	ldr	r3, [pc, #636]	; (800c484 <_printf_float+0x2dc>)
 800c206:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c20a:	f04f 32ff 	mov.w	r2, #4294967295
 800c20e:	f7f4 fcb5 	bl	8000b7c <__aeabi_dcmpun>
 800c212:	bb88      	cbnz	r0, 800c278 <_printf_float+0xd0>
 800c214:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c218:	4b9a      	ldr	r3, [pc, #616]	; (800c484 <_printf_float+0x2dc>)
 800c21a:	f04f 32ff 	mov.w	r2, #4294967295
 800c21e:	f7f4 fc8f 	bl	8000b40 <__aeabi_dcmple>
 800c222:	bb48      	cbnz	r0, 800c278 <_printf_float+0xd0>
 800c224:	2200      	movs	r2, #0
 800c226:	2300      	movs	r3, #0
 800c228:	4640      	mov	r0, r8
 800c22a:	4649      	mov	r1, r9
 800c22c:	f7f4 fc7e 	bl	8000b2c <__aeabi_dcmplt>
 800c230:	b110      	cbz	r0, 800c238 <_printf_float+0x90>
 800c232:	232d      	movs	r3, #45	; 0x2d
 800c234:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c238:	4b93      	ldr	r3, [pc, #588]	; (800c488 <_printf_float+0x2e0>)
 800c23a:	4894      	ldr	r0, [pc, #592]	; (800c48c <_printf_float+0x2e4>)
 800c23c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c240:	bf94      	ite	ls
 800c242:	4698      	movls	r8, r3
 800c244:	4680      	movhi	r8, r0
 800c246:	2303      	movs	r3, #3
 800c248:	6123      	str	r3, [r4, #16]
 800c24a:	9b05      	ldr	r3, [sp, #20]
 800c24c:	f023 0204 	bic.w	r2, r3, #4
 800c250:	6022      	str	r2, [r4, #0]
 800c252:	f04f 0900 	mov.w	r9, #0
 800c256:	9700      	str	r7, [sp, #0]
 800c258:	4633      	mov	r3, r6
 800c25a:	aa0b      	add	r2, sp, #44	; 0x2c
 800c25c:	4621      	mov	r1, r4
 800c25e:	4628      	mov	r0, r5
 800c260:	f000 f9d8 	bl	800c614 <_printf_common>
 800c264:	3001      	adds	r0, #1
 800c266:	f040 8090 	bne.w	800c38a <_printf_float+0x1e2>
 800c26a:	f04f 30ff 	mov.w	r0, #4294967295
 800c26e:	b00d      	add	sp, #52	; 0x34
 800c270:	ecbd 8b02 	vpop	{d8}
 800c274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c278:	4642      	mov	r2, r8
 800c27a:	464b      	mov	r3, r9
 800c27c:	4640      	mov	r0, r8
 800c27e:	4649      	mov	r1, r9
 800c280:	f7f4 fc7c 	bl	8000b7c <__aeabi_dcmpun>
 800c284:	b140      	cbz	r0, 800c298 <_printf_float+0xf0>
 800c286:	464b      	mov	r3, r9
 800c288:	2b00      	cmp	r3, #0
 800c28a:	bfbc      	itt	lt
 800c28c:	232d      	movlt	r3, #45	; 0x2d
 800c28e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c292:	487f      	ldr	r0, [pc, #508]	; (800c490 <_printf_float+0x2e8>)
 800c294:	4b7f      	ldr	r3, [pc, #508]	; (800c494 <_printf_float+0x2ec>)
 800c296:	e7d1      	b.n	800c23c <_printf_float+0x94>
 800c298:	6863      	ldr	r3, [r4, #4]
 800c29a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c29e:	9206      	str	r2, [sp, #24]
 800c2a0:	1c5a      	adds	r2, r3, #1
 800c2a2:	d13f      	bne.n	800c324 <_printf_float+0x17c>
 800c2a4:	2306      	movs	r3, #6
 800c2a6:	6063      	str	r3, [r4, #4]
 800c2a8:	9b05      	ldr	r3, [sp, #20]
 800c2aa:	6861      	ldr	r1, [r4, #4]
 800c2ac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	9303      	str	r3, [sp, #12]
 800c2b4:	ab0a      	add	r3, sp, #40	; 0x28
 800c2b6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c2ba:	ab09      	add	r3, sp, #36	; 0x24
 800c2bc:	ec49 8b10 	vmov	d0, r8, r9
 800c2c0:	9300      	str	r3, [sp, #0]
 800c2c2:	6022      	str	r2, [r4, #0]
 800c2c4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c2c8:	4628      	mov	r0, r5
 800c2ca:	f7ff fecd 	bl	800c068 <__cvt>
 800c2ce:	9b06      	ldr	r3, [sp, #24]
 800c2d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c2d2:	2b47      	cmp	r3, #71	; 0x47
 800c2d4:	4680      	mov	r8, r0
 800c2d6:	d108      	bne.n	800c2ea <_printf_float+0x142>
 800c2d8:	1cc8      	adds	r0, r1, #3
 800c2da:	db02      	blt.n	800c2e2 <_printf_float+0x13a>
 800c2dc:	6863      	ldr	r3, [r4, #4]
 800c2de:	4299      	cmp	r1, r3
 800c2e0:	dd41      	ble.n	800c366 <_printf_float+0x1be>
 800c2e2:	f1ab 0b02 	sub.w	fp, fp, #2
 800c2e6:	fa5f fb8b 	uxtb.w	fp, fp
 800c2ea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c2ee:	d820      	bhi.n	800c332 <_printf_float+0x18a>
 800c2f0:	3901      	subs	r1, #1
 800c2f2:	465a      	mov	r2, fp
 800c2f4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c2f8:	9109      	str	r1, [sp, #36]	; 0x24
 800c2fa:	f7ff ff17 	bl	800c12c <__exponent>
 800c2fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c300:	1813      	adds	r3, r2, r0
 800c302:	2a01      	cmp	r2, #1
 800c304:	4681      	mov	r9, r0
 800c306:	6123      	str	r3, [r4, #16]
 800c308:	dc02      	bgt.n	800c310 <_printf_float+0x168>
 800c30a:	6822      	ldr	r2, [r4, #0]
 800c30c:	07d2      	lsls	r2, r2, #31
 800c30e:	d501      	bpl.n	800c314 <_printf_float+0x16c>
 800c310:	3301      	adds	r3, #1
 800c312:	6123      	str	r3, [r4, #16]
 800c314:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d09c      	beq.n	800c256 <_printf_float+0xae>
 800c31c:	232d      	movs	r3, #45	; 0x2d
 800c31e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c322:	e798      	b.n	800c256 <_printf_float+0xae>
 800c324:	9a06      	ldr	r2, [sp, #24]
 800c326:	2a47      	cmp	r2, #71	; 0x47
 800c328:	d1be      	bne.n	800c2a8 <_printf_float+0x100>
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d1bc      	bne.n	800c2a8 <_printf_float+0x100>
 800c32e:	2301      	movs	r3, #1
 800c330:	e7b9      	b.n	800c2a6 <_printf_float+0xfe>
 800c332:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c336:	d118      	bne.n	800c36a <_printf_float+0x1c2>
 800c338:	2900      	cmp	r1, #0
 800c33a:	6863      	ldr	r3, [r4, #4]
 800c33c:	dd0b      	ble.n	800c356 <_printf_float+0x1ae>
 800c33e:	6121      	str	r1, [r4, #16]
 800c340:	b913      	cbnz	r3, 800c348 <_printf_float+0x1a0>
 800c342:	6822      	ldr	r2, [r4, #0]
 800c344:	07d0      	lsls	r0, r2, #31
 800c346:	d502      	bpl.n	800c34e <_printf_float+0x1a6>
 800c348:	3301      	adds	r3, #1
 800c34a:	440b      	add	r3, r1
 800c34c:	6123      	str	r3, [r4, #16]
 800c34e:	65a1      	str	r1, [r4, #88]	; 0x58
 800c350:	f04f 0900 	mov.w	r9, #0
 800c354:	e7de      	b.n	800c314 <_printf_float+0x16c>
 800c356:	b913      	cbnz	r3, 800c35e <_printf_float+0x1b6>
 800c358:	6822      	ldr	r2, [r4, #0]
 800c35a:	07d2      	lsls	r2, r2, #31
 800c35c:	d501      	bpl.n	800c362 <_printf_float+0x1ba>
 800c35e:	3302      	adds	r3, #2
 800c360:	e7f4      	b.n	800c34c <_printf_float+0x1a4>
 800c362:	2301      	movs	r3, #1
 800c364:	e7f2      	b.n	800c34c <_printf_float+0x1a4>
 800c366:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c36a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c36c:	4299      	cmp	r1, r3
 800c36e:	db05      	blt.n	800c37c <_printf_float+0x1d4>
 800c370:	6823      	ldr	r3, [r4, #0]
 800c372:	6121      	str	r1, [r4, #16]
 800c374:	07d8      	lsls	r0, r3, #31
 800c376:	d5ea      	bpl.n	800c34e <_printf_float+0x1a6>
 800c378:	1c4b      	adds	r3, r1, #1
 800c37a:	e7e7      	b.n	800c34c <_printf_float+0x1a4>
 800c37c:	2900      	cmp	r1, #0
 800c37e:	bfd4      	ite	le
 800c380:	f1c1 0202 	rsble	r2, r1, #2
 800c384:	2201      	movgt	r2, #1
 800c386:	4413      	add	r3, r2
 800c388:	e7e0      	b.n	800c34c <_printf_float+0x1a4>
 800c38a:	6823      	ldr	r3, [r4, #0]
 800c38c:	055a      	lsls	r2, r3, #21
 800c38e:	d407      	bmi.n	800c3a0 <_printf_float+0x1f8>
 800c390:	6923      	ldr	r3, [r4, #16]
 800c392:	4642      	mov	r2, r8
 800c394:	4631      	mov	r1, r6
 800c396:	4628      	mov	r0, r5
 800c398:	47b8      	blx	r7
 800c39a:	3001      	adds	r0, #1
 800c39c:	d12c      	bne.n	800c3f8 <_printf_float+0x250>
 800c39e:	e764      	b.n	800c26a <_printf_float+0xc2>
 800c3a0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c3a4:	f240 80e0 	bls.w	800c568 <_printf_float+0x3c0>
 800c3a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	f7f4 fbb2 	bl	8000b18 <__aeabi_dcmpeq>
 800c3b4:	2800      	cmp	r0, #0
 800c3b6:	d034      	beq.n	800c422 <_printf_float+0x27a>
 800c3b8:	4a37      	ldr	r2, [pc, #220]	; (800c498 <_printf_float+0x2f0>)
 800c3ba:	2301      	movs	r3, #1
 800c3bc:	4631      	mov	r1, r6
 800c3be:	4628      	mov	r0, r5
 800c3c0:	47b8      	blx	r7
 800c3c2:	3001      	adds	r0, #1
 800c3c4:	f43f af51 	beq.w	800c26a <_printf_float+0xc2>
 800c3c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c3cc:	429a      	cmp	r2, r3
 800c3ce:	db02      	blt.n	800c3d6 <_printf_float+0x22e>
 800c3d0:	6823      	ldr	r3, [r4, #0]
 800c3d2:	07d8      	lsls	r0, r3, #31
 800c3d4:	d510      	bpl.n	800c3f8 <_printf_float+0x250>
 800c3d6:	ee18 3a10 	vmov	r3, s16
 800c3da:	4652      	mov	r2, sl
 800c3dc:	4631      	mov	r1, r6
 800c3de:	4628      	mov	r0, r5
 800c3e0:	47b8      	blx	r7
 800c3e2:	3001      	adds	r0, #1
 800c3e4:	f43f af41 	beq.w	800c26a <_printf_float+0xc2>
 800c3e8:	f04f 0800 	mov.w	r8, #0
 800c3ec:	f104 091a 	add.w	r9, r4, #26
 800c3f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3f2:	3b01      	subs	r3, #1
 800c3f4:	4543      	cmp	r3, r8
 800c3f6:	dc09      	bgt.n	800c40c <_printf_float+0x264>
 800c3f8:	6823      	ldr	r3, [r4, #0]
 800c3fa:	079b      	lsls	r3, r3, #30
 800c3fc:	f100 8105 	bmi.w	800c60a <_printf_float+0x462>
 800c400:	68e0      	ldr	r0, [r4, #12]
 800c402:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c404:	4298      	cmp	r0, r3
 800c406:	bfb8      	it	lt
 800c408:	4618      	movlt	r0, r3
 800c40a:	e730      	b.n	800c26e <_printf_float+0xc6>
 800c40c:	2301      	movs	r3, #1
 800c40e:	464a      	mov	r2, r9
 800c410:	4631      	mov	r1, r6
 800c412:	4628      	mov	r0, r5
 800c414:	47b8      	blx	r7
 800c416:	3001      	adds	r0, #1
 800c418:	f43f af27 	beq.w	800c26a <_printf_float+0xc2>
 800c41c:	f108 0801 	add.w	r8, r8, #1
 800c420:	e7e6      	b.n	800c3f0 <_printf_float+0x248>
 800c422:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c424:	2b00      	cmp	r3, #0
 800c426:	dc39      	bgt.n	800c49c <_printf_float+0x2f4>
 800c428:	4a1b      	ldr	r2, [pc, #108]	; (800c498 <_printf_float+0x2f0>)
 800c42a:	2301      	movs	r3, #1
 800c42c:	4631      	mov	r1, r6
 800c42e:	4628      	mov	r0, r5
 800c430:	47b8      	blx	r7
 800c432:	3001      	adds	r0, #1
 800c434:	f43f af19 	beq.w	800c26a <_printf_float+0xc2>
 800c438:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c43c:	4313      	orrs	r3, r2
 800c43e:	d102      	bne.n	800c446 <_printf_float+0x29e>
 800c440:	6823      	ldr	r3, [r4, #0]
 800c442:	07d9      	lsls	r1, r3, #31
 800c444:	d5d8      	bpl.n	800c3f8 <_printf_float+0x250>
 800c446:	ee18 3a10 	vmov	r3, s16
 800c44a:	4652      	mov	r2, sl
 800c44c:	4631      	mov	r1, r6
 800c44e:	4628      	mov	r0, r5
 800c450:	47b8      	blx	r7
 800c452:	3001      	adds	r0, #1
 800c454:	f43f af09 	beq.w	800c26a <_printf_float+0xc2>
 800c458:	f04f 0900 	mov.w	r9, #0
 800c45c:	f104 0a1a 	add.w	sl, r4, #26
 800c460:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c462:	425b      	negs	r3, r3
 800c464:	454b      	cmp	r3, r9
 800c466:	dc01      	bgt.n	800c46c <_printf_float+0x2c4>
 800c468:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c46a:	e792      	b.n	800c392 <_printf_float+0x1ea>
 800c46c:	2301      	movs	r3, #1
 800c46e:	4652      	mov	r2, sl
 800c470:	4631      	mov	r1, r6
 800c472:	4628      	mov	r0, r5
 800c474:	47b8      	blx	r7
 800c476:	3001      	adds	r0, #1
 800c478:	f43f aef7 	beq.w	800c26a <_printf_float+0xc2>
 800c47c:	f109 0901 	add.w	r9, r9, #1
 800c480:	e7ee      	b.n	800c460 <_printf_float+0x2b8>
 800c482:	bf00      	nop
 800c484:	7fefffff 	.word	0x7fefffff
 800c488:	0800eebc 	.word	0x0800eebc
 800c48c:	0800eec0 	.word	0x0800eec0
 800c490:	0800eec8 	.word	0x0800eec8
 800c494:	0800eec4 	.word	0x0800eec4
 800c498:	0800eecc 	.word	0x0800eecc
 800c49c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c49e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c4a0:	429a      	cmp	r2, r3
 800c4a2:	bfa8      	it	ge
 800c4a4:	461a      	movge	r2, r3
 800c4a6:	2a00      	cmp	r2, #0
 800c4a8:	4691      	mov	r9, r2
 800c4aa:	dc37      	bgt.n	800c51c <_printf_float+0x374>
 800c4ac:	f04f 0b00 	mov.w	fp, #0
 800c4b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c4b4:	f104 021a 	add.w	r2, r4, #26
 800c4b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c4ba:	9305      	str	r3, [sp, #20]
 800c4bc:	eba3 0309 	sub.w	r3, r3, r9
 800c4c0:	455b      	cmp	r3, fp
 800c4c2:	dc33      	bgt.n	800c52c <_printf_float+0x384>
 800c4c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c4c8:	429a      	cmp	r2, r3
 800c4ca:	db3b      	blt.n	800c544 <_printf_float+0x39c>
 800c4cc:	6823      	ldr	r3, [r4, #0]
 800c4ce:	07da      	lsls	r2, r3, #31
 800c4d0:	d438      	bmi.n	800c544 <_printf_float+0x39c>
 800c4d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c4d4:	9b05      	ldr	r3, [sp, #20]
 800c4d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c4d8:	1ad3      	subs	r3, r2, r3
 800c4da:	eba2 0901 	sub.w	r9, r2, r1
 800c4de:	4599      	cmp	r9, r3
 800c4e0:	bfa8      	it	ge
 800c4e2:	4699      	movge	r9, r3
 800c4e4:	f1b9 0f00 	cmp.w	r9, #0
 800c4e8:	dc35      	bgt.n	800c556 <_printf_float+0x3ae>
 800c4ea:	f04f 0800 	mov.w	r8, #0
 800c4ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c4f2:	f104 0a1a 	add.w	sl, r4, #26
 800c4f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c4fa:	1a9b      	subs	r3, r3, r2
 800c4fc:	eba3 0309 	sub.w	r3, r3, r9
 800c500:	4543      	cmp	r3, r8
 800c502:	f77f af79 	ble.w	800c3f8 <_printf_float+0x250>
 800c506:	2301      	movs	r3, #1
 800c508:	4652      	mov	r2, sl
 800c50a:	4631      	mov	r1, r6
 800c50c:	4628      	mov	r0, r5
 800c50e:	47b8      	blx	r7
 800c510:	3001      	adds	r0, #1
 800c512:	f43f aeaa 	beq.w	800c26a <_printf_float+0xc2>
 800c516:	f108 0801 	add.w	r8, r8, #1
 800c51a:	e7ec      	b.n	800c4f6 <_printf_float+0x34e>
 800c51c:	4613      	mov	r3, r2
 800c51e:	4631      	mov	r1, r6
 800c520:	4642      	mov	r2, r8
 800c522:	4628      	mov	r0, r5
 800c524:	47b8      	blx	r7
 800c526:	3001      	adds	r0, #1
 800c528:	d1c0      	bne.n	800c4ac <_printf_float+0x304>
 800c52a:	e69e      	b.n	800c26a <_printf_float+0xc2>
 800c52c:	2301      	movs	r3, #1
 800c52e:	4631      	mov	r1, r6
 800c530:	4628      	mov	r0, r5
 800c532:	9205      	str	r2, [sp, #20]
 800c534:	47b8      	blx	r7
 800c536:	3001      	adds	r0, #1
 800c538:	f43f ae97 	beq.w	800c26a <_printf_float+0xc2>
 800c53c:	9a05      	ldr	r2, [sp, #20]
 800c53e:	f10b 0b01 	add.w	fp, fp, #1
 800c542:	e7b9      	b.n	800c4b8 <_printf_float+0x310>
 800c544:	ee18 3a10 	vmov	r3, s16
 800c548:	4652      	mov	r2, sl
 800c54a:	4631      	mov	r1, r6
 800c54c:	4628      	mov	r0, r5
 800c54e:	47b8      	blx	r7
 800c550:	3001      	adds	r0, #1
 800c552:	d1be      	bne.n	800c4d2 <_printf_float+0x32a>
 800c554:	e689      	b.n	800c26a <_printf_float+0xc2>
 800c556:	9a05      	ldr	r2, [sp, #20]
 800c558:	464b      	mov	r3, r9
 800c55a:	4442      	add	r2, r8
 800c55c:	4631      	mov	r1, r6
 800c55e:	4628      	mov	r0, r5
 800c560:	47b8      	blx	r7
 800c562:	3001      	adds	r0, #1
 800c564:	d1c1      	bne.n	800c4ea <_printf_float+0x342>
 800c566:	e680      	b.n	800c26a <_printf_float+0xc2>
 800c568:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c56a:	2a01      	cmp	r2, #1
 800c56c:	dc01      	bgt.n	800c572 <_printf_float+0x3ca>
 800c56e:	07db      	lsls	r3, r3, #31
 800c570:	d538      	bpl.n	800c5e4 <_printf_float+0x43c>
 800c572:	2301      	movs	r3, #1
 800c574:	4642      	mov	r2, r8
 800c576:	4631      	mov	r1, r6
 800c578:	4628      	mov	r0, r5
 800c57a:	47b8      	blx	r7
 800c57c:	3001      	adds	r0, #1
 800c57e:	f43f ae74 	beq.w	800c26a <_printf_float+0xc2>
 800c582:	ee18 3a10 	vmov	r3, s16
 800c586:	4652      	mov	r2, sl
 800c588:	4631      	mov	r1, r6
 800c58a:	4628      	mov	r0, r5
 800c58c:	47b8      	blx	r7
 800c58e:	3001      	adds	r0, #1
 800c590:	f43f ae6b 	beq.w	800c26a <_printf_float+0xc2>
 800c594:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c598:	2200      	movs	r2, #0
 800c59a:	2300      	movs	r3, #0
 800c59c:	f7f4 fabc 	bl	8000b18 <__aeabi_dcmpeq>
 800c5a0:	b9d8      	cbnz	r0, 800c5da <_printf_float+0x432>
 800c5a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5a4:	f108 0201 	add.w	r2, r8, #1
 800c5a8:	3b01      	subs	r3, #1
 800c5aa:	4631      	mov	r1, r6
 800c5ac:	4628      	mov	r0, r5
 800c5ae:	47b8      	blx	r7
 800c5b0:	3001      	adds	r0, #1
 800c5b2:	d10e      	bne.n	800c5d2 <_printf_float+0x42a>
 800c5b4:	e659      	b.n	800c26a <_printf_float+0xc2>
 800c5b6:	2301      	movs	r3, #1
 800c5b8:	4652      	mov	r2, sl
 800c5ba:	4631      	mov	r1, r6
 800c5bc:	4628      	mov	r0, r5
 800c5be:	47b8      	blx	r7
 800c5c0:	3001      	adds	r0, #1
 800c5c2:	f43f ae52 	beq.w	800c26a <_printf_float+0xc2>
 800c5c6:	f108 0801 	add.w	r8, r8, #1
 800c5ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5cc:	3b01      	subs	r3, #1
 800c5ce:	4543      	cmp	r3, r8
 800c5d0:	dcf1      	bgt.n	800c5b6 <_printf_float+0x40e>
 800c5d2:	464b      	mov	r3, r9
 800c5d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c5d8:	e6dc      	b.n	800c394 <_printf_float+0x1ec>
 800c5da:	f04f 0800 	mov.w	r8, #0
 800c5de:	f104 0a1a 	add.w	sl, r4, #26
 800c5e2:	e7f2      	b.n	800c5ca <_printf_float+0x422>
 800c5e4:	2301      	movs	r3, #1
 800c5e6:	4642      	mov	r2, r8
 800c5e8:	e7df      	b.n	800c5aa <_printf_float+0x402>
 800c5ea:	2301      	movs	r3, #1
 800c5ec:	464a      	mov	r2, r9
 800c5ee:	4631      	mov	r1, r6
 800c5f0:	4628      	mov	r0, r5
 800c5f2:	47b8      	blx	r7
 800c5f4:	3001      	adds	r0, #1
 800c5f6:	f43f ae38 	beq.w	800c26a <_printf_float+0xc2>
 800c5fa:	f108 0801 	add.w	r8, r8, #1
 800c5fe:	68e3      	ldr	r3, [r4, #12]
 800c600:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c602:	1a5b      	subs	r3, r3, r1
 800c604:	4543      	cmp	r3, r8
 800c606:	dcf0      	bgt.n	800c5ea <_printf_float+0x442>
 800c608:	e6fa      	b.n	800c400 <_printf_float+0x258>
 800c60a:	f04f 0800 	mov.w	r8, #0
 800c60e:	f104 0919 	add.w	r9, r4, #25
 800c612:	e7f4      	b.n	800c5fe <_printf_float+0x456>

0800c614 <_printf_common>:
 800c614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c618:	4616      	mov	r6, r2
 800c61a:	4699      	mov	r9, r3
 800c61c:	688a      	ldr	r2, [r1, #8]
 800c61e:	690b      	ldr	r3, [r1, #16]
 800c620:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c624:	4293      	cmp	r3, r2
 800c626:	bfb8      	it	lt
 800c628:	4613      	movlt	r3, r2
 800c62a:	6033      	str	r3, [r6, #0]
 800c62c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c630:	4607      	mov	r7, r0
 800c632:	460c      	mov	r4, r1
 800c634:	b10a      	cbz	r2, 800c63a <_printf_common+0x26>
 800c636:	3301      	adds	r3, #1
 800c638:	6033      	str	r3, [r6, #0]
 800c63a:	6823      	ldr	r3, [r4, #0]
 800c63c:	0699      	lsls	r1, r3, #26
 800c63e:	bf42      	ittt	mi
 800c640:	6833      	ldrmi	r3, [r6, #0]
 800c642:	3302      	addmi	r3, #2
 800c644:	6033      	strmi	r3, [r6, #0]
 800c646:	6825      	ldr	r5, [r4, #0]
 800c648:	f015 0506 	ands.w	r5, r5, #6
 800c64c:	d106      	bne.n	800c65c <_printf_common+0x48>
 800c64e:	f104 0a19 	add.w	sl, r4, #25
 800c652:	68e3      	ldr	r3, [r4, #12]
 800c654:	6832      	ldr	r2, [r6, #0]
 800c656:	1a9b      	subs	r3, r3, r2
 800c658:	42ab      	cmp	r3, r5
 800c65a:	dc26      	bgt.n	800c6aa <_printf_common+0x96>
 800c65c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c660:	1e13      	subs	r3, r2, #0
 800c662:	6822      	ldr	r2, [r4, #0]
 800c664:	bf18      	it	ne
 800c666:	2301      	movne	r3, #1
 800c668:	0692      	lsls	r2, r2, #26
 800c66a:	d42b      	bmi.n	800c6c4 <_printf_common+0xb0>
 800c66c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c670:	4649      	mov	r1, r9
 800c672:	4638      	mov	r0, r7
 800c674:	47c0      	blx	r8
 800c676:	3001      	adds	r0, #1
 800c678:	d01e      	beq.n	800c6b8 <_printf_common+0xa4>
 800c67a:	6823      	ldr	r3, [r4, #0]
 800c67c:	68e5      	ldr	r5, [r4, #12]
 800c67e:	6832      	ldr	r2, [r6, #0]
 800c680:	f003 0306 	and.w	r3, r3, #6
 800c684:	2b04      	cmp	r3, #4
 800c686:	bf08      	it	eq
 800c688:	1aad      	subeq	r5, r5, r2
 800c68a:	68a3      	ldr	r3, [r4, #8]
 800c68c:	6922      	ldr	r2, [r4, #16]
 800c68e:	bf0c      	ite	eq
 800c690:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c694:	2500      	movne	r5, #0
 800c696:	4293      	cmp	r3, r2
 800c698:	bfc4      	itt	gt
 800c69a:	1a9b      	subgt	r3, r3, r2
 800c69c:	18ed      	addgt	r5, r5, r3
 800c69e:	2600      	movs	r6, #0
 800c6a0:	341a      	adds	r4, #26
 800c6a2:	42b5      	cmp	r5, r6
 800c6a4:	d11a      	bne.n	800c6dc <_printf_common+0xc8>
 800c6a6:	2000      	movs	r0, #0
 800c6a8:	e008      	b.n	800c6bc <_printf_common+0xa8>
 800c6aa:	2301      	movs	r3, #1
 800c6ac:	4652      	mov	r2, sl
 800c6ae:	4649      	mov	r1, r9
 800c6b0:	4638      	mov	r0, r7
 800c6b2:	47c0      	blx	r8
 800c6b4:	3001      	adds	r0, #1
 800c6b6:	d103      	bne.n	800c6c0 <_printf_common+0xac>
 800c6b8:	f04f 30ff 	mov.w	r0, #4294967295
 800c6bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6c0:	3501      	adds	r5, #1
 800c6c2:	e7c6      	b.n	800c652 <_printf_common+0x3e>
 800c6c4:	18e1      	adds	r1, r4, r3
 800c6c6:	1c5a      	adds	r2, r3, #1
 800c6c8:	2030      	movs	r0, #48	; 0x30
 800c6ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c6ce:	4422      	add	r2, r4
 800c6d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c6d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c6d8:	3302      	adds	r3, #2
 800c6da:	e7c7      	b.n	800c66c <_printf_common+0x58>
 800c6dc:	2301      	movs	r3, #1
 800c6de:	4622      	mov	r2, r4
 800c6e0:	4649      	mov	r1, r9
 800c6e2:	4638      	mov	r0, r7
 800c6e4:	47c0      	blx	r8
 800c6e6:	3001      	adds	r0, #1
 800c6e8:	d0e6      	beq.n	800c6b8 <_printf_common+0xa4>
 800c6ea:	3601      	adds	r6, #1
 800c6ec:	e7d9      	b.n	800c6a2 <_printf_common+0x8e>
	...

0800c6f0 <_printf_i>:
 800c6f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c6f4:	460c      	mov	r4, r1
 800c6f6:	4691      	mov	r9, r2
 800c6f8:	7e27      	ldrb	r7, [r4, #24]
 800c6fa:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c6fc:	2f78      	cmp	r7, #120	; 0x78
 800c6fe:	4680      	mov	r8, r0
 800c700:	469a      	mov	sl, r3
 800c702:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c706:	d807      	bhi.n	800c718 <_printf_i+0x28>
 800c708:	2f62      	cmp	r7, #98	; 0x62
 800c70a:	d80a      	bhi.n	800c722 <_printf_i+0x32>
 800c70c:	2f00      	cmp	r7, #0
 800c70e:	f000 80d8 	beq.w	800c8c2 <_printf_i+0x1d2>
 800c712:	2f58      	cmp	r7, #88	; 0x58
 800c714:	f000 80a3 	beq.w	800c85e <_printf_i+0x16e>
 800c718:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c71c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c720:	e03a      	b.n	800c798 <_printf_i+0xa8>
 800c722:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c726:	2b15      	cmp	r3, #21
 800c728:	d8f6      	bhi.n	800c718 <_printf_i+0x28>
 800c72a:	a001      	add	r0, pc, #4	; (adr r0, 800c730 <_printf_i+0x40>)
 800c72c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c730:	0800c789 	.word	0x0800c789
 800c734:	0800c79d 	.word	0x0800c79d
 800c738:	0800c719 	.word	0x0800c719
 800c73c:	0800c719 	.word	0x0800c719
 800c740:	0800c719 	.word	0x0800c719
 800c744:	0800c719 	.word	0x0800c719
 800c748:	0800c79d 	.word	0x0800c79d
 800c74c:	0800c719 	.word	0x0800c719
 800c750:	0800c719 	.word	0x0800c719
 800c754:	0800c719 	.word	0x0800c719
 800c758:	0800c719 	.word	0x0800c719
 800c75c:	0800c8a9 	.word	0x0800c8a9
 800c760:	0800c7cd 	.word	0x0800c7cd
 800c764:	0800c88b 	.word	0x0800c88b
 800c768:	0800c719 	.word	0x0800c719
 800c76c:	0800c719 	.word	0x0800c719
 800c770:	0800c8cb 	.word	0x0800c8cb
 800c774:	0800c719 	.word	0x0800c719
 800c778:	0800c7cd 	.word	0x0800c7cd
 800c77c:	0800c719 	.word	0x0800c719
 800c780:	0800c719 	.word	0x0800c719
 800c784:	0800c893 	.word	0x0800c893
 800c788:	680b      	ldr	r3, [r1, #0]
 800c78a:	1d1a      	adds	r2, r3, #4
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	600a      	str	r2, [r1, #0]
 800c790:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c794:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c798:	2301      	movs	r3, #1
 800c79a:	e0a3      	b.n	800c8e4 <_printf_i+0x1f4>
 800c79c:	6825      	ldr	r5, [r4, #0]
 800c79e:	6808      	ldr	r0, [r1, #0]
 800c7a0:	062e      	lsls	r6, r5, #24
 800c7a2:	f100 0304 	add.w	r3, r0, #4
 800c7a6:	d50a      	bpl.n	800c7be <_printf_i+0xce>
 800c7a8:	6805      	ldr	r5, [r0, #0]
 800c7aa:	600b      	str	r3, [r1, #0]
 800c7ac:	2d00      	cmp	r5, #0
 800c7ae:	da03      	bge.n	800c7b8 <_printf_i+0xc8>
 800c7b0:	232d      	movs	r3, #45	; 0x2d
 800c7b2:	426d      	negs	r5, r5
 800c7b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c7b8:	485e      	ldr	r0, [pc, #376]	; (800c934 <_printf_i+0x244>)
 800c7ba:	230a      	movs	r3, #10
 800c7bc:	e019      	b.n	800c7f2 <_printf_i+0x102>
 800c7be:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c7c2:	6805      	ldr	r5, [r0, #0]
 800c7c4:	600b      	str	r3, [r1, #0]
 800c7c6:	bf18      	it	ne
 800c7c8:	b22d      	sxthne	r5, r5
 800c7ca:	e7ef      	b.n	800c7ac <_printf_i+0xbc>
 800c7cc:	680b      	ldr	r3, [r1, #0]
 800c7ce:	6825      	ldr	r5, [r4, #0]
 800c7d0:	1d18      	adds	r0, r3, #4
 800c7d2:	6008      	str	r0, [r1, #0]
 800c7d4:	0628      	lsls	r0, r5, #24
 800c7d6:	d501      	bpl.n	800c7dc <_printf_i+0xec>
 800c7d8:	681d      	ldr	r5, [r3, #0]
 800c7da:	e002      	b.n	800c7e2 <_printf_i+0xf2>
 800c7dc:	0669      	lsls	r1, r5, #25
 800c7de:	d5fb      	bpl.n	800c7d8 <_printf_i+0xe8>
 800c7e0:	881d      	ldrh	r5, [r3, #0]
 800c7e2:	4854      	ldr	r0, [pc, #336]	; (800c934 <_printf_i+0x244>)
 800c7e4:	2f6f      	cmp	r7, #111	; 0x6f
 800c7e6:	bf0c      	ite	eq
 800c7e8:	2308      	moveq	r3, #8
 800c7ea:	230a      	movne	r3, #10
 800c7ec:	2100      	movs	r1, #0
 800c7ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c7f2:	6866      	ldr	r6, [r4, #4]
 800c7f4:	60a6      	str	r6, [r4, #8]
 800c7f6:	2e00      	cmp	r6, #0
 800c7f8:	bfa2      	ittt	ge
 800c7fa:	6821      	ldrge	r1, [r4, #0]
 800c7fc:	f021 0104 	bicge.w	r1, r1, #4
 800c800:	6021      	strge	r1, [r4, #0]
 800c802:	b90d      	cbnz	r5, 800c808 <_printf_i+0x118>
 800c804:	2e00      	cmp	r6, #0
 800c806:	d04d      	beq.n	800c8a4 <_printf_i+0x1b4>
 800c808:	4616      	mov	r6, r2
 800c80a:	fbb5 f1f3 	udiv	r1, r5, r3
 800c80e:	fb03 5711 	mls	r7, r3, r1, r5
 800c812:	5dc7      	ldrb	r7, [r0, r7]
 800c814:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c818:	462f      	mov	r7, r5
 800c81a:	42bb      	cmp	r3, r7
 800c81c:	460d      	mov	r5, r1
 800c81e:	d9f4      	bls.n	800c80a <_printf_i+0x11a>
 800c820:	2b08      	cmp	r3, #8
 800c822:	d10b      	bne.n	800c83c <_printf_i+0x14c>
 800c824:	6823      	ldr	r3, [r4, #0]
 800c826:	07df      	lsls	r7, r3, #31
 800c828:	d508      	bpl.n	800c83c <_printf_i+0x14c>
 800c82a:	6923      	ldr	r3, [r4, #16]
 800c82c:	6861      	ldr	r1, [r4, #4]
 800c82e:	4299      	cmp	r1, r3
 800c830:	bfde      	ittt	le
 800c832:	2330      	movle	r3, #48	; 0x30
 800c834:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c838:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c83c:	1b92      	subs	r2, r2, r6
 800c83e:	6122      	str	r2, [r4, #16]
 800c840:	f8cd a000 	str.w	sl, [sp]
 800c844:	464b      	mov	r3, r9
 800c846:	aa03      	add	r2, sp, #12
 800c848:	4621      	mov	r1, r4
 800c84a:	4640      	mov	r0, r8
 800c84c:	f7ff fee2 	bl	800c614 <_printf_common>
 800c850:	3001      	adds	r0, #1
 800c852:	d14c      	bne.n	800c8ee <_printf_i+0x1fe>
 800c854:	f04f 30ff 	mov.w	r0, #4294967295
 800c858:	b004      	add	sp, #16
 800c85a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c85e:	4835      	ldr	r0, [pc, #212]	; (800c934 <_printf_i+0x244>)
 800c860:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c864:	6823      	ldr	r3, [r4, #0]
 800c866:	680e      	ldr	r6, [r1, #0]
 800c868:	061f      	lsls	r7, r3, #24
 800c86a:	f856 5b04 	ldr.w	r5, [r6], #4
 800c86e:	600e      	str	r6, [r1, #0]
 800c870:	d514      	bpl.n	800c89c <_printf_i+0x1ac>
 800c872:	07d9      	lsls	r1, r3, #31
 800c874:	bf44      	itt	mi
 800c876:	f043 0320 	orrmi.w	r3, r3, #32
 800c87a:	6023      	strmi	r3, [r4, #0]
 800c87c:	b91d      	cbnz	r5, 800c886 <_printf_i+0x196>
 800c87e:	6823      	ldr	r3, [r4, #0]
 800c880:	f023 0320 	bic.w	r3, r3, #32
 800c884:	6023      	str	r3, [r4, #0]
 800c886:	2310      	movs	r3, #16
 800c888:	e7b0      	b.n	800c7ec <_printf_i+0xfc>
 800c88a:	6823      	ldr	r3, [r4, #0]
 800c88c:	f043 0320 	orr.w	r3, r3, #32
 800c890:	6023      	str	r3, [r4, #0]
 800c892:	2378      	movs	r3, #120	; 0x78
 800c894:	4828      	ldr	r0, [pc, #160]	; (800c938 <_printf_i+0x248>)
 800c896:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c89a:	e7e3      	b.n	800c864 <_printf_i+0x174>
 800c89c:	065e      	lsls	r6, r3, #25
 800c89e:	bf48      	it	mi
 800c8a0:	b2ad      	uxthmi	r5, r5
 800c8a2:	e7e6      	b.n	800c872 <_printf_i+0x182>
 800c8a4:	4616      	mov	r6, r2
 800c8a6:	e7bb      	b.n	800c820 <_printf_i+0x130>
 800c8a8:	680b      	ldr	r3, [r1, #0]
 800c8aa:	6826      	ldr	r6, [r4, #0]
 800c8ac:	6960      	ldr	r0, [r4, #20]
 800c8ae:	1d1d      	adds	r5, r3, #4
 800c8b0:	600d      	str	r5, [r1, #0]
 800c8b2:	0635      	lsls	r5, r6, #24
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	d501      	bpl.n	800c8bc <_printf_i+0x1cc>
 800c8b8:	6018      	str	r0, [r3, #0]
 800c8ba:	e002      	b.n	800c8c2 <_printf_i+0x1d2>
 800c8bc:	0671      	lsls	r1, r6, #25
 800c8be:	d5fb      	bpl.n	800c8b8 <_printf_i+0x1c8>
 800c8c0:	8018      	strh	r0, [r3, #0]
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	6123      	str	r3, [r4, #16]
 800c8c6:	4616      	mov	r6, r2
 800c8c8:	e7ba      	b.n	800c840 <_printf_i+0x150>
 800c8ca:	680b      	ldr	r3, [r1, #0]
 800c8cc:	1d1a      	adds	r2, r3, #4
 800c8ce:	600a      	str	r2, [r1, #0]
 800c8d0:	681e      	ldr	r6, [r3, #0]
 800c8d2:	6862      	ldr	r2, [r4, #4]
 800c8d4:	2100      	movs	r1, #0
 800c8d6:	4630      	mov	r0, r6
 800c8d8:	f7f3 fcaa 	bl	8000230 <memchr>
 800c8dc:	b108      	cbz	r0, 800c8e2 <_printf_i+0x1f2>
 800c8de:	1b80      	subs	r0, r0, r6
 800c8e0:	6060      	str	r0, [r4, #4]
 800c8e2:	6863      	ldr	r3, [r4, #4]
 800c8e4:	6123      	str	r3, [r4, #16]
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c8ec:	e7a8      	b.n	800c840 <_printf_i+0x150>
 800c8ee:	6923      	ldr	r3, [r4, #16]
 800c8f0:	4632      	mov	r2, r6
 800c8f2:	4649      	mov	r1, r9
 800c8f4:	4640      	mov	r0, r8
 800c8f6:	47d0      	blx	sl
 800c8f8:	3001      	adds	r0, #1
 800c8fa:	d0ab      	beq.n	800c854 <_printf_i+0x164>
 800c8fc:	6823      	ldr	r3, [r4, #0]
 800c8fe:	079b      	lsls	r3, r3, #30
 800c900:	d413      	bmi.n	800c92a <_printf_i+0x23a>
 800c902:	68e0      	ldr	r0, [r4, #12]
 800c904:	9b03      	ldr	r3, [sp, #12]
 800c906:	4298      	cmp	r0, r3
 800c908:	bfb8      	it	lt
 800c90a:	4618      	movlt	r0, r3
 800c90c:	e7a4      	b.n	800c858 <_printf_i+0x168>
 800c90e:	2301      	movs	r3, #1
 800c910:	4632      	mov	r2, r6
 800c912:	4649      	mov	r1, r9
 800c914:	4640      	mov	r0, r8
 800c916:	47d0      	blx	sl
 800c918:	3001      	adds	r0, #1
 800c91a:	d09b      	beq.n	800c854 <_printf_i+0x164>
 800c91c:	3501      	adds	r5, #1
 800c91e:	68e3      	ldr	r3, [r4, #12]
 800c920:	9903      	ldr	r1, [sp, #12]
 800c922:	1a5b      	subs	r3, r3, r1
 800c924:	42ab      	cmp	r3, r5
 800c926:	dcf2      	bgt.n	800c90e <_printf_i+0x21e>
 800c928:	e7eb      	b.n	800c902 <_printf_i+0x212>
 800c92a:	2500      	movs	r5, #0
 800c92c:	f104 0619 	add.w	r6, r4, #25
 800c930:	e7f5      	b.n	800c91e <_printf_i+0x22e>
 800c932:	bf00      	nop
 800c934:	0800eece 	.word	0x0800eece
 800c938:	0800eedf 	.word	0x0800eedf

0800c93c <siprintf>:
 800c93c:	b40e      	push	{r1, r2, r3}
 800c93e:	b500      	push	{lr}
 800c940:	b09c      	sub	sp, #112	; 0x70
 800c942:	ab1d      	add	r3, sp, #116	; 0x74
 800c944:	9002      	str	r0, [sp, #8]
 800c946:	9006      	str	r0, [sp, #24]
 800c948:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c94c:	4809      	ldr	r0, [pc, #36]	; (800c974 <siprintf+0x38>)
 800c94e:	9107      	str	r1, [sp, #28]
 800c950:	9104      	str	r1, [sp, #16]
 800c952:	4909      	ldr	r1, [pc, #36]	; (800c978 <siprintf+0x3c>)
 800c954:	f853 2b04 	ldr.w	r2, [r3], #4
 800c958:	9105      	str	r1, [sp, #20]
 800c95a:	6800      	ldr	r0, [r0, #0]
 800c95c:	9301      	str	r3, [sp, #4]
 800c95e:	a902      	add	r1, sp, #8
 800c960:	f001 fb34 	bl	800dfcc <_svfiprintf_r>
 800c964:	9b02      	ldr	r3, [sp, #8]
 800c966:	2200      	movs	r2, #0
 800c968:	701a      	strb	r2, [r3, #0]
 800c96a:	b01c      	add	sp, #112	; 0x70
 800c96c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c970:	b003      	add	sp, #12
 800c972:	4770      	bx	lr
 800c974:	20000010 	.word	0x20000010
 800c978:	ffff0208 	.word	0xffff0208

0800c97c <quorem>:
 800c97c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c980:	6903      	ldr	r3, [r0, #16]
 800c982:	690c      	ldr	r4, [r1, #16]
 800c984:	42a3      	cmp	r3, r4
 800c986:	4607      	mov	r7, r0
 800c988:	f2c0 8081 	blt.w	800ca8e <quorem+0x112>
 800c98c:	3c01      	subs	r4, #1
 800c98e:	f101 0814 	add.w	r8, r1, #20
 800c992:	f100 0514 	add.w	r5, r0, #20
 800c996:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c99a:	9301      	str	r3, [sp, #4]
 800c99c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c9a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c9a4:	3301      	adds	r3, #1
 800c9a6:	429a      	cmp	r2, r3
 800c9a8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c9ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c9b0:	fbb2 f6f3 	udiv	r6, r2, r3
 800c9b4:	d331      	bcc.n	800ca1a <quorem+0x9e>
 800c9b6:	f04f 0e00 	mov.w	lr, #0
 800c9ba:	4640      	mov	r0, r8
 800c9bc:	46ac      	mov	ip, r5
 800c9be:	46f2      	mov	sl, lr
 800c9c0:	f850 2b04 	ldr.w	r2, [r0], #4
 800c9c4:	b293      	uxth	r3, r2
 800c9c6:	fb06 e303 	mla	r3, r6, r3, lr
 800c9ca:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c9ce:	b29b      	uxth	r3, r3
 800c9d0:	ebaa 0303 	sub.w	r3, sl, r3
 800c9d4:	0c12      	lsrs	r2, r2, #16
 800c9d6:	f8dc a000 	ldr.w	sl, [ip]
 800c9da:	fb06 e202 	mla	r2, r6, r2, lr
 800c9de:	fa13 f38a 	uxtah	r3, r3, sl
 800c9e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c9e6:	fa1f fa82 	uxth.w	sl, r2
 800c9ea:	f8dc 2000 	ldr.w	r2, [ip]
 800c9ee:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800c9f2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c9f6:	b29b      	uxth	r3, r3
 800c9f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c9fc:	4581      	cmp	r9, r0
 800c9fe:	f84c 3b04 	str.w	r3, [ip], #4
 800ca02:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ca06:	d2db      	bcs.n	800c9c0 <quorem+0x44>
 800ca08:	f855 300b 	ldr.w	r3, [r5, fp]
 800ca0c:	b92b      	cbnz	r3, 800ca1a <quorem+0x9e>
 800ca0e:	9b01      	ldr	r3, [sp, #4]
 800ca10:	3b04      	subs	r3, #4
 800ca12:	429d      	cmp	r5, r3
 800ca14:	461a      	mov	r2, r3
 800ca16:	d32e      	bcc.n	800ca76 <quorem+0xfa>
 800ca18:	613c      	str	r4, [r7, #16]
 800ca1a:	4638      	mov	r0, r7
 800ca1c:	f001 f8c0 	bl	800dba0 <__mcmp>
 800ca20:	2800      	cmp	r0, #0
 800ca22:	db24      	blt.n	800ca6e <quorem+0xf2>
 800ca24:	3601      	adds	r6, #1
 800ca26:	4628      	mov	r0, r5
 800ca28:	f04f 0c00 	mov.w	ip, #0
 800ca2c:	f858 2b04 	ldr.w	r2, [r8], #4
 800ca30:	f8d0 e000 	ldr.w	lr, [r0]
 800ca34:	b293      	uxth	r3, r2
 800ca36:	ebac 0303 	sub.w	r3, ip, r3
 800ca3a:	0c12      	lsrs	r2, r2, #16
 800ca3c:	fa13 f38e 	uxtah	r3, r3, lr
 800ca40:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ca44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ca48:	b29b      	uxth	r3, r3
 800ca4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ca4e:	45c1      	cmp	r9, r8
 800ca50:	f840 3b04 	str.w	r3, [r0], #4
 800ca54:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ca58:	d2e8      	bcs.n	800ca2c <quorem+0xb0>
 800ca5a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ca5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ca62:	b922      	cbnz	r2, 800ca6e <quorem+0xf2>
 800ca64:	3b04      	subs	r3, #4
 800ca66:	429d      	cmp	r5, r3
 800ca68:	461a      	mov	r2, r3
 800ca6a:	d30a      	bcc.n	800ca82 <quorem+0x106>
 800ca6c:	613c      	str	r4, [r7, #16]
 800ca6e:	4630      	mov	r0, r6
 800ca70:	b003      	add	sp, #12
 800ca72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca76:	6812      	ldr	r2, [r2, #0]
 800ca78:	3b04      	subs	r3, #4
 800ca7a:	2a00      	cmp	r2, #0
 800ca7c:	d1cc      	bne.n	800ca18 <quorem+0x9c>
 800ca7e:	3c01      	subs	r4, #1
 800ca80:	e7c7      	b.n	800ca12 <quorem+0x96>
 800ca82:	6812      	ldr	r2, [r2, #0]
 800ca84:	3b04      	subs	r3, #4
 800ca86:	2a00      	cmp	r2, #0
 800ca88:	d1f0      	bne.n	800ca6c <quorem+0xf0>
 800ca8a:	3c01      	subs	r4, #1
 800ca8c:	e7eb      	b.n	800ca66 <quorem+0xea>
 800ca8e:	2000      	movs	r0, #0
 800ca90:	e7ee      	b.n	800ca70 <quorem+0xf4>
 800ca92:	0000      	movs	r0, r0
 800ca94:	0000      	movs	r0, r0
	...

0800ca98 <_dtoa_r>:
 800ca98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca9c:	ed2d 8b02 	vpush	{d8}
 800caa0:	ec57 6b10 	vmov	r6, r7, d0
 800caa4:	b095      	sub	sp, #84	; 0x54
 800caa6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800caa8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800caac:	9105      	str	r1, [sp, #20]
 800caae:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800cab2:	4604      	mov	r4, r0
 800cab4:	9209      	str	r2, [sp, #36]	; 0x24
 800cab6:	930f      	str	r3, [sp, #60]	; 0x3c
 800cab8:	b975      	cbnz	r5, 800cad8 <_dtoa_r+0x40>
 800caba:	2010      	movs	r0, #16
 800cabc:	f000 fddc 	bl	800d678 <malloc>
 800cac0:	4602      	mov	r2, r0
 800cac2:	6260      	str	r0, [r4, #36]	; 0x24
 800cac4:	b920      	cbnz	r0, 800cad0 <_dtoa_r+0x38>
 800cac6:	4bb2      	ldr	r3, [pc, #712]	; (800cd90 <_dtoa_r+0x2f8>)
 800cac8:	21ea      	movs	r1, #234	; 0xea
 800caca:	48b2      	ldr	r0, [pc, #712]	; (800cd94 <_dtoa_r+0x2fc>)
 800cacc:	f001 fb8e 	bl	800e1ec <__assert_func>
 800cad0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cad4:	6005      	str	r5, [r0, #0]
 800cad6:	60c5      	str	r5, [r0, #12]
 800cad8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cada:	6819      	ldr	r1, [r3, #0]
 800cadc:	b151      	cbz	r1, 800caf4 <_dtoa_r+0x5c>
 800cade:	685a      	ldr	r2, [r3, #4]
 800cae0:	604a      	str	r2, [r1, #4]
 800cae2:	2301      	movs	r3, #1
 800cae4:	4093      	lsls	r3, r2
 800cae6:	608b      	str	r3, [r1, #8]
 800cae8:	4620      	mov	r0, r4
 800caea:	f000 fe1b 	bl	800d724 <_Bfree>
 800caee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800caf0:	2200      	movs	r2, #0
 800caf2:	601a      	str	r2, [r3, #0]
 800caf4:	1e3b      	subs	r3, r7, #0
 800caf6:	bfb9      	ittee	lt
 800caf8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800cafc:	9303      	strlt	r3, [sp, #12]
 800cafe:	2300      	movge	r3, #0
 800cb00:	f8c8 3000 	strge.w	r3, [r8]
 800cb04:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800cb08:	4ba3      	ldr	r3, [pc, #652]	; (800cd98 <_dtoa_r+0x300>)
 800cb0a:	bfbc      	itt	lt
 800cb0c:	2201      	movlt	r2, #1
 800cb0e:	f8c8 2000 	strlt.w	r2, [r8]
 800cb12:	ea33 0309 	bics.w	r3, r3, r9
 800cb16:	d11b      	bne.n	800cb50 <_dtoa_r+0xb8>
 800cb18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cb1a:	f242 730f 	movw	r3, #9999	; 0x270f
 800cb1e:	6013      	str	r3, [r2, #0]
 800cb20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cb24:	4333      	orrs	r3, r6
 800cb26:	f000 857a 	beq.w	800d61e <_dtoa_r+0xb86>
 800cb2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cb2c:	b963      	cbnz	r3, 800cb48 <_dtoa_r+0xb0>
 800cb2e:	4b9b      	ldr	r3, [pc, #620]	; (800cd9c <_dtoa_r+0x304>)
 800cb30:	e024      	b.n	800cb7c <_dtoa_r+0xe4>
 800cb32:	4b9b      	ldr	r3, [pc, #620]	; (800cda0 <_dtoa_r+0x308>)
 800cb34:	9300      	str	r3, [sp, #0]
 800cb36:	3308      	adds	r3, #8
 800cb38:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cb3a:	6013      	str	r3, [r2, #0]
 800cb3c:	9800      	ldr	r0, [sp, #0]
 800cb3e:	b015      	add	sp, #84	; 0x54
 800cb40:	ecbd 8b02 	vpop	{d8}
 800cb44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb48:	4b94      	ldr	r3, [pc, #592]	; (800cd9c <_dtoa_r+0x304>)
 800cb4a:	9300      	str	r3, [sp, #0]
 800cb4c:	3303      	adds	r3, #3
 800cb4e:	e7f3      	b.n	800cb38 <_dtoa_r+0xa0>
 800cb50:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cb54:	2200      	movs	r2, #0
 800cb56:	ec51 0b17 	vmov	r0, r1, d7
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800cb60:	f7f3 ffda 	bl	8000b18 <__aeabi_dcmpeq>
 800cb64:	4680      	mov	r8, r0
 800cb66:	b158      	cbz	r0, 800cb80 <_dtoa_r+0xe8>
 800cb68:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cb6a:	2301      	movs	r3, #1
 800cb6c:	6013      	str	r3, [r2, #0]
 800cb6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	f000 8551 	beq.w	800d618 <_dtoa_r+0xb80>
 800cb76:	488b      	ldr	r0, [pc, #556]	; (800cda4 <_dtoa_r+0x30c>)
 800cb78:	6018      	str	r0, [r3, #0]
 800cb7a:	1e43      	subs	r3, r0, #1
 800cb7c:	9300      	str	r3, [sp, #0]
 800cb7e:	e7dd      	b.n	800cb3c <_dtoa_r+0xa4>
 800cb80:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800cb84:	aa12      	add	r2, sp, #72	; 0x48
 800cb86:	a913      	add	r1, sp, #76	; 0x4c
 800cb88:	4620      	mov	r0, r4
 800cb8a:	f001 f8ad 	bl	800dce8 <__d2b>
 800cb8e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cb92:	4683      	mov	fp, r0
 800cb94:	2d00      	cmp	r5, #0
 800cb96:	d07c      	beq.n	800cc92 <_dtoa_r+0x1fa>
 800cb98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb9a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800cb9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cba2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800cba6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800cbaa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800cbae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800cbb2:	4b7d      	ldr	r3, [pc, #500]	; (800cda8 <_dtoa_r+0x310>)
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	4630      	mov	r0, r6
 800cbb8:	4639      	mov	r1, r7
 800cbba:	f7f3 fb8d 	bl	80002d8 <__aeabi_dsub>
 800cbbe:	a36e      	add	r3, pc, #440	; (adr r3, 800cd78 <_dtoa_r+0x2e0>)
 800cbc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbc4:	f7f3 fd40 	bl	8000648 <__aeabi_dmul>
 800cbc8:	a36d      	add	r3, pc, #436	; (adr r3, 800cd80 <_dtoa_r+0x2e8>)
 800cbca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbce:	f7f3 fb85 	bl	80002dc <__adddf3>
 800cbd2:	4606      	mov	r6, r0
 800cbd4:	4628      	mov	r0, r5
 800cbd6:	460f      	mov	r7, r1
 800cbd8:	f7f3 fccc 	bl	8000574 <__aeabi_i2d>
 800cbdc:	a36a      	add	r3, pc, #424	; (adr r3, 800cd88 <_dtoa_r+0x2f0>)
 800cbde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbe2:	f7f3 fd31 	bl	8000648 <__aeabi_dmul>
 800cbe6:	4602      	mov	r2, r0
 800cbe8:	460b      	mov	r3, r1
 800cbea:	4630      	mov	r0, r6
 800cbec:	4639      	mov	r1, r7
 800cbee:	f7f3 fb75 	bl	80002dc <__adddf3>
 800cbf2:	4606      	mov	r6, r0
 800cbf4:	460f      	mov	r7, r1
 800cbf6:	f7f3 ffd7 	bl	8000ba8 <__aeabi_d2iz>
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	4682      	mov	sl, r0
 800cbfe:	2300      	movs	r3, #0
 800cc00:	4630      	mov	r0, r6
 800cc02:	4639      	mov	r1, r7
 800cc04:	f7f3 ff92 	bl	8000b2c <__aeabi_dcmplt>
 800cc08:	b148      	cbz	r0, 800cc1e <_dtoa_r+0x186>
 800cc0a:	4650      	mov	r0, sl
 800cc0c:	f7f3 fcb2 	bl	8000574 <__aeabi_i2d>
 800cc10:	4632      	mov	r2, r6
 800cc12:	463b      	mov	r3, r7
 800cc14:	f7f3 ff80 	bl	8000b18 <__aeabi_dcmpeq>
 800cc18:	b908      	cbnz	r0, 800cc1e <_dtoa_r+0x186>
 800cc1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cc1e:	f1ba 0f16 	cmp.w	sl, #22
 800cc22:	d854      	bhi.n	800ccce <_dtoa_r+0x236>
 800cc24:	4b61      	ldr	r3, [pc, #388]	; (800cdac <_dtoa_r+0x314>)
 800cc26:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cc2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc2e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cc32:	f7f3 ff7b 	bl	8000b2c <__aeabi_dcmplt>
 800cc36:	2800      	cmp	r0, #0
 800cc38:	d04b      	beq.n	800ccd2 <_dtoa_r+0x23a>
 800cc3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cc3e:	2300      	movs	r3, #0
 800cc40:	930e      	str	r3, [sp, #56]	; 0x38
 800cc42:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cc44:	1b5d      	subs	r5, r3, r5
 800cc46:	1e6b      	subs	r3, r5, #1
 800cc48:	9304      	str	r3, [sp, #16]
 800cc4a:	bf43      	ittte	mi
 800cc4c:	2300      	movmi	r3, #0
 800cc4e:	f1c5 0801 	rsbmi	r8, r5, #1
 800cc52:	9304      	strmi	r3, [sp, #16]
 800cc54:	f04f 0800 	movpl.w	r8, #0
 800cc58:	f1ba 0f00 	cmp.w	sl, #0
 800cc5c:	db3b      	blt.n	800ccd6 <_dtoa_r+0x23e>
 800cc5e:	9b04      	ldr	r3, [sp, #16]
 800cc60:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800cc64:	4453      	add	r3, sl
 800cc66:	9304      	str	r3, [sp, #16]
 800cc68:	2300      	movs	r3, #0
 800cc6a:	9306      	str	r3, [sp, #24]
 800cc6c:	9b05      	ldr	r3, [sp, #20]
 800cc6e:	2b09      	cmp	r3, #9
 800cc70:	d869      	bhi.n	800cd46 <_dtoa_r+0x2ae>
 800cc72:	2b05      	cmp	r3, #5
 800cc74:	bfc4      	itt	gt
 800cc76:	3b04      	subgt	r3, #4
 800cc78:	9305      	strgt	r3, [sp, #20]
 800cc7a:	9b05      	ldr	r3, [sp, #20]
 800cc7c:	f1a3 0302 	sub.w	r3, r3, #2
 800cc80:	bfcc      	ite	gt
 800cc82:	2500      	movgt	r5, #0
 800cc84:	2501      	movle	r5, #1
 800cc86:	2b03      	cmp	r3, #3
 800cc88:	d869      	bhi.n	800cd5e <_dtoa_r+0x2c6>
 800cc8a:	e8df f003 	tbb	[pc, r3]
 800cc8e:	4e2c      	.short	0x4e2c
 800cc90:	5a4c      	.short	0x5a4c
 800cc92:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800cc96:	441d      	add	r5, r3
 800cc98:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800cc9c:	2b20      	cmp	r3, #32
 800cc9e:	bfc1      	itttt	gt
 800cca0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800cca4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800cca8:	fa09 f303 	lslgt.w	r3, r9, r3
 800ccac:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ccb0:	bfda      	itte	le
 800ccb2:	f1c3 0320 	rsble	r3, r3, #32
 800ccb6:	fa06 f003 	lslle.w	r0, r6, r3
 800ccba:	4318      	orrgt	r0, r3
 800ccbc:	f7f3 fc4a 	bl	8000554 <__aeabi_ui2d>
 800ccc0:	2301      	movs	r3, #1
 800ccc2:	4606      	mov	r6, r0
 800ccc4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ccc8:	3d01      	subs	r5, #1
 800ccca:	9310      	str	r3, [sp, #64]	; 0x40
 800cccc:	e771      	b.n	800cbb2 <_dtoa_r+0x11a>
 800ccce:	2301      	movs	r3, #1
 800ccd0:	e7b6      	b.n	800cc40 <_dtoa_r+0x1a8>
 800ccd2:	900e      	str	r0, [sp, #56]	; 0x38
 800ccd4:	e7b5      	b.n	800cc42 <_dtoa_r+0x1aa>
 800ccd6:	f1ca 0300 	rsb	r3, sl, #0
 800ccda:	9306      	str	r3, [sp, #24]
 800ccdc:	2300      	movs	r3, #0
 800ccde:	eba8 080a 	sub.w	r8, r8, sl
 800cce2:	930d      	str	r3, [sp, #52]	; 0x34
 800cce4:	e7c2      	b.n	800cc6c <_dtoa_r+0x1d4>
 800cce6:	2300      	movs	r3, #0
 800cce8:	9308      	str	r3, [sp, #32]
 800ccea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	dc39      	bgt.n	800cd64 <_dtoa_r+0x2cc>
 800ccf0:	f04f 0901 	mov.w	r9, #1
 800ccf4:	f8cd 9004 	str.w	r9, [sp, #4]
 800ccf8:	464b      	mov	r3, r9
 800ccfa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800ccfe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800cd00:	2200      	movs	r2, #0
 800cd02:	6042      	str	r2, [r0, #4]
 800cd04:	2204      	movs	r2, #4
 800cd06:	f102 0614 	add.w	r6, r2, #20
 800cd0a:	429e      	cmp	r6, r3
 800cd0c:	6841      	ldr	r1, [r0, #4]
 800cd0e:	d92f      	bls.n	800cd70 <_dtoa_r+0x2d8>
 800cd10:	4620      	mov	r0, r4
 800cd12:	f000 fcc7 	bl	800d6a4 <_Balloc>
 800cd16:	9000      	str	r0, [sp, #0]
 800cd18:	2800      	cmp	r0, #0
 800cd1a:	d14b      	bne.n	800cdb4 <_dtoa_r+0x31c>
 800cd1c:	4b24      	ldr	r3, [pc, #144]	; (800cdb0 <_dtoa_r+0x318>)
 800cd1e:	4602      	mov	r2, r0
 800cd20:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800cd24:	e6d1      	b.n	800caca <_dtoa_r+0x32>
 800cd26:	2301      	movs	r3, #1
 800cd28:	e7de      	b.n	800cce8 <_dtoa_r+0x250>
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	9308      	str	r3, [sp, #32]
 800cd2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd30:	eb0a 0903 	add.w	r9, sl, r3
 800cd34:	f109 0301 	add.w	r3, r9, #1
 800cd38:	2b01      	cmp	r3, #1
 800cd3a:	9301      	str	r3, [sp, #4]
 800cd3c:	bfb8      	it	lt
 800cd3e:	2301      	movlt	r3, #1
 800cd40:	e7dd      	b.n	800ccfe <_dtoa_r+0x266>
 800cd42:	2301      	movs	r3, #1
 800cd44:	e7f2      	b.n	800cd2c <_dtoa_r+0x294>
 800cd46:	2501      	movs	r5, #1
 800cd48:	2300      	movs	r3, #0
 800cd4a:	9305      	str	r3, [sp, #20]
 800cd4c:	9508      	str	r5, [sp, #32]
 800cd4e:	f04f 39ff 	mov.w	r9, #4294967295
 800cd52:	2200      	movs	r2, #0
 800cd54:	f8cd 9004 	str.w	r9, [sp, #4]
 800cd58:	2312      	movs	r3, #18
 800cd5a:	9209      	str	r2, [sp, #36]	; 0x24
 800cd5c:	e7cf      	b.n	800ccfe <_dtoa_r+0x266>
 800cd5e:	2301      	movs	r3, #1
 800cd60:	9308      	str	r3, [sp, #32]
 800cd62:	e7f4      	b.n	800cd4e <_dtoa_r+0x2b6>
 800cd64:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800cd68:	f8cd 9004 	str.w	r9, [sp, #4]
 800cd6c:	464b      	mov	r3, r9
 800cd6e:	e7c6      	b.n	800ccfe <_dtoa_r+0x266>
 800cd70:	3101      	adds	r1, #1
 800cd72:	6041      	str	r1, [r0, #4]
 800cd74:	0052      	lsls	r2, r2, #1
 800cd76:	e7c6      	b.n	800cd06 <_dtoa_r+0x26e>
 800cd78:	636f4361 	.word	0x636f4361
 800cd7c:	3fd287a7 	.word	0x3fd287a7
 800cd80:	8b60c8b3 	.word	0x8b60c8b3
 800cd84:	3fc68a28 	.word	0x3fc68a28
 800cd88:	509f79fb 	.word	0x509f79fb
 800cd8c:	3fd34413 	.word	0x3fd34413
 800cd90:	0800eefd 	.word	0x0800eefd
 800cd94:	0800ef14 	.word	0x0800ef14
 800cd98:	7ff00000 	.word	0x7ff00000
 800cd9c:	0800eef9 	.word	0x0800eef9
 800cda0:	0800eef0 	.word	0x0800eef0
 800cda4:	0800eecd 	.word	0x0800eecd
 800cda8:	3ff80000 	.word	0x3ff80000
 800cdac:	0800f010 	.word	0x0800f010
 800cdb0:	0800ef73 	.word	0x0800ef73
 800cdb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cdb6:	9a00      	ldr	r2, [sp, #0]
 800cdb8:	601a      	str	r2, [r3, #0]
 800cdba:	9b01      	ldr	r3, [sp, #4]
 800cdbc:	2b0e      	cmp	r3, #14
 800cdbe:	f200 80ad 	bhi.w	800cf1c <_dtoa_r+0x484>
 800cdc2:	2d00      	cmp	r5, #0
 800cdc4:	f000 80aa 	beq.w	800cf1c <_dtoa_r+0x484>
 800cdc8:	f1ba 0f00 	cmp.w	sl, #0
 800cdcc:	dd36      	ble.n	800ce3c <_dtoa_r+0x3a4>
 800cdce:	4ac3      	ldr	r2, [pc, #780]	; (800d0dc <_dtoa_r+0x644>)
 800cdd0:	f00a 030f 	and.w	r3, sl, #15
 800cdd4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cdd8:	ed93 7b00 	vldr	d7, [r3]
 800cddc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800cde0:	ea4f 172a 	mov.w	r7, sl, asr #4
 800cde4:	eeb0 8a47 	vmov.f32	s16, s14
 800cde8:	eef0 8a67 	vmov.f32	s17, s15
 800cdec:	d016      	beq.n	800ce1c <_dtoa_r+0x384>
 800cdee:	4bbc      	ldr	r3, [pc, #752]	; (800d0e0 <_dtoa_r+0x648>)
 800cdf0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cdf4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cdf8:	f7f3 fd50 	bl	800089c <__aeabi_ddiv>
 800cdfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce00:	f007 070f 	and.w	r7, r7, #15
 800ce04:	2503      	movs	r5, #3
 800ce06:	4eb6      	ldr	r6, [pc, #728]	; (800d0e0 <_dtoa_r+0x648>)
 800ce08:	b957      	cbnz	r7, 800ce20 <_dtoa_r+0x388>
 800ce0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce0e:	ec53 2b18 	vmov	r2, r3, d8
 800ce12:	f7f3 fd43 	bl	800089c <__aeabi_ddiv>
 800ce16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce1a:	e029      	b.n	800ce70 <_dtoa_r+0x3d8>
 800ce1c:	2502      	movs	r5, #2
 800ce1e:	e7f2      	b.n	800ce06 <_dtoa_r+0x36e>
 800ce20:	07f9      	lsls	r1, r7, #31
 800ce22:	d508      	bpl.n	800ce36 <_dtoa_r+0x39e>
 800ce24:	ec51 0b18 	vmov	r0, r1, d8
 800ce28:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ce2c:	f7f3 fc0c 	bl	8000648 <__aeabi_dmul>
 800ce30:	ec41 0b18 	vmov	d8, r0, r1
 800ce34:	3501      	adds	r5, #1
 800ce36:	107f      	asrs	r7, r7, #1
 800ce38:	3608      	adds	r6, #8
 800ce3a:	e7e5      	b.n	800ce08 <_dtoa_r+0x370>
 800ce3c:	f000 80a6 	beq.w	800cf8c <_dtoa_r+0x4f4>
 800ce40:	f1ca 0600 	rsb	r6, sl, #0
 800ce44:	4ba5      	ldr	r3, [pc, #660]	; (800d0dc <_dtoa_r+0x644>)
 800ce46:	4fa6      	ldr	r7, [pc, #664]	; (800d0e0 <_dtoa_r+0x648>)
 800ce48:	f006 020f 	and.w	r2, r6, #15
 800ce4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ce50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce54:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ce58:	f7f3 fbf6 	bl	8000648 <__aeabi_dmul>
 800ce5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce60:	1136      	asrs	r6, r6, #4
 800ce62:	2300      	movs	r3, #0
 800ce64:	2502      	movs	r5, #2
 800ce66:	2e00      	cmp	r6, #0
 800ce68:	f040 8085 	bne.w	800cf76 <_dtoa_r+0x4de>
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d1d2      	bne.n	800ce16 <_dtoa_r+0x37e>
 800ce70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	f000 808c 	beq.w	800cf90 <_dtoa_r+0x4f8>
 800ce78:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ce7c:	4b99      	ldr	r3, [pc, #612]	; (800d0e4 <_dtoa_r+0x64c>)
 800ce7e:	2200      	movs	r2, #0
 800ce80:	4630      	mov	r0, r6
 800ce82:	4639      	mov	r1, r7
 800ce84:	f7f3 fe52 	bl	8000b2c <__aeabi_dcmplt>
 800ce88:	2800      	cmp	r0, #0
 800ce8a:	f000 8081 	beq.w	800cf90 <_dtoa_r+0x4f8>
 800ce8e:	9b01      	ldr	r3, [sp, #4]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d07d      	beq.n	800cf90 <_dtoa_r+0x4f8>
 800ce94:	f1b9 0f00 	cmp.w	r9, #0
 800ce98:	dd3c      	ble.n	800cf14 <_dtoa_r+0x47c>
 800ce9a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ce9e:	9307      	str	r3, [sp, #28]
 800cea0:	2200      	movs	r2, #0
 800cea2:	4b91      	ldr	r3, [pc, #580]	; (800d0e8 <_dtoa_r+0x650>)
 800cea4:	4630      	mov	r0, r6
 800cea6:	4639      	mov	r1, r7
 800cea8:	f7f3 fbce 	bl	8000648 <__aeabi_dmul>
 800ceac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ceb0:	3501      	adds	r5, #1
 800ceb2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800ceb6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ceba:	4628      	mov	r0, r5
 800cebc:	f7f3 fb5a 	bl	8000574 <__aeabi_i2d>
 800cec0:	4632      	mov	r2, r6
 800cec2:	463b      	mov	r3, r7
 800cec4:	f7f3 fbc0 	bl	8000648 <__aeabi_dmul>
 800cec8:	4b88      	ldr	r3, [pc, #544]	; (800d0ec <_dtoa_r+0x654>)
 800ceca:	2200      	movs	r2, #0
 800cecc:	f7f3 fa06 	bl	80002dc <__adddf3>
 800ced0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ced4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ced8:	9303      	str	r3, [sp, #12]
 800ceda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d15c      	bne.n	800cf9a <_dtoa_r+0x502>
 800cee0:	4b83      	ldr	r3, [pc, #524]	; (800d0f0 <_dtoa_r+0x658>)
 800cee2:	2200      	movs	r2, #0
 800cee4:	4630      	mov	r0, r6
 800cee6:	4639      	mov	r1, r7
 800cee8:	f7f3 f9f6 	bl	80002d8 <__aeabi_dsub>
 800ceec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cef0:	4606      	mov	r6, r0
 800cef2:	460f      	mov	r7, r1
 800cef4:	f7f3 fe38 	bl	8000b68 <__aeabi_dcmpgt>
 800cef8:	2800      	cmp	r0, #0
 800cefa:	f040 8296 	bne.w	800d42a <_dtoa_r+0x992>
 800cefe:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800cf02:	4630      	mov	r0, r6
 800cf04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cf08:	4639      	mov	r1, r7
 800cf0a:	f7f3 fe0f 	bl	8000b2c <__aeabi_dcmplt>
 800cf0e:	2800      	cmp	r0, #0
 800cf10:	f040 8288 	bne.w	800d424 <_dtoa_r+0x98c>
 800cf14:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800cf18:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cf1c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	f2c0 8158 	blt.w	800d1d4 <_dtoa_r+0x73c>
 800cf24:	f1ba 0f0e 	cmp.w	sl, #14
 800cf28:	f300 8154 	bgt.w	800d1d4 <_dtoa_r+0x73c>
 800cf2c:	4b6b      	ldr	r3, [pc, #428]	; (800d0dc <_dtoa_r+0x644>)
 800cf2e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cf32:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cf36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	f280 80e3 	bge.w	800d104 <_dtoa_r+0x66c>
 800cf3e:	9b01      	ldr	r3, [sp, #4]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	f300 80df 	bgt.w	800d104 <_dtoa_r+0x66c>
 800cf46:	f040 826d 	bne.w	800d424 <_dtoa_r+0x98c>
 800cf4a:	4b69      	ldr	r3, [pc, #420]	; (800d0f0 <_dtoa_r+0x658>)
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	4640      	mov	r0, r8
 800cf50:	4649      	mov	r1, r9
 800cf52:	f7f3 fb79 	bl	8000648 <__aeabi_dmul>
 800cf56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cf5a:	f7f3 fdfb 	bl	8000b54 <__aeabi_dcmpge>
 800cf5e:	9e01      	ldr	r6, [sp, #4]
 800cf60:	4637      	mov	r7, r6
 800cf62:	2800      	cmp	r0, #0
 800cf64:	f040 8243 	bne.w	800d3ee <_dtoa_r+0x956>
 800cf68:	9d00      	ldr	r5, [sp, #0]
 800cf6a:	2331      	movs	r3, #49	; 0x31
 800cf6c:	f805 3b01 	strb.w	r3, [r5], #1
 800cf70:	f10a 0a01 	add.w	sl, sl, #1
 800cf74:	e23f      	b.n	800d3f6 <_dtoa_r+0x95e>
 800cf76:	07f2      	lsls	r2, r6, #31
 800cf78:	d505      	bpl.n	800cf86 <_dtoa_r+0x4ee>
 800cf7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf7e:	f7f3 fb63 	bl	8000648 <__aeabi_dmul>
 800cf82:	3501      	adds	r5, #1
 800cf84:	2301      	movs	r3, #1
 800cf86:	1076      	asrs	r6, r6, #1
 800cf88:	3708      	adds	r7, #8
 800cf8a:	e76c      	b.n	800ce66 <_dtoa_r+0x3ce>
 800cf8c:	2502      	movs	r5, #2
 800cf8e:	e76f      	b.n	800ce70 <_dtoa_r+0x3d8>
 800cf90:	9b01      	ldr	r3, [sp, #4]
 800cf92:	f8cd a01c 	str.w	sl, [sp, #28]
 800cf96:	930c      	str	r3, [sp, #48]	; 0x30
 800cf98:	e78d      	b.n	800ceb6 <_dtoa_r+0x41e>
 800cf9a:	9900      	ldr	r1, [sp, #0]
 800cf9c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800cf9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cfa0:	4b4e      	ldr	r3, [pc, #312]	; (800d0dc <_dtoa_r+0x644>)
 800cfa2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cfa6:	4401      	add	r1, r0
 800cfa8:	9102      	str	r1, [sp, #8]
 800cfaa:	9908      	ldr	r1, [sp, #32]
 800cfac:	eeb0 8a47 	vmov.f32	s16, s14
 800cfb0:	eef0 8a67 	vmov.f32	s17, s15
 800cfb4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cfb8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cfbc:	2900      	cmp	r1, #0
 800cfbe:	d045      	beq.n	800d04c <_dtoa_r+0x5b4>
 800cfc0:	494c      	ldr	r1, [pc, #304]	; (800d0f4 <_dtoa_r+0x65c>)
 800cfc2:	2000      	movs	r0, #0
 800cfc4:	f7f3 fc6a 	bl	800089c <__aeabi_ddiv>
 800cfc8:	ec53 2b18 	vmov	r2, r3, d8
 800cfcc:	f7f3 f984 	bl	80002d8 <__aeabi_dsub>
 800cfd0:	9d00      	ldr	r5, [sp, #0]
 800cfd2:	ec41 0b18 	vmov	d8, r0, r1
 800cfd6:	4639      	mov	r1, r7
 800cfd8:	4630      	mov	r0, r6
 800cfda:	f7f3 fde5 	bl	8000ba8 <__aeabi_d2iz>
 800cfde:	900c      	str	r0, [sp, #48]	; 0x30
 800cfe0:	f7f3 fac8 	bl	8000574 <__aeabi_i2d>
 800cfe4:	4602      	mov	r2, r0
 800cfe6:	460b      	mov	r3, r1
 800cfe8:	4630      	mov	r0, r6
 800cfea:	4639      	mov	r1, r7
 800cfec:	f7f3 f974 	bl	80002d8 <__aeabi_dsub>
 800cff0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cff2:	3330      	adds	r3, #48	; 0x30
 800cff4:	f805 3b01 	strb.w	r3, [r5], #1
 800cff8:	ec53 2b18 	vmov	r2, r3, d8
 800cffc:	4606      	mov	r6, r0
 800cffe:	460f      	mov	r7, r1
 800d000:	f7f3 fd94 	bl	8000b2c <__aeabi_dcmplt>
 800d004:	2800      	cmp	r0, #0
 800d006:	d165      	bne.n	800d0d4 <_dtoa_r+0x63c>
 800d008:	4632      	mov	r2, r6
 800d00a:	463b      	mov	r3, r7
 800d00c:	4935      	ldr	r1, [pc, #212]	; (800d0e4 <_dtoa_r+0x64c>)
 800d00e:	2000      	movs	r0, #0
 800d010:	f7f3 f962 	bl	80002d8 <__aeabi_dsub>
 800d014:	ec53 2b18 	vmov	r2, r3, d8
 800d018:	f7f3 fd88 	bl	8000b2c <__aeabi_dcmplt>
 800d01c:	2800      	cmp	r0, #0
 800d01e:	f040 80b9 	bne.w	800d194 <_dtoa_r+0x6fc>
 800d022:	9b02      	ldr	r3, [sp, #8]
 800d024:	429d      	cmp	r5, r3
 800d026:	f43f af75 	beq.w	800cf14 <_dtoa_r+0x47c>
 800d02a:	4b2f      	ldr	r3, [pc, #188]	; (800d0e8 <_dtoa_r+0x650>)
 800d02c:	ec51 0b18 	vmov	r0, r1, d8
 800d030:	2200      	movs	r2, #0
 800d032:	f7f3 fb09 	bl	8000648 <__aeabi_dmul>
 800d036:	4b2c      	ldr	r3, [pc, #176]	; (800d0e8 <_dtoa_r+0x650>)
 800d038:	ec41 0b18 	vmov	d8, r0, r1
 800d03c:	2200      	movs	r2, #0
 800d03e:	4630      	mov	r0, r6
 800d040:	4639      	mov	r1, r7
 800d042:	f7f3 fb01 	bl	8000648 <__aeabi_dmul>
 800d046:	4606      	mov	r6, r0
 800d048:	460f      	mov	r7, r1
 800d04a:	e7c4      	b.n	800cfd6 <_dtoa_r+0x53e>
 800d04c:	ec51 0b17 	vmov	r0, r1, d7
 800d050:	f7f3 fafa 	bl	8000648 <__aeabi_dmul>
 800d054:	9b02      	ldr	r3, [sp, #8]
 800d056:	9d00      	ldr	r5, [sp, #0]
 800d058:	930c      	str	r3, [sp, #48]	; 0x30
 800d05a:	ec41 0b18 	vmov	d8, r0, r1
 800d05e:	4639      	mov	r1, r7
 800d060:	4630      	mov	r0, r6
 800d062:	f7f3 fda1 	bl	8000ba8 <__aeabi_d2iz>
 800d066:	9011      	str	r0, [sp, #68]	; 0x44
 800d068:	f7f3 fa84 	bl	8000574 <__aeabi_i2d>
 800d06c:	4602      	mov	r2, r0
 800d06e:	460b      	mov	r3, r1
 800d070:	4630      	mov	r0, r6
 800d072:	4639      	mov	r1, r7
 800d074:	f7f3 f930 	bl	80002d8 <__aeabi_dsub>
 800d078:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d07a:	3330      	adds	r3, #48	; 0x30
 800d07c:	f805 3b01 	strb.w	r3, [r5], #1
 800d080:	9b02      	ldr	r3, [sp, #8]
 800d082:	429d      	cmp	r5, r3
 800d084:	4606      	mov	r6, r0
 800d086:	460f      	mov	r7, r1
 800d088:	f04f 0200 	mov.w	r2, #0
 800d08c:	d134      	bne.n	800d0f8 <_dtoa_r+0x660>
 800d08e:	4b19      	ldr	r3, [pc, #100]	; (800d0f4 <_dtoa_r+0x65c>)
 800d090:	ec51 0b18 	vmov	r0, r1, d8
 800d094:	f7f3 f922 	bl	80002dc <__adddf3>
 800d098:	4602      	mov	r2, r0
 800d09a:	460b      	mov	r3, r1
 800d09c:	4630      	mov	r0, r6
 800d09e:	4639      	mov	r1, r7
 800d0a0:	f7f3 fd62 	bl	8000b68 <__aeabi_dcmpgt>
 800d0a4:	2800      	cmp	r0, #0
 800d0a6:	d175      	bne.n	800d194 <_dtoa_r+0x6fc>
 800d0a8:	ec53 2b18 	vmov	r2, r3, d8
 800d0ac:	4911      	ldr	r1, [pc, #68]	; (800d0f4 <_dtoa_r+0x65c>)
 800d0ae:	2000      	movs	r0, #0
 800d0b0:	f7f3 f912 	bl	80002d8 <__aeabi_dsub>
 800d0b4:	4602      	mov	r2, r0
 800d0b6:	460b      	mov	r3, r1
 800d0b8:	4630      	mov	r0, r6
 800d0ba:	4639      	mov	r1, r7
 800d0bc:	f7f3 fd36 	bl	8000b2c <__aeabi_dcmplt>
 800d0c0:	2800      	cmp	r0, #0
 800d0c2:	f43f af27 	beq.w	800cf14 <_dtoa_r+0x47c>
 800d0c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d0c8:	1e6b      	subs	r3, r5, #1
 800d0ca:	930c      	str	r3, [sp, #48]	; 0x30
 800d0cc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d0d0:	2b30      	cmp	r3, #48	; 0x30
 800d0d2:	d0f8      	beq.n	800d0c6 <_dtoa_r+0x62e>
 800d0d4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800d0d8:	e04a      	b.n	800d170 <_dtoa_r+0x6d8>
 800d0da:	bf00      	nop
 800d0dc:	0800f010 	.word	0x0800f010
 800d0e0:	0800efe8 	.word	0x0800efe8
 800d0e4:	3ff00000 	.word	0x3ff00000
 800d0e8:	40240000 	.word	0x40240000
 800d0ec:	401c0000 	.word	0x401c0000
 800d0f0:	40140000 	.word	0x40140000
 800d0f4:	3fe00000 	.word	0x3fe00000
 800d0f8:	4baf      	ldr	r3, [pc, #700]	; (800d3b8 <_dtoa_r+0x920>)
 800d0fa:	f7f3 faa5 	bl	8000648 <__aeabi_dmul>
 800d0fe:	4606      	mov	r6, r0
 800d100:	460f      	mov	r7, r1
 800d102:	e7ac      	b.n	800d05e <_dtoa_r+0x5c6>
 800d104:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d108:	9d00      	ldr	r5, [sp, #0]
 800d10a:	4642      	mov	r2, r8
 800d10c:	464b      	mov	r3, r9
 800d10e:	4630      	mov	r0, r6
 800d110:	4639      	mov	r1, r7
 800d112:	f7f3 fbc3 	bl	800089c <__aeabi_ddiv>
 800d116:	f7f3 fd47 	bl	8000ba8 <__aeabi_d2iz>
 800d11a:	9002      	str	r0, [sp, #8]
 800d11c:	f7f3 fa2a 	bl	8000574 <__aeabi_i2d>
 800d120:	4642      	mov	r2, r8
 800d122:	464b      	mov	r3, r9
 800d124:	f7f3 fa90 	bl	8000648 <__aeabi_dmul>
 800d128:	4602      	mov	r2, r0
 800d12a:	460b      	mov	r3, r1
 800d12c:	4630      	mov	r0, r6
 800d12e:	4639      	mov	r1, r7
 800d130:	f7f3 f8d2 	bl	80002d8 <__aeabi_dsub>
 800d134:	9e02      	ldr	r6, [sp, #8]
 800d136:	9f01      	ldr	r7, [sp, #4]
 800d138:	3630      	adds	r6, #48	; 0x30
 800d13a:	f805 6b01 	strb.w	r6, [r5], #1
 800d13e:	9e00      	ldr	r6, [sp, #0]
 800d140:	1bae      	subs	r6, r5, r6
 800d142:	42b7      	cmp	r7, r6
 800d144:	4602      	mov	r2, r0
 800d146:	460b      	mov	r3, r1
 800d148:	d137      	bne.n	800d1ba <_dtoa_r+0x722>
 800d14a:	f7f3 f8c7 	bl	80002dc <__adddf3>
 800d14e:	4642      	mov	r2, r8
 800d150:	464b      	mov	r3, r9
 800d152:	4606      	mov	r6, r0
 800d154:	460f      	mov	r7, r1
 800d156:	f7f3 fd07 	bl	8000b68 <__aeabi_dcmpgt>
 800d15a:	b9c8      	cbnz	r0, 800d190 <_dtoa_r+0x6f8>
 800d15c:	4642      	mov	r2, r8
 800d15e:	464b      	mov	r3, r9
 800d160:	4630      	mov	r0, r6
 800d162:	4639      	mov	r1, r7
 800d164:	f7f3 fcd8 	bl	8000b18 <__aeabi_dcmpeq>
 800d168:	b110      	cbz	r0, 800d170 <_dtoa_r+0x6d8>
 800d16a:	9b02      	ldr	r3, [sp, #8]
 800d16c:	07d9      	lsls	r1, r3, #31
 800d16e:	d40f      	bmi.n	800d190 <_dtoa_r+0x6f8>
 800d170:	4620      	mov	r0, r4
 800d172:	4659      	mov	r1, fp
 800d174:	f000 fad6 	bl	800d724 <_Bfree>
 800d178:	2300      	movs	r3, #0
 800d17a:	702b      	strb	r3, [r5, #0]
 800d17c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d17e:	f10a 0001 	add.w	r0, sl, #1
 800d182:	6018      	str	r0, [r3, #0]
 800d184:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d186:	2b00      	cmp	r3, #0
 800d188:	f43f acd8 	beq.w	800cb3c <_dtoa_r+0xa4>
 800d18c:	601d      	str	r5, [r3, #0]
 800d18e:	e4d5      	b.n	800cb3c <_dtoa_r+0xa4>
 800d190:	f8cd a01c 	str.w	sl, [sp, #28]
 800d194:	462b      	mov	r3, r5
 800d196:	461d      	mov	r5, r3
 800d198:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d19c:	2a39      	cmp	r2, #57	; 0x39
 800d19e:	d108      	bne.n	800d1b2 <_dtoa_r+0x71a>
 800d1a0:	9a00      	ldr	r2, [sp, #0]
 800d1a2:	429a      	cmp	r2, r3
 800d1a4:	d1f7      	bne.n	800d196 <_dtoa_r+0x6fe>
 800d1a6:	9a07      	ldr	r2, [sp, #28]
 800d1a8:	9900      	ldr	r1, [sp, #0]
 800d1aa:	3201      	adds	r2, #1
 800d1ac:	9207      	str	r2, [sp, #28]
 800d1ae:	2230      	movs	r2, #48	; 0x30
 800d1b0:	700a      	strb	r2, [r1, #0]
 800d1b2:	781a      	ldrb	r2, [r3, #0]
 800d1b4:	3201      	adds	r2, #1
 800d1b6:	701a      	strb	r2, [r3, #0]
 800d1b8:	e78c      	b.n	800d0d4 <_dtoa_r+0x63c>
 800d1ba:	4b7f      	ldr	r3, [pc, #508]	; (800d3b8 <_dtoa_r+0x920>)
 800d1bc:	2200      	movs	r2, #0
 800d1be:	f7f3 fa43 	bl	8000648 <__aeabi_dmul>
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	4606      	mov	r6, r0
 800d1c8:	460f      	mov	r7, r1
 800d1ca:	f7f3 fca5 	bl	8000b18 <__aeabi_dcmpeq>
 800d1ce:	2800      	cmp	r0, #0
 800d1d0:	d09b      	beq.n	800d10a <_dtoa_r+0x672>
 800d1d2:	e7cd      	b.n	800d170 <_dtoa_r+0x6d8>
 800d1d4:	9a08      	ldr	r2, [sp, #32]
 800d1d6:	2a00      	cmp	r2, #0
 800d1d8:	f000 80c4 	beq.w	800d364 <_dtoa_r+0x8cc>
 800d1dc:	9a05      	ldr	r2, [sp, #20]
 800d1de:	2a01      	cmp	r2, #1
 800d1e0:	f300 80a8 	bgt.w	800d334 <_dtoa_r+0x89c>
 800d1e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d1e6:	2a00      	cmp	r2, #0
 800d1e8:	f000 80a0 	beq.w	800d32c <_dtoa_r+0x894>
 800d1ec:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d1f0:	9e06      	ldr	r6, [sp, #24]
 800d1f2:	4645      	mov	r5, r8
 800d1f4:	9a04      	ldr	r2, [sp, #16]
 800d1f6:	2101      	movs	r1, #1
 800d1f8:	441a      	add	r2, r3
 800d1fa:	4620      	mov	r0, r4
 800d1fc:	4498      	add	r8, r3
 800d1fe:	9204      	str	r2, [sp, #16]
 800d200:	f000 fb4c 	bl	800d89c <__i2b>
 800d204:	4607      	mov	r7, r0
 800d206:	2d00      	cmp	r5, #0
 800d208:	dd0b      	ble.n	800d222 <_dtoa_r+0x78a>
 800d20a:	9b04      	ldr	r3, [sp, #16]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	dd08      	ble.n	800d222 <_dtoa_r+0x78a>
 800d210:	42ab      	cmp	r3, r5
 800d212:	9a04      	ldr	r2, [sp, #16]
 800d214:	bfa8      	it	ge
 800d216:	462b      	movge	r3, r5
 800d218:	eba8 0803 	sub.w	r8, r8, r3
 800d21c:	1aed      	subs	r5, r5, r3
 800d21e:	1ad3      	subs	r3, r2, r3
 800d220:	9304      	str	r3, [sp, #16]
 800d222:	9b06      	ldr	r3, [sp, #24]
 800d224:	b1fb      	cbz	r3, 800d266 <_dtoa_r+0x7ce>
 800d226:	9b08      	ldr	r3, [sp, #32]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	f000 809f 	beq.w	800d36c <_dtoa_r+0x8d4>
 800d22e:	2e00      	cmp	r6, #0
 800d230:	dd11      	ble.n	800d256 <_dtoa_r+0x7be>
 800d232:	4639      	mov	r1, r7
 800d234:	4632      	mov	r2, r6
 800d236:	4620      	mov	r0, r4
 800d238:	f000 fbec 	bl	800da14 <__pow5mult>
 800d23c:	465a      	mov	r2, fp
 800d23e:	4601      	mov	r1, r0
 800d240:	4607      	mov	r7, r0
 800d242:	4620      	mov	r0, r4
 800d244:	f000 fb40 	bl	800d8c8 <__multiply>
 800d248:	4659      	mov	r1, fp
 800d24a:	9007      	str	r0, [sp, #28]
 800d24c:	4620      	mov	r0, r4
 800d24e:	f000 fa69 	bl	800d724 <_Bfree>
 800d252:	9b07      	ldr	r3, [sp, #28]
 800d254:	469b      	mov	fp, r3
 800d256:	9b06      	ldr	r3, [sp, #24]
 800d258:	1b9a      	subs	r2, r3, r6
 800d25a:	d004      	beq.n	800d266 <_dtoa_r+0x7ce>
 800d25c:	4659      	mov	r1, fp
 800d25e:	4620      	mov	r0, r4
 800d260:	f000 fbd8 	bl	800da14 <__pow5mult>
 800d264:	4683      	mov	fp, r0
 800d266:	2101      	movs	r1, #1
 800d268:	4620      	mov	r0, r4
 800d26a:	f000 fb17 	bl	800d89c <__i2b>
 800d26e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d270:	2b00      	cmp	r3, #0
 800d272:	4606      	mov	r6, r0
 800d274:	dd7c      	ble.n	800d370 <_dtoa_r+0x8d8>
 800d276:	461a      	mov	r2, r3
 800d278:	4601      	mov	r1, r0
 800d27a:	4620      	mov	r0, r4
 800d27c:	f000 fbca 	bl	800da14 <__pow5mult>
 800d280:	9b05      	ldr	r3, [sp, #20]
 800d282:	2b01      	cmp	r3, #1
 800d284:	4606      	mov	r6, r0
 800d286:	dd76      	ble.n	800d376 <_dtoa_r+0x8de>
 800d288:	2300      	movs	r3, #0
 800d28a:	9306      	str	r3, [sp, #24]
 800d28c:	6933      	ldr	r3, [r6, #16]
 800d28e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d292:	6918      	ldr	r0, [r3, #16]
 800d294:	f000 fab2 	bl	800d7fc <__hi0bits>
 800d298:	f1c0 0020 	rsb	r0, r0, #32
 800d29c:	9b04      	ldr	r3, [sp, #16]
 800d29e:	4418      	add	r0, r3
 800d2a0:	f010 001f 	ands.w	r0, r0, #31
 800d2a4:	f000 8086 	beq.w	800d3b4 <_dtoa_r+0x91c>
 800d2a8:	f1c0 0320 	rsb	r3, r0, #32
 800d2ac:	2b04      	cmp	r3, #4
 800d2ae:	dd7f      	ble.n	800d3b0 <_dtoa_r+0x918>
 800d2b0:	f1c0 001c 	rsb	r0, r0, #28
 800d2b4:	9b04      	ldr	r3, [sp, #16]
 800d2b6:	4403      	add	r3, r0
 800d2b8:	4480      	add	r8, r0
 800d2ba:	4405      	add	r5, r0
 800d2bc:	9304      	str	r3, [sp, #16]
 800d2be:	f1b8 0f00 	cmp.w	r8, #0
 800d2c2:	dd05      	ble.n	800d2d0 <_dtoa_r+0x838>
 800d2c4:	4659      	mov	r1, fp
 800d2c6:	4642      	mov	r2, r8
 800d2c8:	4620      	mov	r0, r4
 800d2ca:	f000 fbfd 	bl	800dac8 <__lshift>
 800d2ce:	4683      	mov	fp, r0
 800d2d0:	9b04      	ldr	r3, [sp, #16]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	dd05      	ble.n	800d2e2 <_dtoa_r+0x84a>
 800d2d6:	4631      	mov	r1, r6
 800d2d8:	461a      	mov	r2, r3
 800d2da:	4620      	mov	r0, r4
 800d2dc:	f000 fbf4 	bl	800dac8 <__lshift>
 800d2e0:	4606      	mov	r6, r0
 800d2e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d069      	beq.n	800d3bc <_dtoa_r+0x924>
 800d2e8:	4631      	mov	r1, r6
 800d2ea:	4658      	mov	r0, fp
 800d2ec:	f000 fc58 	bl	800dba0 <__mcmp>
 800d2f0:	2800      	cmp	r0, #0
 800d2f2:	da63      	bge.n	800d3bc <_dtoa_r+0x924>
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	4659      	mov	r1, fp
 800d2f8:	220a      	movs	r2, #10
 800d2fa:	4620      	mov	r0, r4
 800d2fc:	f000 fa34 	bl	800d768 <__multadd>
 800d300:	9b08      	ldr	r3, [sp, #32]
 800d302:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d306:	4683      	mov	fp, r0
 800d308:	2b00      	cmp	r3, #0
 800d30a:	f000 818f 	beq.w	800d62c <_dtoa_r+0xb94>
 800d30e:	4639      	mov	r1, r7
 800d310:	2300      	movs	r3, #0
 800d312:	220a      	movs	r2, #10
 800d314:	4620      	mov	r0, r4
 800d316:	f000 fa27 	bl	800d768 <__multadd>
 800d31a:	f1b9 0f00 	cmp.w	r9, #0
 800d31e:	4607      	mov	r7, r0
 800d320:	f300 808e 	bgt.w	800d440 <_dtoa_r+0x9a8>
 800d324:	9b05      	ldr	r3, [sp, #20]
 800d326:	2b02      	cmp	r3, #2
 800d328:	dc50      	bgt.n	800d3cc <_dtoa_r+0x934>
 800d32a:	e089      	b.n	800d440 <_dtoa_r+0x9a8>
 800d32c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d32e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d332:	e75d      	b.n	800d1f0 <_dtoa_r+0x758>
 800d334:	9b01      	ldr	r3, [sp, #4]
 800d336:	1e5e      	subs	r6, r3, #1
 800d338:	9b06      	ldr	r3, [sp, #24]
 800d33a:	42b3      	cmp	r3, r6
 800d33c:	bfbf      	itttt	lt
 800d33e:	9b06      	ldrlt	r3, [sp, #24]
 800d340:	9606      	strlt	r6, [sp, #24]
 800d342:	1af2      	sublt	r2, r6, r3
 800d344:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800d346:	bfb6      	itet	lt
 800d348:	189b      	addlt	r3, r3, r2
 800d34a:	1b9e      	subge	r6, r3, r6
 800d34c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800d34e:	9b01      	ldr	r3, [sp, #4]
 800d350:	bfb8      	it	lt
 800d352:	2600      	movlt	r6, #0
 800d354:	2b00      	cmp	r3, #0
 800d356:	bfb5      	itete	lt
 800d358:	eba8 0503 	sublt.w	r5, r8, r3
 800d35c:	9b01      	ldrge	r3, [sp, #4]
 800d35e:	2300      	movlt	r3, #0
 800d360:	4645      	movge	r5, r8
 800d362:	e747      	b.n	800d1f4 <_dtoa_r+0x75c>
 800d364:	9e06      	ldr	r6, [sp, #24]
 800d366:	9f08      	ldr	r7, [sp, #32]
 800d368:	4645      	mov	r5, r8
 800d36a:	e74c      	b.n	800d206 <_dtoa_r+0x76e>
 800d36c:	9a06      	ldr	r2, [sp, #24]
 800d36e:	e775      	b.n	800d25c <_dtoa_r+0x7c4>
 800d370:	9b05      	ldr	r3, [sp, #20]
 800d372:	2b01      	cmp	r3, #1
 800d374:	dc18      	bgt.n	800d3a8 <_dtoa_r+0x910>
 800d376:	9b02      	ldr	r3, [sp, #8]
 800d378:	b9b3      	cbnz	r3, 800d3a8 <_dtoa_r+0x910>
 800d37a:	9b03      	ldr	r3, [sp, #12]
 800d37c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d380:	b9a3      	cbnz	r3, 800d3ac <_dtoa_r+0x914>
 800d382:	9b03      	ldr	r3, [sp, #12]
 800d384:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d388:	0d1b      	lsrs	r3, r3, #20
 800d38a:	051b      	lsls	r3, r3, #20
 800d38c:	b12b      	cbz	r3, 800d39a <_dtoa_r+0x902>
 800d38e:	9b04      	ldr	r3, [sp, #16]
 800d390:	3301      	adds	r3, #1
 800d392:	9304      	str	r3, [sp, #16]
 800d394:	f108 0801 	add.w	r8, r8, #1
 800d398:	2301      	movs	r3, #1
 800d39a:	9306      	str	r3, [sp, #24]
 800d39c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	f47f af74 	bne.w	800d28c <_dtoa_r+0x7f4>
 800d3a4:	2001      	movs	r0, #1
 800d3a6:	e779      	b.n	800d29c <_dtoa_r+0x804>
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	e7f6      	b.n	800d39a <_dtoa_r+0x902>
 800d3ac:	9b02      	ldr	r3, [sp, #8]
 800d3ae:	e7f4      	b.n	800d39a <_dtoa_r+0x902>
 800d3b0:	d085      	beq.n	800d2be <_dtoa_r+0x826>
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	301c      	adds	r0, #28
 800d3b6:	e77d      	b.n	800d2b4 <_dtoa_r+0x81c>
 800d3b8:	40240000 	.word	0x40240000
 800d3bc:	9b01      	ldr	r3, [sp, #4]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	dc38      	bgt.n	800d434 <_dtoa_r+0x99c>
 800d3c2:	9b05      	ldr	r3, [sp, #20]
 800d3c4:	2b02      	cmp	r3, #2
 800d3c6:	dd35      	ble.n	800d434 <_dtoa_r+0x99c>
 800d3c8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800d3cc:	f1b9 0f00 	cmp.w	r9, #0
 800d3d0:	d10d      	bne.n	800d3ee <_dtoa_r+0x956>
 800d3d2:	4631      	mov	r1, r6
 800d3d4:	464b      	mov	r3, r9
 800d3d6:	2205      	movs	r2, #5
 800d3d8:	4620      	mov	r0, r4
 800d3da:	f000 f9c5 	bl	800d768 <__multadd>
 800d3de:	4601      	mov	r1, r0
 800d3e0:	4606      	mov	r6, r0
 800d3e2:	4658      	mov	r0, fp
 800d3e4:	f000 fbdc 	bl	800dba0 <__mcmp>
 800d3e8:	2800      	cmp	r0, #0
 800d3ea:	f73f adbd 	bgt.w	800cf68 <_dtoa_r+0x4d0>
 800d3ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3f0:	9d00      	ldr	r5, [sp, #0]
 800d3f2:	ea6f 0a03 	mvn.w	sl, r3
 800d3f6:	f04f 0800 	mov.w	r8, #0
 800d3fa:	4631      	mov	r1, r6
 800d3fc:	4620      	mov	r0, r4
 800d3fe:	f000 f991 	bl	800d724 <_Bfree>
 800d402:	2f00      	cmp	r7, #0
 800d404:	f43f aeb4 	beq.w	800d170 <_dtoa_r+0x6d8>
 800d408:	f1b8 0f00 	cmp.w	r8, #0
 800d40c:	d005      	beq.n	800d41a <_dtoa_r+0x982>
 800d40e:	45b8      	cmp	r8, r7
 800d410:	d003      	beq.n	800d41a <_dtoa_r+0x982>
 800d412:	4641      	mov	r1, r8
 800d414:	4620      	mov	r0, r4
 800d416:	f000 f985 	bl	800d724 <_Bfree>
 800d41a:	4639      	mov	r1, r7
 800d41c:	4620      	mov	r0, r4
 800d41e:	f000 f981 	bl	800d724 <_Bfree>
 800d422:	e6a5      	b.n	800d170 <_dtoa_r+0x6d8>
 800d424:	2600      	movs	r6, #0
 800d426:	4637      	mov	r7, r6
 800d428:	e7e1      	b.n	800d3ee <_dtoa_r+0x956>
 800d42a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800d42c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800d430:	4637      	mov	r7, r6
 800d432:	e599      	b.n	800cf68 <_dtoa_r+0x4d0>
 800d434:	9b08      	ldr	r3, [sp, #32]
 800d436:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	f000 80fd 	beq.w	800d63a <_dtoa_r+0xba2>
 800d440:	2d00      	cmp	r5, #0
 800d442:	dd05      	ble.n	800d450 <_dtoa_r+0x9b8>
 800d444:	4639      	mov	r1, r7
 800d446:	462a      	mov	r2, r5
 800d448:	4620      	mov	r0, r4
 800d44a:	f000 fb3d 	bl	800dac8 <__lshift>
 800d44e:	4607      	mov	r7, r0
 800d450:	9b06      	ldr	r3, [sp, #24]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d05c      	beq.n	800d510 <_dtoa_r+0xa78>
 800d456:	6879      	ldr	r1, [r7, #4]
 800d458:	4620      	mov	r0, r4
 800d45a:	f000 f923 	bl	800d6a4 <_Balloc>
 800d45e:	4605      	mov	r5, r0
 800d460:	b928      	cbnz	r0, 800d46e <_dtoa_r+0x9d6>
 800d462:	4b80      	ldr	r3, [pc, #512]	; (800d664 <_dtoa_r+0xbcc>)
 800d464:	4602      	mov	r2, r0
 800d466:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d46a:	f7ff bb2e 	b.w	800caca <_dtoa_r+0x32>
 800d46e:	693a      	ldr	r2, [r7, #16]
 800d470:	3202      	adds	r2, #2
 800d472:	0092      	lsls	r2, r2, #2
 800d474:	f107 010c 	add.w	r1, r7, #12
 800d478:	300c      	adds	r0, #12
 800d47a:	f000 f905 	bl	800d688 <memcpy>
 800d47e:	2201      	movs	r2, #1
 800d480:	4629      	mov	r1, r5
 800d482:	4620      	mov	r0, r4
 800d484:	f000 fb20 	bl	800dac8 <__lshift>
 800d488:	9b00      	ldr	r3, [sp, #0]
 800d48a:	3301      	adds	r3, #1
 800d48c:	9301      	str	r3, [sp, #4]
 800d48e:	9b00      	ldr	r3, [sp, #0]
 800d490:	444b      	add	r3, r9
 800d492:	9307      	str	r3, [sp, #28]
 800d494:	9b02      	ldr	r3, [sp, #8]
 800d496:	f003 0301 	and.w	r3, r3, #1
 800d49a:	46b8      	mov	r8, r7
 800d49c:	9306      	str	r3, [sp, #24]
 800d49e:	4607      	mov	r7, r0
 800d4a0:	9b01      	ldr	r3, [sp, #4]
 800d4a2:	4631      	mov	r1, r6
 800d4a4:	3b01      	subs	r3, #1
 800d4a6:	4658      	mov	r0, fp
 800d4a8:	9302      	str	r3, [sp, #8]
 800d4aa:	f7ff fa67 	bl	800c97c <quorem>
 800d4ae:	4603      	mov	r3, r0
 800d4b0:	3330      	adds	r3, #48	; 0x30
 800d4b2:	9004      	str	r0, [sp, #16]
 800d4b4:	4641      	mov	r1, r8
 800d4b6:	4658      	mov	r0, fp
 800d4b8:	9308      	str	r3, [sp, #32]
 800d4ba:	f000 fb71 	bl	800dba0 <__mcmp>
 800d4be:	463a      	mov	r2, r7
 800d4c0:	4681      	mov	r9, r0
 800d4c2:	4631      	mov	r1, r6
 800d4c4:	4620      	mov	r0, r4
 800d4c6:	f000 fb87 	bl	800dbd8 <__mdiff>
 800d4ca:	68c2      	ldr	r2, [r0, #12]
 800d4cc:	9b08      	ldr	r3, [sp, #32]
 800d4ce:	4605      	mov	r5, r0
 800d4d0:	bb02      	cbnz	r2, 800d514 <_dtoa_r+0xa7c>
 800d4d2:	4601      	mov	r1, r0
 800d4d4:	4658      	mov	r0, fp
 800d4d6:	f000 fb63 	bl	800dba0 <__mcmp>
 800d4da:	9b08      	ldr	r3, [sp, #32]
 800d4dc:	4602      	mov	r2, r0
 800d4de:	4629      	mov	r1, r5
 800d4e0:	4620      	mov	r0, r4
 800d4e2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800d4e6:	f000 f91d 	bl	800d724 <_Bfree>
 800d4ea:	9b05      	ldr	r3, [sp, #20]
 800d4ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d4ee:	9d01      	ldr	r5, [sp, #4]
 800d4f0:	ea43 0102 	orr.w	r1, r3, r2
 800d4f4:	9b06      	ldr	r3, [sp, #24]
 800d4f6:	430b      	orrs	r3, r1
 800d4f8:	9b08      	ldr	r3, [sp, #32]
 800d4fa:	d10d      	bne.n	800d518 <_dtoa_r+0xa80>
 800d4fc:	2b39      	cmp	r3, #57	; 0x39
 800d4fe:	d029      	beq.n	800d554 <_dtoa_r+0xabc>
 800d500:	f1b9 0f00 	cmp.w	r9, #0
 800d504:	dd01      	ble.n	800d50a <_dtoa_r+0xa72>
 800d506:	9b04      	ldr	r3, [sp, #16]
 800d508:	3331      	adds	r3, #49	; 0x31
 800d50a:	9a02      	ldr	r2, [sp, #8]
 800d50c:	7013      	strb	r3, [r2, #0]
 800d50e:	e774      	b.n	800d3fa <_dtoa_r+0x962>
 800d510:	4638      	mov	r0, r7
 800d512:	e7b9      	b.n	800d488 <_dtoa_r+0x9f0>
 800d514:	2201      	movs	r2, #1
 800d516:	e7e2      	b.n	800d4de <_dtoa_r+0xa46>
 800d518:	f1b9 0f00 	cmp.w	r9, #0
 800d51c:	db06      	blt.n	800d52c <_dtoa_r+0xa94>
 800d51e:	9905      	ldr	r1, [sp, #20]
 800d520:	ea41 0909 	orr.w	r9, r1, r9
 800d524:	9906      	ldr	r1, [sp, #24]
 800d526:	ea59 0101 	orrs.w	r1, r9, r1
 800d52a:	d120      	bne.n	800d56e <_dtoa_r+0xad6>
 800d52c:	2a00      	cmp	r2, #0
 800d52e:	ddec      	ble.n	800d50a <_dtoa_r+0xa72>
 800d530:	4659      	mov	r1, fp
 800d532:	2201      	movs	r2, #1
 800d534:	4620      	mov	r0, r4
 800d536:	9301      	str	r3, [sp, #4]
 800d538:	f000 fac6 	bl	800dac8 <__lshift>
 800d53c:	4631      	mov	r1, r6
 800d53e:	4683      	mov	fp, r0
 800d540:	f000 fb2e 	bl	800dba0 <__mcmp>
 800d544:	2800      	cmp	r0, #0
 800d546:	9b01      	ldr	r3, [sp, #4]
 800d548:	dc02      	bgt.n	800d550 <_dtoa_r+0xab8>
 800d54a:	d1de      	bne.n	800d50a <_dtoa_r+0xa72>
 800d54c:	07da      	lsls	r2, r3, #31
 800d54e:	d5dc      	bpl.n	800d50a <_dtoa_r+0xa72>
 800d550:	2b39      	cmp	r3, #57	; 0x39
 800d552:	d1d8      	bne.n	800d506 <_dtoa_r+0xa6e>
 800d554:	9a02      	ldr	r2, [sp, #8]
 800d556:	2339      	movs	r3, #57	; 0x39
 800d558:	7013      	strb	r3, [r2, #0]
 800d55a:	462b      	mov	r3, r5
 800d55c:	461d      	mov	r5, r3
 800d55e:	3b01      	subs	r3, #1
 800d560:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d564:	2a39      	cmp	r2, #57	; 0x39
 800d566:	d050      	beq.n	800d60a <_dtoa_r+0xb72>
 800d568:	3201      	adds	r2, #1
 800d56a:	701a      	strb	r2, [r3, #0]
 800d56c:	e745      	b.n	800d3fa <_dtoa_r+0x962>
 800d56e:	2a00      	cmp	r2, #0
 800d570:	dd03      	ble.n	800d57a <_dtoa_r+0xae2>
 800d572:	2b39      	cmp	r3, #57	; 0x39
 800d574:	d0ee      	beq.n	800d554 <_dtoa_r+0xabc>
 800d576:	3301      	adds	r3, #1
 800d578:	e7c7      	b.n	800d50a <_dtoa_r+0xa72>
 800d57a:	9a01      	ldr	r2, [sp, #4]
 800d57c:	9907      	ldr	r1, [sp, #28]
 800d57e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d582:	428a      	cmp	r2, r1
 800d584:	d02a      	beq.n	800d5dc <_dtoa_r+0xb44>
 800d586:	4659      	mov	r1, fp
 800d588:	2300      	movs	r3, #0
 800d58a:	220a      	movs	r2, #10
 800d58c:	4620      	mov	r0, r4
 800d58e:	f000 f8eb 	bl	800d768 <__multadd>
 800d592:	45b8      	cmp	r8, r7
 800d594:	4683      	mov	fp, r0
 800d596:	f04f 0300 	mov.w	r3, #0
 800d59a:	f04f 020a 	mov.w	r2, #10
 800d59e:	4641      	mov	r1, r8
 800d5a0:	4620      	mov	r0, r4
 800d5a2:	d107      	bne.n	800d5b4 <_dtoa_r+0xb1c>
 800d5a4:	f000 f8e0 	bl	800d768 <__multadd>
 800d5a8:	4680      	mov	r8, r0
 800d5aa:	4607      	mov	r7, r0
 800d5ac:	9b01      	ldr	r3, [sp, #4]
 800d5ae:	3301      	adds	r3, #1
 800d5b0:	9301      	str	r3, [sp, #4]
 800d5b2:	e775      	b.n	800d4a0 <_dtoa_r+0xa08>
 800d5b4:	f000 f8d8 	bl	800d768 <__multadd>
 800d5b8:	4639      	mov	r1, r7
 800d5ba:	4680      	mov	r8, r0
 800d5bc:	2300      	movs	r3, #0
 800d5be:	220a      	movs	r2, #10
 800d5c0:	4620      	mov	r0, r4
 800d5c2:	f000 f8d1 	bl	800d768 <__multadd>
 800d5c6:	4607      	mov	r7, r0
 800d5c8:	e7f0      	b.n	800d5ac <_dtoa_r+0xb14>
 800d5ca:	f1b9 0f00 	cmp.w	r9, #0
 800d5ce:	9a00      	ldr	r2, [sp, #0]
 800d5d0:	bfcc      	ite	gt
 800d5d2:	464d      	movgt	r5, r9
 800d5d4:	2501      	movle	r5, #1
 800d5d6:	4415      	add	r5, r2
 800d5d8:	f04f 0800 	mov.w	r8, #0
 800d5dc:	4659      	mov	r1, fp
 800d5de:	2201      	movs	r2, #1
 800d5e0:	4620      	mov	r0, r4
 800d5e2:	9301      	str	r3, [sp, #4]
 800d5e4:	f000 fa70 	bl	800dac8 <__lshift>
 800d5e8:	4631      	mov	r1, r6
 800d5ea:	4683      	mov	fp, r0
 800d5ec:	f000 fad8 	bl	800dba0 <__mcmp>
 800d5f0:	2800      	cmp	r0, #0
 800d5f2:	dcb2      	bgt.n	800d55a <_dtoa_r+0xac2>
 800d5f4:	d102      	bne.n	800d5fc <_dtoa_r+0xb64>
 800d5f6:	9b01      	ldr	r3, [sp, #4]
 800d5f8:	07db      	lsls	r3, r3, #31
 800d5fa:	d4ae      	bmi.n	800d55a <_dtoa_r+0xac2>
 800d5fc:	462b      	mov	r3, r5
 800d5fe:	461d      	mov	r5, r3
 800d600:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d604:	2a30      	cmp	r2, #48	; 0x30
 800d606:	d0fa      	beq.n	800d5fe <_dtoa_r+0xb66>
 800d608:	e6f7      	b.n	800d3fa <_dtoa_r+0x962>
 800d60a:	9a00      	ldr	r2, [sp, #0]
 800d60c:	429a      	cmp	r2, r3
 800d60e:	d1a5      	bne.n	800d55c <_dtoa_r+0xac4>
 800d610:	f10a 0a01 	add.w	sl, sl, #1
 800d614:	2331      	movs	r3, #49	; 0x31
 800d616:	e779      	b.n	800d50c <_dtoa_r+0xa74>
 800d618:	4b13      	ldr	r3, [pc, #76]	; (800d668 <_dtoa_r+0xbd0>)
 800d61a:	f7ff baaf 	b.w	800cb7c <_dtoa_r+0xe4>
 800d61e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d620:	2b00      	cmp	r3, #0
 800d622:	f47f aa86 	bne.w	800cb32 <_dtoa_r+0x9a>
 800d626:	4b11      	ldr	r3, [pc, #68]	; (800d66c <_dtoa_r+0xbd4>)
 800d628:	f7ff baa8 	b.w	800cb7c <_dtoa_r+0xe4>
 800d62c:	f1b9 0f00 	cmp.w	r9, #0
 800d630:	dc03      	bgt.n	800d63a <_dtoa_r+0xba2>
 800d632:	9b05      	ldr	r3, [sp, #20]
 800d634:	2b02      	cmp	r3, #2
 800d636:	f73f aec9 	bgt.w	800d3cc <_dtoa_r+0x934>
 800d63a:	9d00      	ldr	r5, [sp, #0]
 800d63c:	4631      	mov	r1, r6
 800d63e:	4658      	mov	r0, fp
 800d640:	f7ff f99c 	bl	800c97c <quorem>
 800d644:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800d648:	f805 3b01 	strb.w	r3, [r5], #1
 800d64c:	9a00      	ldr	r2, [sp, #0]
 800d64e:	1aaa      	subs	r2, r5, r2
 800d650:	4591      	cmp	r9, r2
 800d652:	ddba      	ble.n	800d5ca <_dtoa_r+0xb32>
 800d654:	4659      	mov	r1, fp
 800d656:	2300      	movs	r3, #0
 800d658:	220a      	movs	r2, #10
 800d65a:	4620      	mov	r0, r4
 800d65c:	f000 f884 	bl	800d768 <__multadd>
 800d660:	4683      	mov	fp, r0
 800d662:	e7eb      	b.n	800d63c <_dtoa_r+0xba4>
 800d664:	0800ef73 	.word	0x0800ef73
 800d668:	0800eecc 	.word	0x0800eecc
 800d66c:	0800eef0 	.word	0x0800eef0

0800d670 <_localeconv_r>:
 800d670:	4800      	ldr	r0, [pc, #0]	; (800d674 <_localeconv_r+0x4>)
 800d672:	4770      	bx	lr
 800d674:	20000164 	.word	0x20000164

0800d678 <malloc>:
 800d678:	4b02      	ldr	r3, [pc, #8]	; (800d684 <malloc+0xc>)
 800d67a:	4601      	mov	r1, r0
 800d67c:	6818      	ldr	r0, [r3, #0]
 800d67e:	f000 bbef 	b.w	800de60 <_malloc_r>
 800d682:	bf00      	nop
 800d684:	20000010 	.word	0x20000010

0800d688 <memcpy>:
 800d688:	440a      	add	r2, r1
 800d68a:	4291      	cmp	r1, r2
 800d68c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d690:	d100      	bne.n	800d694 <memcpy+0xc>
 800d692:	4770      	bx	lr
 800d694:	b510      	push	{r4, lr}
 800d696:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d69a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d69e:	4291      	cmp	r1, r2
 800d6a0:	d1f9      	bne.n	800d696 <memcpy+0xe>
 800d6a2:	bd10      	pop	{r4, pc}

0800d6a4 <_Balloc>:
 800d6a4:	b570      	push	{r4, r5, r6, lr}
 800d6a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d6a8:	4604      	mov	r4, r0
 800d6aa:	460d      	mov	r5, r1
 800d6ac:	b976      	cbnz	r6, 800d6cc <_Balloc+0x28>
 800d6ae:	2010      	movs	r0, #16
 800d6b0:	f7ff ffe2 	bl	800d678 <malloc>
 800d6b4:	4602      	mov	r2, r0
 800d6b6:	6260      	str	r0, [r4, #36]	; 0x24
 800d6b8:	b920      	cbnz	r0, 800d6c4 <_Balloc+0x20>
 800d6ba:	4b18      	ldr	r3, [pc, #96]	; (800d71c <_Balloc+0x78>)
 800d6bc:	4818      	ldr	r0, [pc, #96]	; (800d720 <_Balloc+0x7c>)
 800d6be:	2166      	movs	r1, #102	; 0x66
 800d6c0:	f000 fd94 	bl	800e1ec <__assert_func>
 800d6c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d6c8:	6006      	str	r6, [r0, #0]
 800d6ca:	60c6      	str	r6, [r0, #12]
 800d6cc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d6ce:	68f3      	ldr	r3, [r6, #12]
 800d6d0:	b183      	cbz	r3, 800d6f4 <_Balloc+0x50>
 800d6d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d6d4:	68db      	ldr	r3, [r3, #12]
 800d6d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d6da:	b9b8      	cbnz	r0, 800d70c <_Balloc+0x68>
 800d6dc:	2101      	movs	r1, #1
 800d6de:	fa01 f605 	lsl.w	r6, r1, r5
 800d6e2:	1d72      	adds	r2, r6, #5
 800d6e4:	0092      	lsls	r2, r2, #2
 800d6e6:	4620      	mov	r0, r4
 800d6e8:	f000 fb5a 	bl	800dda0 <_calloc_r>
 800d6ec:	b160      	cbz	r0, 800d708 <_Balloc+0x64>
 800d6ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d6f2:	e00e      	b.n	800d712 <_Balloc+0x6e>
 800d6f4:	2221      	movs	r2, #33	; 0x21
 800d6f6:	2104      	movs	r1, #4
 800d6f8:	4620      	mov	r0, r4
 800d6fa:	f000 fb51 	bl	800dda0 <_calloc_r>
 800d6fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d700:	60f0      	str	r0, [r6, #12]
 800d702:	68db      	ldr	r3, [r3, #12]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d1e4      	bne.n	800d6d2 <_Balloc+0x2e>
 800d708:	2000      	movs	r0, #0
 800d70a:	bd70      	pop	{r4, r5, r6, pc}
 800d70c:	6802      	ldr	r2, [r0, #0]
 800d70e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d712:	2300      	movs	r3, #0
 800d714:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d718:	e7f7      	b.n	800d70a <_Balloc+0x66>
 800d71a:	bf00      	nop
 800d71c:	0800eefd 	.word	0x0800eefd
 800d720:	0800ef84 	.word	0x0800ef84

0800d724 <_Bfree>:
 800d724:	b570      	push	{r4, r5, r6, lr}
 800d726:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d728:	4605      	mov	r5, r0
 800d72a:	460c      	mov	r4, r1
 800d72c:	b976      	cbnz	r6, 800d74c <_Bfree+0x28>
 800d72e:	2010      	movs	r0, #16
 800d730:	f7ff ffa2 	bl	800d678 <malloc>
 800d734:	4602      	mov	r2, r0
 800d736:	6268      	str	r0, [r5, #36]	; 0x24
 800d738:	b920      	cbnz	r0, 800d744 <_Bfree+0x20>
 800d73a:	4b09      	ldr	r3, [pc, #36]	; (800d760 <_Bfree+0x3c>)
 800d73c:	4809      	ldr	r0, [pc, #36]	; (800d764 <_Bfree+0x40>)
 800d73e:	218a      	movs	r1, #138	; 0x8a
 800d740:	f000 fd54 	bl	800e1ec <__assert_func>
 800d744:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d748:	6006      	str	r6, [r0, #0]
 800d74a:	60c6      	str	r6, [r0, #12]
 800d74c:	b13c      	cbz	r4, 800d75e <_Bfree+0x3a>
 800d74e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d750:	6862      	ldr	r2, [r4, #4]
 800d752:	68db      	ldr	r3, [r3, #12]
 800d754:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d758:	6021      	str	r1, [r4, #0]
 800d75a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d75e:	bd70      	pop	{r4, r5, r6, pc}
 800d760:	0800eefd 	.word	0x0800eefd
 800d764:	0800ef84 	.word	0x0800ef84

0800d768 <__multadd>:
 800d768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d76c:	690e      	ldr	r6, [r1, #16]
 800d76e:	4607      	mov	r7, r0
 800d770:	4698      	mov	r8, r3
 800d772:	460c      	mov	r4, r1
 800d774:	f101 0014 	add.w	r0, r1, #20
 800d778:	2300      	movs	r3, #0
 800d77a:	6805      	ldr	r5, [r0, #0]
 800d77c:	b2a9      	uxth	r1, r5
 800d77e:	fb02 8101 	mla	r1, r2, r1, r8
 800d782:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800d786:	0c2d      	lsrs	r5, r5, #16
 800d788:	fb02 c505 	mla	r5, r2, r5, ip
 800d78c:	b289      	uxth	r1, r1
 800d78e:	3301      	adds	r3, #1
 800d790:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800d794:	429e      	cmp	r6, r3
 800d796:	f840 1b04 	str.w	r1, [r0], #4
 800d79a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800d79e:	dcec      	bgt.n	800d77a <__multadd+0x12>
 800d7a0:	f1b8 0f00 	cmp.w	r8, #0
 800d7a4:	d022      	beq.n	800d7ec <__multadd+0x84>
 800d7a6:	68a3      	ldr	r3, [r4, #8]
 800d7a8:	42b3      	cmp	r3, r6
 800d7aa:	dc19      	bgt.n	800d7e0 <__multadd+0x78>
 800d7ac:	6861      	ldr	r1, [r4, #4]
 800d7ae:	4638      	mov	r0, r7
 800d7b0:	3101      	adds	r1, #1
 800d7b2:	f7ff ff77 	bl	800d6a4 <_Balloc>
 800d7b6:	4605      	mov	r5, r0
 800d7b8:	b928      	cbnz	r0, 800d7c6 <__multadd+0x5e>
 800d7ba:	4602      	mov	r2, r0
 800d7bc:	4b0d      	ldr	r3, [pc, #52]	; (800d7f4 <__multadd+0x8c>)
 800d7be:	480e      	ldr	r0, [pc, #56]	; (800d7f8 <__multadd+0x90>)
 800d7c0:	21b5      	movs	r1, #181	; 0xb5
 800d7c2:	f000 fd13 	bl	800e1ec <__assert_func>
 800d7c6:	6922      	ldr	r2, [r4, #16]
 800d7c8:	3202      	adds	r2, #2
 800d7ca:	f104 010c 	add.w	r1, r4, #12
 800d7ce:	0092      	lsls	r2, r2, #2
 800d7d0:	300c      	adds	r0, #12
 800d7d2:	f7ff ff59 	bl	800d688 <memcpy>
 800d7d6:	4621      	mov	r1, r4
 800d7d8:	4638      	mov	r0, r7
 800d7da:	f7ff ffa3 	bl	800d724 <_Bfree>
 800d7de:	462c      	mov	r4, r5
 800d7e0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800d7e4:	3601      	adds	r6, #1
 800d7e6:	f8c3 8014 	str.w	r8, [r3, #20]
 800d7ea:	6126      	str	r6, [r4, #16]
 800d7ec:	4620      	mov	r0, r4
 800d7ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7f2:	bf00      	nop
 800d7f4:	0800ef73 	.word	0x0800ef73
 800d7f8:	0800ef84 	.word	0x0800ef84

0800d7fc <__hi0bits>:
 800d7fc:	0c03      	lsrs	r3, r0, #16
 800d7fe:	041b      	lsls	r3, r3, #16
 800d800:	b9d3      	cbnz	r3, 800d838 <__hi0bits+0x3c>
 800d802:	0400      	lsls	r0, r0, #16
 800d804:	2310      	movs	r3, #16
 800d806:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d80a:	bf04      	itt	eq
 800d80c:	0200      	lsleq	r0, r0, #8
 800d80e:	3308      	addeq	r3, #8
 800d810:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d814:	bf04      	itt	eq
 800d816:	0100      	lsleq	r0, r0, #4
 800d818:	3304      	addeq	r3, #4
 800d81a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d81e:	bf04      	itt	eq
 800d820:	0080      	lsleq	r0, r0, #2
 800d822:	3302      	addeq	r3, #2
 800d824:	2800      	cmp	r0, #0
 800d826:	db05      	blt.n	800d834 <__hi0bits+0x38>
 800d828:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d82c:	f103 0301 	add.w	r3, r3, #1
 800d830:	bf08      	it	eq
 800d832:	2320      	moveq	r3, #32
 800d834:	4618      	mov	r0, r3
 800d836:	4770      	bx	lr
 800d838:	2300      	movs	r3, #0
 800d83a:	e7e4      	b.n	800d806 <__hi0bits+0xa>

0800d83c <__lo0bits>:
 800d83c:	6803      	ldr	r3, [r0, #0]
 800d83e:	f013 0207 	ands.w	r2, r3, #7
 800d842:	4601      	mov	r1, r0
 800d844:	d00b      	beq.n	800d85e <__lo0bits+0x22>
 800d846:	07da      	lsls	r2, r3, #31
 800d848:	d424      	bmi.n	800d894 <__lo0bits+0x58>
 800d84a:	0798      	lsls	r0, r3, #30
 800d84c:	bf49      	itett	mi
 800d84e:	085b      	lsrmi	r3, r3, #1
 800d850:	089b      	lsrpl	r3, r3, #2
 800d852:	2001      	movmi	r0, #1
 800d854:	600b      	strmi	r3, [r1, #0]
 800d856:	bf5c      	itt	pl
 800d858:	600b      	strpl	r3, [r1, #0]
 800d85a:	2002      	movpl	r0, #2
 800d85c:	4770      	bx	lr
 800d85e:	b298      	uxth	r0, r3
 800d860:	b9b0      	cbnz	r0, 800d890 <__lo0bits+0x54>
 800d862:	0c1b      	lsrs	r3, r3, #16
 800d864:	2010      	movs	r0, #16
 800d866:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d86a:	bf04      	itt	eq
 800d86c:	0a1b      	lsreq	r3, r3, #8
 800d86e:	3008      	addeq	r0, #8
 800d870:	071a      	lsls	r2, r3, #28
 800d872:	bf04      	itt	eq
 800d874:	091b      	lsreq	r3, r3, #4
 800d876:	3004      	addeq	r0, #4
 800d878:	079a      	lsls	r2, r3, #30
 800d87a:	bf04      	itt	eq
 800d87c:	089b      	lsreq	r3, r3, #2
 800d87e:	3002      	addeq	r0, #2
 800d880:	07da      	lsls	r2, r3, #31
 800d882:	d403      	bmi.n	800d88c <__lo0bits+0x50>
 800d884:	085b      	lsrs	r3, r3, #1
 800d886:	f100 0001 	add.w	r0, r0, #1
 800d88a:	d005      	beq.n	800d898 <__lo0bits+0x5c>
 800d88c:	600b      	str	r3, [r1, #0]
 800d88e:	4770      	bx	lr
 800d890:	4610      	mov	r0, r2
 800d892:	e7e8      	b.n	800d866 <__lo0bits+0x2a>
 800d894:	2000      	movs	r0, #0
 800d896:	4770      	bx	lr
 800d898:	2020      	movs	r0, #32
 800d89a:	4770      	bx	lr

0800d89c <__i2b>:
 800d89c:	b510      	push	{r4, lr}
 800d89e:	460c      	mov	r4, r1
 800d8a0:	2101      	movs	r1, #1
 800d8a2:	f7ff feff 	bl	800d6a4 <_Balloc>
 800d8a6:	4602      	mov	r2, r0
 800d8a8:	b928      	cbnz	r0, 800d8b6 <__i2b+0x1a>
 800d8aa:	4b05      	ldr	r3, [pc, #20]	; (800d8c0 <__i2b+0x24>)
 800d8ac:	4805      	ldr	r0, [pc, #20]	; (800d8c4 <__i2b+0x28>)
 800d8ae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d8b2:	f000 fc9b 	bl	800e1ec <__assert_func>
 800d8b6:	2301      	movs	r3, #1
 800d8b8:	6144      	str	r4, [r0, #20]
 800d8ba:	6103      	str	r3, [r0, #16]
 800d8bc:	bd10      	pop	{r4, pc}
 800d8be:	bf00      	nop
 800d8c0:	0800ef73 	.word	0x0800ef73
 800d8c4:	0800ef84 	.word	0x0800ef84

0800d8c8 <__multiply>:
 800d8c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8cc:	4614      	mov	r4, r2
 800d8ce:	690a      	ldr	r2, [r1, #16]
 800d8d0:	6923      	ldr	r3, [r4, #16]
 800d8d2:	429a      	cmp	r2, r3
 800d8d4:	bfb8      	it	lt
 800d8d6:	460b      	movlt	r3, r1
 800d8d8:	460d      	mov	r5, r1
 800d8da:	bfbc      	itt	lt
 800d8dc:	4625      	movlt	r5, r4
 800d8de:	461c      	movlt	r4, r3
 800d8e0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800d8e4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d8e8:	68ab      	ldr	r3, [r5, #8]
 800d8ea:	6869      	ldr	r1, [r5, #4]
 800d8ec:	eb0a 0709 	add.w	r7, sl, r9
 800d8f0:	42bb      	cmp	r3, r7
 800d8f2:	b085      	sub	sp, #20
 800d8f4:	bfb8      	it	lt
 800d8f6:	3101      	addlt	r1, #1
 800d8f8:	f7ff fed4 	bl	800d6a4 <_Balloc>
 800d8fc:	b930      	cbnz	r0, 800d90c <__multiply+0x44>
 800d8fe:	4602      	mov	r2, r0
 800d900:	4b42      	ldr	r3, [pc, #264]	; (800da0c <__multiply+0x144>)
 800d902:	4843      	ldr	r0, [pc, #268]	; (800da10 <__multiply+0x148>)
 800d904:	f240 115d 	movw	r1, #349	; 0x15d
 800d908:	f000 fc70 	bl	800e1ec <__assert_func>
 800d90c:	f100 0614 	add.w	r6, r0, #20
 800d910:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800d914:	4633      	mov	r3, r6
 800d916:	2200      	movs	r2, #0
 800d918:	4543      	cmp	r3, r8
 800d91a:	d31e      	bcc.n	800d95a <__multiply+0x92>
 800d91c:	f105 0c14 	add.w	ip, r5, #20
 800d920:	f104 0314 	add.w	r3, r4, #20
 800d924:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800d928:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800d92c:	9202      	str	r2, [sp, #8]
 800d92e:	ebac 0205 	sub.w	r2, ip, r5
 800d932:	3a15      	subs	r2, #21
 800d934:	f022 0203 	bic.w	r2, r2, #3
 800d938:	3204      	adds	r2, #4
 800d93a:	f105 0115 	add.w	r1, r5, #21
 800d93e:	458c      	cmp	ip, r1
 800d940:	bf38      	it	cc
 800d942:	2204      	movcc	r2, #4
 800d944:	9201      	str	r2, [sp, #4]
 800d946:	9a02      	ldr	r2, [sp, #8]
 800d948:	9303      	str	r3, [sp, #12]
 800d94a:	429a      	cmp	r2, r3
 800d94c:	d808      	bhi.n	800d960 <__multiply+0x98>
 800d94e:	2f00      	cmp	r7, #0
 800d950:	dc55      	bgt.n	800d9fe <__multiply+0x136>
 800d952:	6107      	str	r7, [r0, #16]
 800d954:	b005      	add	sp, #20
 800d956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d95a:	f843 2b04 	str.w	r2, [r3], #4
 800d95e:	e7db      	b.n	800d918 <__multiply+0x50>
 800d960:	f8b3 a000 	ldrh.w	sl, [r3]
 800d964:	f1ba 0f00 	cmp.w	sl, #0
 800d968:	d020      	beq.n	800d9ac <__multiply+0xe4>
 800d96a:	f105 0e14 	add.w	lr, r5, #20
 800d96e:	46b1      	mov	r9, r6
 800d970:	2200      	movs	r2, #0
 800d972:	f85e 4b04 	ldr.w	r4, [lr], #4
 800d976:	f8d9 b000 	ldr.w	fp, [r9]
 800d97a:	b2a1      	uxth	r1, r4
 800d97c:	fa1f fb8b 	uxth.w	fp, fp
 800d980:	fb0a b101 	mla	r1, sl, r1, fp
 800d984:	4411      	add	r1, r2
 800d986:	f8d9 2000 	ldr.w	r2, [r9]
 800d98a:	0c24      	lsrs	r4, r4, #16
 800d98c:	0c12      	lsrs	r2, r2, #16
 800d98e:	fb0a 2404 	mla	r4, sl, r4, r2
 800d992:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800d996:	b289      	uxth	r1, r1
 800d998:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d99c:	45f4      	cmp	ip, lr
 800d99e:	f849 1b04 	str.w	r1, [r9], #4
 800d9a2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800d9a6:	d8e4      	bhi.n	800d972 <__multiply+0xaa>
 800d9a8:	9901      	ldr	r1, [sp, #4]
 800d9aa:	5072      	str	r2, [r6, r1]
 800d9ac:	9a03      	ldr	r2, [sp, #12]
 800d9ae:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d9b2:	3304      	adds	r3, #4
 800d9b4:	f1b9 0f00 	cmp.w	r9, #0
 800d9b8:	d01f      	beq.n	800d9fa <__multiply+0x132>
 800d9ba:	6834      	ldr	r4, [r6, #0]
 800d9bc:	f105 0114 	add.w	r1, r5, #20
 800d9c0:	46b6      	mov	lr, r6
 800d9c2:	f04f 0a00 	mov.w	sl, #0
 800d9c6:	880a      	ldrh	r2, [r1, #0]
 800d9c8:	f8be b002 	ldrh.w	fp, [lr, #2]
 800d9cc:	fb09 b202 	mla	r2, r9, r2, fp
 800d9d0:	4492      	add	sl, r2
 800d9d2:	b2a4      	uxth	r4, r4
 800d9d4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800d9d8:	f84e 4b04 	str.w	r4, [lr], #4
 800d9dc:	f851 4b04 	ldr.w	r4, [r1], #4
 800d9e0:	f8be 2000 	ldrh.w	r2, [lr]
 800d9e4:	0c24      	lsrs	r4, r4, #16
 800d9e6:	fb09 2404 	mla	r4, r9, r4, r2
 800d9ea:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800d9ee:	458c      	cmp	ip, r1
 800d9f0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d9f4:	d8e7      	bhi.n	800d9c6 <__multiply+0xfe>
 800d9f6:	9a01      	ldr	r2, [sp, #4]
 800d9f8:	50b4      	str	r4, [r6, r2]
 800d9fa:	3604      	adds	r6, #4
 800d9fc:	e7a3      	b.n	800d946 <__multiply+0x7e>
 800d9fe:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800da02:	2b00      	cmp	r3, #0
 800da04:	d1a5      	bne.n	800d952 <__multiply+0x8a>
 800da06:	3f01      	subs	r7, #1
 800da08:	e7a1      	b.n	800d94e <__multiply+0x86>
 800da0a:	bf00      	nop
 800da0c:	0800ef73 	.word	0x0800ef73
 800da10:	0800ef84 	.word	0x0800ef84

0800da14 <__pow5mult>:
 800da14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da18:	4615      	mov	r5, r2
 800da1a:	f012 0203 	ands.w	r2, r2, #3
 800da1e:	4606      	mov	r6, r0
 800da20:	460f      	mov	r7, r1
 800da22:	d007      	beq.n	800da34 <__pow5mult+0x20>
 800da24:	4c25      	ldr	r4, [pc, #148]	; (800dabc <__pow5mult+0xa8>)
 800da26:	3a01      	subs	r2, #1
 800da28:	2300      	movs	r3, #0
 800da2a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800da2e:	f7ff fe9b 	bl	800d768 <__multadd>
 800da32:	4607      	mov	r7, r0
 800da34:	10ad      	asrs	r5, r5, #2
 800da36:	d03d      	beq.n	800dab4 <__pow5mult+0xa0>
 800da38:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800da3a:	b97c      	cbnz	r4, 800da5c <__pow5mult+0x48>
 800da3c:	2010      	movs	r0, #16
 800da3e:	f7ff fe1b 	bl	800d678 <malloc>
 800da42:	4602      	mov	r2, r0
 800da44:	6270      	str	r0, [r6, #36]	; 0x24
 800da46:	b928      	cbnz	r0, 800da54 <__pow5mult+0x40>
 800da48:	4b1d      	ldr	r3, [pc, #116]	; (800dac0 <__pow5mult+0xac>)
 800da4a:	481e      	ldr	r0, [pc, #120]	; (800dac4 <__pow5mult+0xb0>)
 800da4c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800da50:	f000 fbcc 	bl	800e1ec <__assert_func>
 800da54:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800da58:	6004      	str	r4, [r0, #0]
 800da5a:	60c4      	str	r4, [r0, #12]
 800da5c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800da60:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800da64:	b94c      	cbnz	r4, 800da7a <__pow5mult+0x66>
 800da66:	f240 2171 	movw	r1, #625	; 0x271
 800da6a:	4630      	mov	r0, r6
 800da6c:	f7ff ff16 	bl	800d89c <__i2b>
 800da70:	2300      	movs	r3, #0
 800da72:	f8c8 0008 	str.w	r0, [r8, #8]
 800da76:	4604      	mov	r4, r0
 800da78:	6003      	str	r3, [r0, #0]
 800da7a:	f04f 0900 	mov.w	r9, #0
 800da7e:	07eb      	lsls	r3, r5, #31
 800da80:	d50a      	bpl.n	800da98 <__pow5mult+0x84>
 800da82:	4639      	mov	r1, r7
 800da84:	4622      	mov	r2, r4
 800da86:	4630      	mov	r0, r6
 800da88:	f7ff ff1e 	bl	800d8c8 <__multiply>
 800da8c:	4639      	mov	r1, r7
 800da8e:	4680      	mov	r8, r0
 800da90:	4630      	mov	r0, r6
 800da92:	f7ff fe47 	bl	800d724 <_Bfree>
 800da96:	4647      	mov	r7, r8
 800da98:	106d      	asrs	r5, r5, #1
 800da9a:	d00b      	beq.n	800dab4 <__pow5mult+0xa0>
 800da9c:	6820      	ldr	r0, [r4, #0]
 800da9e:	b938      	cbnz	r0, 800dab0 <__pow5mult+0x9c>
 800daa0:	4622      	mov	r2, r4
 800daa2:	4621      	mov	r1, r4
 800daa4:	4630      	mov	r0, r6
 800daa6:	f7ff ff0f 	bl	800d8c8 <__multiply>
 800daaa:	6020      	str	r0, [r4, #0]
 800daac:	f8c0 9000 	str.w	r9, [r0]
 800dab0:	4604      	mov	r4, r0
 800dab2:	e7e4      	b.n	800da7e <__pow5mult+0x6a>
 800dab4:	4638      	mov	r0, r7
 800dab6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800daba:	bf00      	nop
 800dabc:	0800f0d8 	.word	0x0800f0d8
 800dac0:	0800eefd 	.word	0x0800eefd
 800dac4:	0800ef84 	.word	0x0800ef84

0800dac8 <__lshift>:
 800dac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dacc:	460c      	mov	r4, r1
 800dace:	6849      	ldr	r1, [r1, #4]
 800dad0:	6923      	ldr	r3, [r4, #16]
 800dad2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dad6:	68a3      	ldr	r3, [r4, #8]
 800dad8:	4607      	mov	r7, r0
 800dada:	4691      	mov	r9, r2
 800dadc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dae0:	f108 0601 	add.w	r6, r8, #1
 800dae4:	42b3      	cmp	r3, r6
 800dae6:	db0b      	blt.n	800db00 <__lshift+0x38>
 800dae8:	4638      	mov	r0, r7
 800daea:	f7ff fddb 	bl	800d6a4 <_Balloc>
 800daee:	4605      	mov	r5, r0
 800daf0:	b948      	cbnz	r0, 800db06 <__lshift+0x3e>
 800daf2:	4602      	mov	r2, r0
 800daf4:	4b28      	ldr	r3, [pc, #160]	; (800db98 <__lshift+0xd0>)
 800daf6:	4829      	ldr	r0, [pc, #164]	; (800db9c <__lshift+0xd4>)
 800daf8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800dafc:	f000 fb76 	bl	800e1ec <__assert_func>
 800db00:	3101      	adds	r1, #1
 800db02:	005b      	lsls	r3, r3, #1
 800db04:	e7ee      	b.n	800dae4 <__lshift+0x1c>
 800db06:	2300      	movs	r3, #0
 800db08:	f100 0114 	add.w	r1, r0, #20
 800db0c:	f100 0210 	add.w	r2, r0, #16
 800db10:	4618      	mov	r0, r3
 800db12:	4553      	cmp	r3, sl
 800db14:	db33      	blt.n	800db7e <__lshift+0xb6>
 800db16:	6920      	ldr	r0, [r4, #16]
 800db18:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800db1c:	f104 0314 	add.w	r3, r4, #20
 800db20:	f019 091f 	ands.w	r9, r9, #31
 800db24:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800db28:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800db2c:	d02b      	beq.n	800db86 <__lshift+0xbe>
 800db2e:	f1c9 0e20 	rsb	lr, r9, #32
 800db32:	468a      	mov	sl, r1
 800db34:	2200      	movs	r2, #0
 800db36:	6818      	ldr	r0, [r3, #0]
 800db38:	fa00 f009 	lsl.w	r0, r0, r9
 800db3c:	4302      	orrs	r2, r0
 800db3e:	f84a 2b04 	str.w	r2, [sl], #4
 800db42:	f853 2b04 	ldr.w	r2, [r3], #4
 800db46:	459c      	cmp	ip, r3
 800db48:	fa22 f20e 	lsr.w	r2, r2, lr
 800db4c:	d8f3      	bhi.n	800db36 <__lshift+0x6e>
 800db4e:	ebac 0304 	sub.w	r3, ip, r4
 800db52:	3b15      	subs	r3, #21
 800db54:	f023 0303 	bic.w	r3, r3, #3
 800db58:	3304      	adds	r3, #4
 800db5a:	f104 0015 	add.w	r0, r4, #21
 800db5e:	4584      	cmp	ip, r0
 800db60:	bf38      	it	cc
 800db62:	2304      	movcc	r3, #4
 800db64:	50ca      	str	r2, [r1, r3]
 800db66:	b10a      	cbz	r2, 800db6c <__lshift+0xa4>
 800db68:	f108 0602 	add.w	r6, r8, #2
 800db6c:	3e01      	subs	r6, #1
 800db6e:	4638      	mov	r0, r7
 800db70:	612e      	str	r6, [r5, #16]
 800db72:	4621      	mov	r1, r4
 800db74:	f7ff fdd6 	bl	800d724 <_Bfree>
 800db78:	4628      	mov	r0, r5
 800db7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db7e:	f842 0f04 	str.w	r0, [r2, #4]!
 800db82:	3301      	adds	r3, #1
 800db84:	e7c5      	b.n	800db12 <__lshift+0x4a>
 800db86:	3904      	subs	r1, #4
 800db88:	f853 2b04 	ldr.w	r2, [r3], #4
 800db8c:	f841 2f04 	str.w	r2, [r1, #4]!
 800db90:	459c      	cmp	ip, r3
 800db92:	d8f9      	bhi.n	800db88 <__lshift+0xc0>
 800db94:	e7ea      	b.n	800db6c <__lshift+0xa4>
 800db96:	bf00      	nop
 800db98:	0800ef73 	.word	0x0800ef73
 800db9c:	0800ef84 	.word	0x0800ef84

0800dba0 <__mcmp>:
 800dba0:	b530      	push	{r4, r5, lr}
 800dba2:	6902      	ldr	r2, [r0, #16]
 800dba4:	690c      	ldr	r4, [r1, #16]
 800dba6:	1b12      	subs	r2, r2, r4
 800dba8:	d10e      	bne.n	800dbc8 <__mcmp+0x28>
 800dbaa:	f100 0314 	add.w	r3, r0, #20
 800dbae:	3114      	adds	r1, #20
 800dbb0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800dbb4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800dbb8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800dbbc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800dbc0:	42a5      	cmp	r5, r4
 800dbc2:	d003      	beq.n	800dbcc <__mcmp+0x2c>
 800dbc4:	d305      	bcc.n	800dbd2 <__mcmp+0x32>
 800dbc6:	2201      	movs	r2, #1
 800dbc8:	4610      	mov	r0, r2
 800dbca:	bd30      	pop	{r4, r5, pc}
 800dbcc:	4283      	cmp	r3, r0
 800dbce:	d3f3      	bcc.n	800dbb8 <__mcmp+0x18>
 800dbd0:	e7fa      	b.n	800dbc8 <__mcmp+0x28>
 800dbd2:	f04f 32ff 	mov.w	r2, #4294967295
 800dbd6:	e7f7      	b.n	800dbc8 <__mcmp+0x28>

0800dbd8 <__mdiff>:
 800dbd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbdc:	460c      	mov	r4, r1
 800dbde:	4606      	mov	r6, r0
 800dbe0:	4611      	mov	r1, r2
 800dbe2:	4620      	mov	r0, r4
 800dbe4:	4617      	mov	r7, r2
 800dbe6:	f7ff ffdb 	bl	800dba0 <__mcmp>
 800dbea:	1e05      	subs	r5, r0, #0
 800dbec:	d110      	bne.n	800dc10 <__mdiff+0x38>
 800dbee:	4629      	mov	r1, r5
 800dbf0:	4630      	mov	r0, r6
 800dbf2:	f7ff fd57 	bl	800d6a4 <_Balloc>
 800dbf6:	b930      	cbnz	r0, 800dc06 <__mdiff+0x2e>
 800dbf8:	4b39      	ldr	r3, [pc, #228]	; (800dce0 <__mdiff+0x108>)
 800dbfa:	4602      	mov	r2, r0
 800dbfc:	f240 2132 	movw	r1, #562	; 0x232
 800dc00:	4838      	ldr	r0, [pc, #224]	; (800dce4 <__mdiff+0x10c>)
 800dc02:	f000 faf3 	bl	800e1ec <__assert_func>
 800dc06:	2301      	movs	r3, #1
 800dc08:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dc0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc10:	bfa4      	itt	ge
 800dc12:	463b      	movge	r3, r7
 800dc14:	4627      	movge	r7, r4
 800dc16:	4630      	mov	r0, r6
 800dc18:	6879      	ldr	r1, [r7, #4]
 800dc1a:	bfa6      	itte	ge
 800dc1c:	461c      	movge	r4, r3
 800dc1e:	2500      	movge	r5, #0
 800dc20:	2501      	movlt	r5, #1
 800dc22:	f7ff fd3f 	bl	800d6a4 <_Balloc>
 800dc26:	b920      	cbnz	r0, 800dc32 <__mdiff+0x5a>
 800dc28:	4b2d      	ldr	r3, [pc, #180]	; (800dce0 <__mdiff+0x108>)
 800dc2a:	4602      	mov	r2, r0
 800dc2c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800dc30:	e7e6      	b.n	800dc00 <__mdiff+0x28>
 800dc32:	693e      	ldr	r6, [r7, #16]
 800dc34:	60c5      	str	r5, [r0, #12]
 800dc36:	6925      	ldr	r5, [r4, #16]
 800dc38:	f107 0114 	add.w	r1, r7, #20
 800dc3c:	f104 0914 	add.w	r9, r4, #20
 800dc40:	f100 0e14 	add.w	lr, r0, #20
 800dc44:	f107 0210 	add.w	r2, r7, #16
 800dc48:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800dc4c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800dc50:	46f2      	mov	sl, lr
 800dc52:	2700      	movs	r7, #0
 800dc54:	f859 3b04 	ldr.w	r3, [r9], #4
 800dc58:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800dc5c:	fa1f f883 	uxth.w	r8, r3
 800dc60:	fa17 f78b 	uxtah	r7, r7, fp
 800dc64:	0c1b      	lsrs	r3, r3, #16
 800dc66:	eba7 0808 	sub.w	r8, r7, r8
 800dc6a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800dc6e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800dc72:	fa1f f888 	uxth.w	r8, r8
 800dc76:	141f      	asrs	r7, r3, #16
 800dc78:	454d      	cmp	r5, r9
 800dc7a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800dc7e:	f84a 3b04 	str.w	r3, [sl], #4
 800dc82:	d8e7      	bhi.n	800dc54 <__mdiff+0x7c>
 800dc84:	1b2b      	subs	r3, r5, r4
 800dc86:	3b15      	subs	r3, #21
 800dc88:	f023 0303 	bic.w	r3, r3, #3
 800dc8c:	3304      	adds	r3, #4
 800dc8e:	3415      	adds	r4, #21
 800dc90:	42a5      	cmp	r5, r4
 800dc92:	bf38      	it	cc
 800dc94:	2304      	movcc	r3, #4
 800dc96:	4419      	add	r1, r3
 800dc98:	4473      	add	r3, lr
 800dc9a:	469e      	mov	lr, r3
 800dc9c:	460d      	mov	r5, r1
 800dc9e:	4565      	cmp	r5, ip
 800dca0:	d30e      	bcc.n	800dcc0 <__mdiff+0xe8>
 800dca2:	f10c 0203 	add.w	r2, ip, #3
 800dca6:	1a52      	subs	r2, r2, r1
 800dca8:	f022 0203 	bic.w	r2, r2, #3
 800dcac:	3903      	subs	r1, #3
 800dcae:	458c      	cmp	ip, r1
 800dcb0:	bf38      	it	cc
 800dcb2:	2200      	movcc	r2, #0
 800dcb4:	441a      	add	r2, r3
 800dcb6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800dcba:	b17b      	cbz	r3, 800dcdc <__mdiff+0x104>
 800dcbc:	6106      	str	r6, [r0, #16]
 800dcbe:	e7a5      	b.n	800dc0c <__mdiff+0x34>
 800dcc0:	f855 8b04 	ldr.w	r8, [r5], #4
 800dcc4:	fa17 f488 	uxtah	r4, r7, r8
 800dcc8:	1422      	asrs	r2, r4, #16
 800dcca:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800dcce:	b2a4      	uxth	r4, r4
 800dcd0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800dcd4:	f84e 4b04 	str.w	r4, [lr], #4
 800dcd8:	1417      	asrs	r7, r2, #16
 800dcda:	e7e0      	b.n	800dc9e <__mdiff+0xc6>
 800dcdc:	3e01      	subs	r6, #1
 800dcde:	e7ea      	b.n	800dcb6 <__mdiff+0xde>
 800dce0:	0800ef73 	.word	0x0800ef73
 800dce4:	0800ef84 	.word	0x0800ef84

0800dce8 <__d2b>:
 800dce8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dcec:	4689      	mov	r9, r1
 800dcee:	2101      	movs	r1, #1
 800dcf0:	ec57 6b10 	vmov	r6, r7, d0
 800dcf4:	4690      	mov	r8, r2
 800dcf6:	f7ff fcd5 	bl	800d6a4 <_Balloc>
 800dcfa:	4604      	mov	r4, r0
 800dcfc:	b930      	cbnz	r0, 800dd0c <__d2b+0x24>
 800dcfe:	4602      	mov	r2, r0
 800dd00:	4b25      	ldr	r3, [pc, #148]	; (800dd98 <__d2b+0xb0>)
 800dd02:	4826      	ldr	r0, [pc, #152]	; (800dd9c <__d2b+0xb4>)
 800dd04:	f240 310a 	movw	r1, #778	; 0x30a
 800dd08:	f000 fa70 	bl	800e1ec <__assert_func>
 800dd0c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800dd10:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dd14:	bb35      	cbnz	r5, 800dd64 <__d2b+0x7c>
 800dd16:	2e00      	cmp	r6, #0
 800dd18:	9301      	str	r3, [sp, #4]
 800dd1a:	d028      	beq.n	800dd6e <__d2b+0x86>
 800dd1c:	4668      	mov	r0, sp
 800dd1e:	9600      	str	r6, [sp, #0]
 800dd20:	f7ff fd8c 	bl	800d83c <__lo0bits>
 800dd24:	9900      	ldr	r1, [sp, #0]
 800dd26:	b300      	cbz	r0, 800dd6a <__d2b+0x82>
 800dd28:	9a01      	ldr	r2, [sp, #4]
 800dd2a:	f1c0 0320 	rsb	r3, r0, #32
 800dd2e:	fa02 f303 	lsl.w	r3, r2, r3
 800dd32:	430b      	orrs	r3, r1
 800dd34:	40c2      	lsrs	r2, r0
 800dd36:	6163      	str	r3, [r4, #20]
 800dd38:	9201      	str	r2, [sp, #4]
 800dd3a:	9b01      	ldr	r3, [sp, #4]
 800dd3c:	61a3      	str	r3, [r4, #24]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	bf14      	ite	ne
 800dd42:	2202      	movne	r2, #2
 800dd44:	2201      	moveq	r2, #1
 800dd46:	6122      	str	r2, [r4, #16]
 800dd48:	b1d5      	cbz	r5, 800dd80 <__d2b+0x98>
 800dd4a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800dd4e:	4405      	add	r5, r0
 800dd50:	f8c9 5000 	str.w	r5, [r9]
 800dd54:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800dd58:	f8c8 0000 	str.w	r0, [r8]
 800dd5c:	4620      	mov	r0, r4
 800dd5e:	b003      	add	sp, #12
 800dd60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dd68:	e7d5      	b.n	800dd16 <__d2b+0x2e>
 800dd6a:	6161      	str	r1, [r4, #20]
 800dd6c:	e7e5      	b.n	800dd3a <__d2b+0x52>
 800dd6e:	a801      	add	r0, sp, #4
 800dd70:	f7ff fd64 	bl	800d83c <__lo0bits>
 800dd74:	9b01      	ldr	r3, [sp, #4]
 800dd76:	6163      	str	r3, [r4, #20]
 800dd78:	2201      	movs	r2, #1
 800dd7a:	6122      	str	r2, [r4, #16]
 800dd7c:	3020      	adds	r0, #32
 800dd7e:	e7e3      	b.n	800dd48 <__d2b+0x60>
 800dd80:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dd84:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800dd88:	f8c9 0000 	str.w	r0, [r9]
 800dd8c:	6918      	ldr	r0, [r3, #16]
 800dd8e:	f7ff fd35 	bl	800d7fc <__hi0bits>
 800dd92:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dd96:	e7df      	b.n	800dd58 <__d2b+0x70>
 800dd98:	0800ef73 	.word	0x0800ef73
 800dd9c:	0800ef84 	.word	0x0800ef84

0800dda0 <_calloc_r>:
 800dda0:	b513      	push	{r0, r1, r4, lr}
 800dda2:	434a      	muls	r2, r1
 800dda4:	4611      	mov	r1, r2
 800dda6:	9201      	str	r2, [sp, #4]
 800dda8:	f000 f85a 	bl	800de60 <_malloc_r>
 800ddac:	4604      	mov	r4, r0
 800ddae:	b118      	cbz	r0, 800ddb8 <_calloc_r+0x18>
 800ddb0:	9a01      	ldr	r2, [sp, #4]
 800ddb2:	2100      	movs	r1, #0
 800ddb4:	f7fe f950 	bl	800c058 <memset>
 800ddb8:	4620      	mov	r0, r4
 800ddba:	b002      	add	sp, #8
 800ddbc:	bd10      	pop	{r4, pc}
	...

0800ddc0 <_free_r>:
 800ddc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ddc2:	2900      	cmp	r1, #0
 800ddc4:	d048      	beq.n	800de58 <_free_r+0x98>
 800ddc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ddca:	9001      	str	r0, [sp, #4]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	f1a1 0404 	sub.w	r4, r1, #4
 800ddd2:	bfb8      	it	lt
 800ddd4:	18e4      	addlt	r4, r4, r3
 800ddd6:	f000 fa65 	bl	800e2a4 <__malloc_lock>
 800ddda:	4a20      	ldr	r2, [pc, #128]	; (800de5c <_free_r+0x9c>)
 800dddc:	9801      	ldr	r0, [sp, #4]
 800ddde:	6813      	ldr	r3, [r2, #0]
 800dde0:	4615      	mov	r5, r2
 800dde2:	b933      	cbnz	r3, 800ddf2 <_free_r+0x32>
 800dde4:	6063      	str	r3, [r4, #4]
 800dde6:	6014      	str	r4, [r2, #0]
 800dde8:	b003      	add	sp, #12
 800ddea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ddee:	f000 ba5f 	b.w	800e2b0 <__malloc_unlock>
 800ddf2:	42a3      	cmp	r3, r4
 800ddf4:	d90b      	bls.n	800de0e <_free_r+0x4e>
 800ddf6:	6821      	ldr	r1, [r4, #0]
 800ddf8:	1862      	adds	r2, r4, r1
 800ddfa:	4293      	cmp	r3, r2
 800ddfc:	bf04      	itt	eq
 800ddfe:	681a      	ldreq	r2, [r3, #0]
 800de00:	685b      	ldreq	r3, [r3, #4]
 800de02:	6063      	str	r3, [r4, #4]
 800de04:	bf04      	itt	eq
 800de06:	1852      	addeq	r2, r2, r1
 800de08:	6022      	streq	r2, [r4, #0]
 800de0a:	602c      	str	r4, [r5, #0]
 800de0c:	e7ec      	b.n	800dde8 <_free_r+0x28>
 800de0e:	461a      	mov	r2, r3
 800de10:	685b      	ldr	r3, [r3, #4]
 800de12:	b10b      	cbz	r3, 800de18 <_free_r+0x58>
 800de14:	42a3      	cmp	r3, r4
 800de16:	d9fa      	bls.n	800de0e <_free_r+0x4e>
 800de18:	6811      	ldr	r1, [r2, #0]
 800de1a:	1855      	adds	r5, r2, r1
 800de1c:	42a5      	cmp	r5, r4
 800de1e:	d10b      	bne.n	800de38 <_free_r+0x78>
 800de20:	6824      	ldr	r4, [r4, #0]
 800de22:	4421      	add	r1, r4
 800de24:	1854      	adds	r4, r2, r1
 800de26:	42a3      	cmp	r3, r4
 800de28:	6011      	str	r1, [r2, #0]
 800de2a:	d1dd      	bne.n	800dde8 <_free_r+0x28>
 800de2c:	681c      	ldr	r4, [r3, #0]
 800de2e:	685b      	ldr	r3, [r3, #4]
 800de30:	6053      	str	r3, [r2, #4]
 800de32:	4421      	add	r1, r4
 800de34:	6011      	str	r1, [r2, #0]
 800de36:	e7d7      	b.n	800dde8 <_free_r+0x28>
 800de38:	d902      	bls.n	800de40 <_free_r+0x80>
 800de3a:	230c      	movs	r3, #12
 800de3c:	6003      	str	r3, [r0, #0]
 800de3e:	e7d3      	b.n	800dde8 <_free_r+0x28>
 800de40:	6825      	ldr	r5, [r4, #0]
 800de42:	1961      	adds	r1, r4, r5
 800de44:	428b      	cmp	r3, r1
 800de46:	bf04      	itt	eq
 800de48:	6819      	ldreq	r1, [r3, #0]
 800de4a:	685b      	ldreq	r3, [r3, #4]
 800de4c:	6063      	str	r3, [r4, #4]
 800de4e:	bf04      	itt	eq
 800de50:	1949      	addeq	r1, r1, r5
 800de52:	6021      	streq	r1, [r4, #0]
 800de54:	6054      	str	r4, [r2, #4]
 800de56:	e7c7      	b.n	800dde8 <_free_r+0x28>
 800de58:	b003      	add	sp, #12
 800de5a:	bd30      	pop	{r4, r5, pc}
 800de5c:	2000024c 	.word	0x2000024c

0800de60 <_malloc_r>:
 800de60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de62:	1ccd      	adds	r5, r1, #3
 800de64:	f025 0503 	bic.w	r5, r5, #3
 800de68:	3508      	adds	r5, #8
 800de6a:	2d0c      	cmp	r5, #12
 800de6c:	bf38      	it	cc
 800de6e:	250c      	movcc	r5, #12
 800de70:	2d00      	cmp	r5, #0
 800de72:	4606      	mov	r6, r0
 800de74:	db01      	blt.n	800de7a <_malloc_r+0x1a>
 800de76:	42a9      	cmp	r1, r5
 800de78:	d903      	bls.n	800de82 <_malloc_r+0x22>
 800de7a:	230c      	movs	r3, #12
 800de7c:	6033      	str	r3, [r6, #0]
 800de7e:	2000      	movs	r0, #0
 800de80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de82:	f000 fa0f 	bl	800e2a4 <__malloc_lock>
 800de86:	4921      	ldr	r1, [pc, #132]	; (800df0c <_malloc_r+0xac>)
 800de88:	680a      	ldr	r2, [r1, #0]
 800de8a:	4614      	mov	r4, r2
 800de8c:	b99c      	cbnz	r4, 800deb6 <_malloc_r+0x56>
 800de8e:	4f20      	ldr	r7, [pc, #128]	; (800df10 <_malloc_r+0xb0>)
 800de90:	683b      	ldr	r3, [r7, #0]
 800de92:	b923      	cbnz	r3, 800de9e <_malloc_r+0x3e>
 800de94:	4621      	mov	r1, r4
 800de96:	4630      	mov	r0, r6
 800de98:	f000 f998 	bl	800e1cc <_sbrk_r>
 800de9c:	6038      	str	r0, [r7, #0]
 800de9e:	4629      	mov	r1, r5
 800dea0:	4630      	mov	r0, r6
 800dea2:	f000 f993 	bl	800e1cc <_sbrk_r>
 800dea6:	1c43      	adds	r3, r0, #1
 800dea8:	d123      	bne.n	800def2 <_malloc_r+0x92>
 800deaa:	230c      	movs	r3, #12
 800deac:	6033      	str	r3, [r6, #0]
 800deae:	4630      	mov	r0, r6
 800deb0:	f000 f9fe 	bl	800e2b0 <__malloc_unlock>
 800deb4:	e7e3      	b.n	800de7e <_malloc_r+0x1e>
 800deb6:	6823      	ldr	r3, [r4, #0]
 800deb8:	1b5b      	subs	r3, r3, r5
 800deba:	d417      	bmi.n	800deec <_malloc_r+0x8c>
 800debc:	2b0b      	cmp	r3, #11
 800debe:	d903      	bls.n	800dec8 <_malloc_r+0x68>
 800dec0:	6023      	str	r3, [r4, #0]
 800dec2:	441c      	add	r4, r3
 800dec4:	6025      	str	r5, [r4, #0]
 800dec6:	e004      	b.n	800ded2 <_malloc_r+0x72>
 800dec8:	6863      	ldr	r3, [r4, #4]
 800deca:	42a2      	cmp	r2, r4
 800decc:	bf0c      	ite	eq
 800dece:	600b      	streq	r3, [r1, #0]
 800ded0:	6053      	strne	r3, [r2, #4]
 800ded2:	4630      	mov	r0, r6
 800ded4:	f000 f9ec 	bl	800e2b0 <__malloc_unlock>
 800ded8:	f104 000b 	add.w	r0, r4, #11
 800dedc:	1d23      	adds	r3, r4, #4
 800dede:	f020 0007 	bic.w	r0, r0, #7
 800dee2:	1ac2      	subs	r2, r0, r3
 800dee4:	d0cc      	beq.n	800de80 <_malloc_r+0x20>
 800dee6:	1a1b      	subs	r3, r3, r0
 800dee8:	50a3      	str	r3, [r4, r2]
 800deea:	e7c9      	b.n	800de80 <_malloc_r+0x20>
 800deec:	4622      	mov	r2, r4
 800deee:	6864      	ldr	r4, [r4, #4]
 800def0:	e7cc      	b.n	800de8c <_malloc_r+0x2c>
 800def2:	1cc4      	adds	r4, r0, #3
 800def4:	f024 0403 	bic.w	r4, r4, #3
 800def8:	42a0      	cmp	r0, r4
 800defa:	d0e3      	beq.n	800dec4 <_malloc_r+0x64>
 800defc:	1a21      	subs	r1, r4, r0
 800defe:	4630      	mov	r0, r6
 800df00:	f000 f964 	bl	800e1cc <_sbrk_r>
 800df04:	3001      	adds	r0, #1
 800df06:	d1dd      	bne.n	800dec4 <_malloc_r+0x64>
 800df08:	e7cf      	b.n	800deaa <_malloc_r+0x4a>
 800df0a:	bf00      	nop
 800df0c:	2000024c 	.word	0x2000024c
 800df10:	20000250 	.word	0x20000250

0800df14 <__ssputs_r>:
 800df14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df18:	688e      	ldr	r6, [r1, #8]
 800df1a:	429e      	cmp	r6, r3
 800df1c:	4682      	mov	sl, r0
 800df1e:	460c      	mov	r4, r1
 800df20:	4690      	mov	r8, r2
 800df22:	461f      	mov	r7, r3
 800df24:	d838      	bhi.n	800df98 <__ssputs_r+0x84>
 800df26:	898a      	ldrh	r2, [r1, #12]
 800df28:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800df2c:	d032      	beq.n	800df94 <__ssputs_r+0x80>
 800df2e:	6825      	ldr	r5, [r4, #0]
 800df30:	6909      	ldr	r1, [r1, #16]
 800df32:	eba5 0901 	sub.w	r9, r5, r1
 800df36:	6965      	ldr	r5, [r4, #20]
 800df38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800df3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800df40:	3301      	adds	r3, #1
 800df42:	444b      	add	r3, r9
 800df44:	106d      	asrs	r5, r5, #1
 800df46:	429d      	cmp	r5, r3
 800df48:	bf38      	it	cc
 800df4a:	461d      	movcc	r5, r3
 800df4c:	0553      	lsls	r3, r2, #21
 800df4e:	d531      	bpl.n	800dfb4 <__ssputs_r+0xa0>
 800df50:	4629      	mov	r1, r5
 800df52:	f7ff ff85 	bl	800de60 <_malloc_r>
 800df56:	4606      	mov	r6, r0
 800df58:	b950      	cbnz	r0, 800df70 <__ssputs_r+0x5c>
 800df5a:	230c      	movs	r3, #12
 800df5c:	f8ca 3000 	str.w	r3, [sl]
 800df60:	89a3      	ldrh	r3, [r4, #12]
 800df62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df66:	81a3      	strh	r3, [r4, #12]
 800df68:	f04f 30ff 	mov.w	r0, #4294967295
 800df6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df70:	6921      	ldr	r1, [r4, #16]
 800df72:	464a      	mov	r2, r9
 800df74:	f7ff fb88 	bl	800d688 <memcpy>
 800df78:	89a3      	ldrh	r3, [r4, #12]
 800df7a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800df7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df82:	81a3      	strh	r3, [r4, #12]
 800df84:	6126      	str	r6, [r4, #16]
 800df86:	6165      	str	r5, [r4, #20]
 800df88:	444e      	add	r6, r9
 800df8a:	eba5 0509 	sub.w	r5, r5, r9
 800df8e:	6026      	str	r6, [r4, #0]
 800df90:	60a5      	str	r5, [r4, #8]
 800df92:	463e      	mov	r6, r7
 800df94:	42be      	cmp	r6, r7
 800df96:	d900      	bls.n	800df9a <__ssputs_r+0x86>
 800df98:	463e      	mov	r6, r7
 800df9a:	4632      	mov	r2, r6
 800df9c:	6820      	ldr	r0, [r4, #0]
 800df9e:	4641      	mov	r1, r8
 800dfa0:	f000 f966 	bl	800e270 <memmove>
 800dfa4:	68a3      	ldr	r3, [r4, #8]
 800dfa6:	6822      	ldr	r2, [r4, #0]
 800dfa8:	1b9b      	subs	r3, r3, r6
 800dfaa:	4432      	add	r2, r6
 800dfac:	60a3      	str	r3, [r4, #8]
 800dfae:	6022      	str	r2, [r4, #0]
 800dfb0:	2000      	movs	r0, #0
 800dfb2:	e7db      	b.n	800df6c <__ssputs_r+0x58>
 800dfb4:	462a      	mov	r2, r5
 800dfb6:	f000 f981 	bl	800e2bc <_realloc_r>
 800dfba:	4606      	mov	r6, r0
 800dfbc:	2800      	cmp	r0, #0
 800dfbe:	d1e1      	bne.n	800df84 <__ssputs_r+0x70>
 800dfc0:	6921      	ldr	r1, [r4, #16]
 800dfc2:	4650      	mov	r0, sl
 800dfc4:	f7ff fefc 	bl	800ddc0 <_free_r>
 800dfc8:	e7c7      	b.n	800df5a <__ssputs_r+0x46>
	...

0800dfcc <_svfiprintf_r>:
 800dfcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfd0:	4698      	mov	r8, r3
 800dfd2:	898b      	ldrh	r3, [r1, #12]
 800dfd4:	061b      	lsls	r3, r3, #24
 800dfd6:	b09d      	sub	sp, #116	; 0x74
 800dfd8:	4607      	mov	r7, r0
 800dfda:	460d      	mov	r5, r1
 800dfdc:	4614      	mov	r4, r2
 800dfde:	d50e      	bpl.n	800dffe <_svfiprintf_r+0x32>
 800dfe0:	690b      	ldr	r3, [r1, #16]
 800dfe2:	b963      	cbnz	r3, 800dffe <_svfiprintf_r+0x32>
 800dfe4:	2140      	movs	r1, #64	; 0x40
 800dfe6:	f7ff ff3b 	bl	800de60 <_malloc_r>
 800dfea:	6028      	str	r0, [r5, #0]
 800dfec:	6128      	str	r0, [r5, #16]
 800dfee:	b920      	cbnz	r0, 800dffa <_svfiprintf_r+0x2e>
 800dff0:	230c      	movs	r3, #12
 800dff2:	603b      	str	r3, [r7, #0]
 800dff4:	f04f 30ff 	mov.w	r0, #4294967295
 800dff8:	e0d1      	b.n	800e19e <_svfiprintf_r+0x1d2>
 800dffa:	2340      	movs	r3, #64	; 0x40
 800dffc:	616b      	str	r3, [r5, #20]
 800dffe:	2300      	movs	r3, #0
 800e000:	9309      	str	r3, [sp, #36]	; 0x24
 800e002:	2320      	movs	r3, #32
 800e004:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e008:	f8cd 800c 	str.w	r8, [sp, #12]
 800e00c:	2330      	movs	r3, #48	; 0x30
 800e00e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e1b8 <_svfiprintf_r+0x1ec>
 800e012:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e016:	f04f 0901 	mov.w	r9, #1
 800e01a:	4623      	mov	r3, r4
 800e01c:	469a      	mov	sl, r3
 800e01e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e022:	b10a      	cbz	r2, 800e028 <_svfiprintf_r+0x5c>
 800e024:	2a25      	cmp	r2, #37	; 0x25
 800e026:	d1f9      	bne.n	800e01c <_svfiprintf_r+0x50>
 800e028:	ebba 0b04 	subs.w	fp, sl, r4
 800e02c:	d00b      	beq.n	800e046 <_svfiprintf_r+0x7a>
 800e02e:	465b      	mov	r3, fp
 800e030:	4622      	mov	r2, r4
 800e032:	4629      	mov	r1, r5
 800e034:	4638      	mov	r0, r7
 800e036:	f7ff ff6d 	bl	800df14 <__ssputs_r>
 800e03a:	3001      	adds	r0, #1
 800e03c:	f000 80aa 	beq.w	800e194 <_svfiprintf_r+0x1c8>
 800e040:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e042:	445a      	add	r2, fp
 800e044:	9209      	str	r2, [sp, #36]	; 0x24
 800e046:	f89a 3000 	ldrb.w	r3, [sl]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	f000 80a2 	beq.w	800e194 <_svfiprintf_r+0x1c8>
 800e050:	2300      	movs	r3, #0
 800e052:	f04f 32ff 	mov.w	r2, #4294967295
 800e056:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e05a:	f10a 0a01 	add.w	sl, sl, #1
 800e05e:	9304      	str	r3, [sp, #16]
 800e060:	9307      	str	r3, [sp, #28]
 800e062:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e066:	931a      	str	r3, [sp, #104]	; 0x68
 800e068:	4654      	mov	r4, sl
 800e06a:	2205      	movs	r2, #5
 800e06c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e070:	4851      	ldr	r0, [pc, #324]	; (800e1b8 <_svfiprintf_r+0x1ec>)
 800e072:	f7f2 f8dd 	bl	8000230 <memchr>
 800e076:	9a04      	ldr	r2, [sp, #16]
 800e078:	b9d8      	cbnz	r0, 800e0b2 <_svfiprintf_r+0xe6>
 800e07a:	06d0      	lsls	r0, r2, #27
 800e07c:	bf44      	itt	mi
 800e07e:	2320      	movmi	r3, #32
 800e080:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e084:	0711      	lsls	r1, r2, #28
 800e086:	bf44      	itt	mi
 800e088:	232b      	movmi	r3, #43	; 0x2b
 800e08a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e08e:	f89a 3000 	ldrb.w	r3, [sl]
 800e092:	2b2a      	cmp	r3, #42	; 0x2a
 800e094:	d015      	beq.n	800e0c2 <_svfiprintf_r+0xf6>
 800e096:	9a07      	ldr	r2, [sp, #28]
 800e098:	4654      	mov	r4, sl
 800e09a:	2000      	movs	r0, #0
 800e09c:	f04f 0c0a 	mov.w	ip, #10
 800e0a0:	4621      	mov	r1, r4
 800e0a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e0a6:	3b30      	subs	r3, #48	; 0x30
 800e0a8:	2b09      	cmp	r3, #9
 800e0aa:	d94e      	bls.n	800e14a <_svfiprintf_r+0x17e>
 800e0ac:	b1b0      	cbz	r0, 800e0dc <_svfiprintf_r+0x110>
 800e0ae:	9207      	str	r2, [sp, #28]
 800e0b0:	e014      	b.n	800e0dc <_svfiprintf_r+0x110>
 800e0b2:	eba0 0308 	sub.w	r3, r0, r8
 800e0b6:	fa09 f303 	lsl.w	r3, r9, r3
 800e0ba:	4313      	orrs	r3, r2
 800e0bc:	9304      	str	r3, [sp, #16]
 800e0be:	46a2      	mov	sl, r4
 800e0c0:	e7d2      	b.n	800e068 <_svfiprintf_r+0x9c>
 800e0c2:	9b03      	ldr	r3, [sp, #12]
 800e0c4:	1d19      	adds	r1, r3, #4
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	9103      	str	r1, [sp, #12]
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	bfbb      	ittet	lt
 800e0ce:	425b      	neglt	r3, r3
 800e0d0:	f042 0202 	orrlt.w	r2, r2, #2
 800e0d4:	9307      	strge	r3, [sp, #28]
 800e0d6:	9307      	strlt	r3, [sp, #28]
 800e0d8:	bfb8      	it	lt
 800e0da:	9204      	strlt	r2, [sp, #16]
 800e0dc:	7823      	ldrb	r3, [r4, #0]
 800e0de:	2b2e      	cmp	r3, #46	; 0x2e
 800e0e0:	d10c      	bne.n	800e0fc <_svfiprintf_r+0x130>
 800e0e2:	7863      	ldrb	r3, [r4, #1]
 800e0e4:	2b2a      	cmp	r3, #42	; 0x2a
 800e0e6:	d135      	bne.n	800e154 <_svfiprintf_r+0x188>
 800e0e8:	9b03      	ldr	r3, [sp, #12]
 800e0ea:	1d1a      	adds	r2, r3, #4
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	9203      	str	r2, [sp, #12]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	bfb8      	it	lt
 800e0f4:	f04f 33ff 	movlt.w	r3, #4294967295
 800e0f8:	3402      	adds	r4, #2
 800e0fa:	9305      	str	r3, [sp, #20]
 800e0fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e1c8 <_svfiprintf_r+0x1fc>
 800e100:	7821      	ldrb	r1, [r4, #0]
 800e102:	2203      	movs	r2, #3
 800e104:	4650      	mov	r0, sl
 800e106:	f7f2 f893 	bl	8000230 <memchr>
 800e10a:	b140      	cbz	r0, 800e11e <_svfiprintf_r+0x152>
 800e10c:	2340      	movs	r3, #64	; 0x40
 800e10e:	eba0 000a 	sub.w	r0, r0, sl
 800e112:	fa03 f000 	lsl.w	r0, r3, r0
 800e116:	9b04      	ldr	r3, [sp, #16]
 800e118:	4303      	orrs	r3, r0
 800e11a:	3401      	adds	r4, #1
 800e11c:	9304      	str	r3, [sp, #16]
 800e11e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e122:	4826      	ldr	r0, [pc, #152]	; (800e1bc <_svfiprintf_r+0x1f0>)
 800e124:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e128:	2206      	movs	r2, #6
 800e12a:	f7f2 f881 	bl	8000230 <memchr>
 800e12e:	2800      	cmp	r0, #0
 800e130:	d038      	beq.n	800e1a4 <_svfiprintf_r+0x1d8>
 800e132:	4b23      	ldr	r3, [pc, #140]	; (800e1c0 <_svfiprintf_r+0x1f4>)
 800e134:	bb1b      	cbnz	r3, 800e17e <_svfiprintf_r+0x1b2>
 800e136:	9b03      	ldr	r3, [sp, #12]
 800e138:	3307      	adds	r3, #7
 800e13a:	f023 0307 	bic.w	r3, r3, #7
 800e13e:	3308      	adds	r3, #8
 800e140:	9303      	str	r3, [sp, #12]
 800e142:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e144:	4433      	add	r3, r6
 800e146:	9309      	str	r3, [sp, #36]	; 0x24
 800e148:	e767      	b.n	800e01a <_svfiprintf_r+0x4e>
 800e14a:	fb0c 3202 	mla	r2, ip, r2, r3
 800e14e:	460c      	mov	r4, r1
 800e150:	2001      	movs	r0, #1
 800e152:	e7a5      	b.n	800e0a0 <_svfiprintf_r+0xd4>
 800e154:	2300      	movs	r3, #0
 800e156:	3401      	adds	r4, #1
 800e158:	9305      	str	r3, [sp, #20]
 800e15a:	4619      	mov	r1, r3
 800e15c:	f04f 0c0a 	mov.w	ip, #10
 800e160:	4620      	mov	r0, r4
 800e162:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e166:	3a30      	subs	r2, #48	; 0x30
 800e168:	2a09      	cmp	r2, #9
 800e16a:	d903      	bls.n	800e174 <_svfiprintf_r+0x1a8>
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d0c5      	beq.n	800e0fc <_svfiprintf_r+0x130>
 800e170:	9105      	str	r1, [sp, #20]
 800e172:	e7c3      	b.n	800e0fc <_svfiprintf_r+0x130>
 800e174:	fb0c 2101 	mla	r1, ip, r1, r2
 800e178:	4604      	mov	r4, r0
 800e17a:	2301      	movs	r3, #1
 800e17c:	e7f0      	b.n	800e160 <_svfiprintf_r+0x194>
 800e17e:	ab03      	add	r3, sp, #12
 800e180:	9300      	str	r3, [sp, #0]
 800e182:	462a      	mov	r2, r5
 800e184:	4b0f      	ldr	r3, [pc, #60]	; (800e1c4 <_svfiprintf_r+0x1f8>)
 800e186:	a904      	add	r1, sp, #16
 800e188:	4638      	mov	r0, r7
 800e18a:	f7fe f80d 	bl	800c1a8 <_printf_float>
 800e18e:	1c42      	adds	r2, r0, #1
 800e190:	4606      	mov	r6, r0
 800e192:	d1d6      	bne.n	800e142 <_svfiprintf_r+0x176>
 800e194:	89ab      	ldrh	r3, [r5, #12]
 800e196:	065b      	lsls	r3, r3, #25
 800e198:	f53f af2c 	bmi.w	800dff4 <_svfiprintf_r+0x28>
 800e19c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e19e:	b01d      	add	sp, #116	; 0x74
 800e1a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1a4:	ab03      	add	r3, sp, #12
 800e1a6:	9300      	str	r3, [sp, #0]
 800e1a8:	462a      	mov	r2, r5
 800e1aa:	4b06      	ldr	r3, [pc, #24]	; (800e1c4 <_svfiprintf_r+0x1f8>)
 800e1ac:	a904      	add	r1, sp, #16
 800e1ae:	4638      	mov	r0, r7
 800e1b0:	f7fe fa9e 	bl	800c6f0 <_printf_i>
 800e1b4:	e7eb      	b.n	800e18e <_svfiprintf_r+0x1c2>
 800e1b6:	bf00      	nop
 800e1b8:	0800f0e4 	.word	0x0800f0e4
 800e1bc:	0800f0ee 	.word	0x0800f0ee
 800e1c0:	0800c1a9 	.word	0x0800c1a9
 800e1c4:	0800df15 	.word	0x0800df15
 800e1c8:	0800f0ea 	.word	0x0800f0ea

0800e1cc <_sbrk_r>:
 800e1cc:	b538      	push	{r3, r4, r5, lr}
 800e1ce:	4d06      	ldr	r5, [pc, #24]	; (800e1e8 <_sbrk_r+0x1c>)
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	4604      	mov	r4, r0
 800e1d4:	4608      	mov	r0, r1
 800e1d6:	602b      	str	r3, [r5, #0]
 800e1d8:	f7f5 f9de 	bl	8003598 <_sbrk>
 800e1dc:	1c43      	adds	r3, r0, #1
 800e1de:	d102      	bne.n	800e1e6 <_sbrk_r+0x1a>
 800e1e0:	682b      	ldr	r3, [r5, #0]
 800e1e2:	b103      	cbz	r3, 800e1e6 <_sbrk_r+0x1a>
 800e1e4:	6023      	str	r3, [r4, #0]
 800e1e6:	bd38      	pop	{r3, r4, r5, pc}
 800e1e8:	20000d04 	.word	0x20000d04

0800e1ec <__assert_func>:
 800e1ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e1ee:	4614      	mov	r4, r2
 800e1f0:	461a      	mov	r2, r3
 800e1f2:	4b09      	ldr	r3, [pc, #36]	; (800e218 <__assert_func+0x2c>)
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	4605      	mov	r5, r0
 800e1f8:	68d8      	ldr	r0, [r3, #12]
 800e1fa:	b14c      	cbz	r4, 800e210 <__assert_func+0x24>
 800e1fc:	4b07      	ldr	r3, [pc, #28]	; (800e21c <__assert_func+0x30>)
 800e1fe:	9100      	str	r1, [sp, #0]
 800e200:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e204:	4906      	ldr	r1, [pc, #24]	; (800e220 <__assert_func+0x34>)
 800e206:	462b      	mov	r3, r5
 800e208:	f000 f80e 	bl	800e228 <fiprintf>
 800e20c:	f000 faa4 	bl	800e758 <abort>
 800e210:	4b04      	ldr	r3, [pc, #16]	; (800e224 <__assert_func+0x38>)
 800e212:	461c      	mov	r4, r3
 800e214:	e7f3      	b.n	800e1fe <__assert_func+0x12>
 800e216:	bf00      	nop
 800e218:	20000010 	.word	0x20000010
 800e21c:	0800f0f5 	.word	0x0800f0f5
 800e220:	0800f102 	.word	0x0800f102
 800e224:	0800f130 	.word	0x0800f130

0800e228 <fiprintf>:
 800e228:	b40e      	push	{r1, r2, r3}
 800e22a:	b503      	push	{r0, r1, lr}
 800e22c:	4601      	mov	r1, r0
 800e22e:	ab03      	add	r3, sp, #12
 800e230:	4805      	ldr	r0, [pc, #20]	; (800e248 <fiprintf+0x20>)
 800e232:	f853 2b04 	ldr.w	r2, [r3], #4
 800e236:	6800      	ldr	r0, [r0, #0]
 800e238:	9301      	str	r3, [sp, #4]
 800e23a:	f000 f88f 	bl	800e35c <_vfiprintf_r>
 800e23e:	b002      	add	sp, #8
 800e240:	f85d eb04 	ldr.w	lr, [sp], #4
 800e244:	b003      	add	sp, #12
 800e246:	4770      	bx	lr
 800e248:	20000010 	.word	0x20000010

0800e24c <__ascii_mbtowc>:
 800e24c:	b082      	sub	sp, #8
 800e24e:	b901      	cbnz	r1, 800e252 <__ascii_mbtowc+0x6>
 800e250:	a901      	add	r1, sp, #4
 800e252:	b142      	cbz	r2, 800e266 <__ascii_mbtowc+0x1a>
 800e254:	b14b      	cbz	r3, 800e26a <__ascii_mbtowc+0x1e>
 800e256:	7813      	ldrb	r3, [r2, #0]
 800e258:	600b      	str	r3, [r1, #0]
 800e25a:	7812      	ldrb	r2, [r2, #0]
 800e25c:	1e10      	subs	r0, r2, #0
 800e25e:	bf18      	it	ne
 800e260:	2001      	movne	r0, #1
 800e262:	b002      	add	sp, #8
 800e264:	4770      	bx	lr
 800e266:	4610      	mov	r0, r2
 800e268:	e7fb      	b.n	800e262 <__ascii_mbtowc+0x16>
 800e26a:	f06f 0001 	mvn.w	r0, #1
 800e26e:	e7f8      	b.n	800e262 <__ascii_mbtowc+0x16>

0800e270 <memmove>:
 800e270:	4288      	cmp	r0, r1
 800e272:	b510      	push	{r4, lr}
 800e274:	eb01 0402 	add.w	r4, r1, r2
 800e278:	d902      	bls.n	800e280 <memmove+0x10>
 800e27a:	4284      	cmp	r4, r0
 800e27c:	4623      	mov	r3, r4
 800e27e:	d807      	bhi.n	800e290 <memmove+0x20>
 800e280:	1e43      	subs	r3, r0, #1
 800e282:	42a1      	cmp	r1, r4
 800e284:	d008      	beq.n	800e298 <memmove+0x28>
 800e286:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e28a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e28e:	e7f8      	b.n	800e282 <memmove+0x12>
 800e290:	4402      	add	r2, r0
 800e292:	4601      	mov	r1, r0
 800e294:	428a      	cmp	r2, r1
 800e296:	d100      	bne.n	800e29a <memmove+0x2a>
 800e298:	bd10      	pop	{r4, pc}
 800e29a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e29e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e2a2:	e7f7      	b.n	800e294 <memmove+0x24>

0800e2a4 <__malloc_lock>:
 800e2a4:	4801      	ldr	r0, [pc, #4]	; (800e2ac <__malloc_lock+0x8>)
 800e2a6:	f000 bc17 	b.w	800ead8 <__retarget_lock_acquire_recursive>
 800e2aa:	bf00      	nop
 800e2ac:	20000d0c 	.word	0x20000d0c

0800e2b0 <__malloc_unlock>:
 800e2b0:	4801      	ldr	r0, [pc, #4]	; (800e2b8 <__malloc_unlock+0x8>)
 800e2b2:	f000 bc12 	b.w	800eada <__retarget_lock_release_recursive>
 800e2b6:	bf00      	nop
 800e2b8:	20000d0c 	.word	0x20000d0c

0800e2bc <_realloc_r>:
 800e2bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2be:	4607      	mov	r7, r0
 800e2c0:	4614      	mov	r4, r2
 800e2c2:	460e      	mov	r6, r1
 800e2c4:	b921      	cbnz	r1, 800e2d0 <_realloc_r+0x14>
 800e2c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e2ca:	4611      	mov	r1, r2
 800e2cc:	f7ff bdc8 	b.w	800de60 <_malloc_r>
 800e2d0:	b922      	cbnz	r2, 800e2dc <_realloc_r+0x20>
 800e2d2:	f7ff fd75 	bl	800ddc0 <_free_r>
 800e2d6:	4625      	mov	r5, r4
 800e2d8:	4628      	mov	r0, r5
 800e2da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2dc:	f000 fc62 	bl	800eba4 <_malloc_usable_size_r>
 800e2e0:	42a0      	cmp	r0, r4
 800e2e2:	d20f      	bcs.n	800e304 <_realloc_r+0x48>
 800e2e4:	4621      	mov	r1, r4
 800e2e6:	4638      	mov	r0, r7
 800e2e8:	f7ff fdba 	bl	800de60 <_malloc_r>
 800e2ec:	4605      	mov	r5, r0
 800e2ee:	2800      	cmp	r0, #0
 800e2f0:	d0f2      	beq.n	800e2d8 <_realloc_r+0x1c>
 800e2f2:	4631      	mov	r1, r6
 800e2f4:	4622      	mov	r2, r4
 800e2f6:	f7ff f9c7 	bl	800d688 <memcpy>
 800e2fa:	4631      	mov	r1, r6
 800e2fc:	4638      	mov	r0, r7
 800e2fe:	f7ff fd5f 	bl	800ddc0 <_free_r>
 800e302:	e7e9      	b.n	800e2d8 <_realloc_r+0x1c>
 800e304:	4635      	mov	r5, r6
 800e306:	e7e7      	b.n	800e2d8 <_realloc_r+0x1c>

0800e308 <__sfputc_r>:
 800e308:	6893      	ldr	r3, [r2, #8]
 800e30a:	3b01      	subs	r3, #1
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	b410      	push	{r4}
 800e310:	6093      	str	r3, [r2, #8]
 800e312:	da08      	bge.n	800e326 <__sfputc_r+0x1e>
 800e314:	6994      	ldr	r4, [r2, #24]
 800e316:	42a3      	cmp	r3, r4
 800e318:	db01      	blt.n	800e31e <__sfputc_r+0x16>
 800e31a:	290a      	cmp	r1, #10
 800e31c:	d103      	bne.n	800e326 <__sfputc_r+0x1e>
 800e31e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e322:	f000 b94b 	b.w	800e5bc <__swbuf_r>
 800e326:	6813      	ldr	r3, [r2, #0]
 800e328:	1c58      	adds	r0, r3, #1
 800e32a:	6010      	str	r0, [r2, #0]
 800e32c:	7019      	strb	r1, [r3, #0]
 800e32e:	4608      	mov	r0, r1
 800e330:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e334:	4770      	bx	lr

0800e336 <__sfputs_r>:
 800e336:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e338:	4606      	mov	r6, r0
 800e33a:	460f      	mov	r7, r1
 800e33c:	4614      	mov	r4, r2
 800e33e:	18d5      	adds	r5, r2, r3
 800e340:	42ac      	cmp	r4, r5
 800e342:	d101      	bne.n	800e348 <__sfputs_r+0x12>
 800e344:	2000      	movs	r0, #0
 800e346:	e007      	b.n	800e358 <__sfputs_r+0x22>
 800e348:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e34c:	463a      	mov	r2, r7
 800e34e:	4630      	mov	r0, r6
 800e350:	f7ff ffda 	bl	800e308 <__sfputc_r>
 800e354:	1c43      	adds	r3, r0, #1
 800e356:	d1f3      	bne.n	800e340 <__sfputs_r+0xa>
 800e358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e35c <_vfiprintf_r>:
 800e35c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e360:	460d      	mov	r5, r1
 800e362:	b09d      	sub	sp, #116	; 0x74
 800e364:	4614      	mov	r4, r2
 800e366:	4698      	mov	r8, r3
 800e368:	4606      	mov	r6, r0
 800e36a:	b118      	cbz	r0, 800e374 <_vfiprintf_r+0x18>
 800e36c:	6983      	ldr	r3, [r0, #24]
 800e36e:	b90b      	cbnz	r3, 800e374 <_vfiprintf_r+0x18>
 800e370:	f000 fb14 	bl	800e99c <__sinit>
 800e374:	4b89      	ldr	r3, [pc, #548]	; (800e59c <_vfiprintf_r+0x240>)
 800e376:	429d      	cmp	r5, r3
 800e378:	d11b      	bne.n	800e3b2 <_vfiprintf_r+0x56>
 800e37a:	6875      	ldr	r5, [r6, #4]
 800e37c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e37e:	07d9      	lsls	r1, r3, #31
 800e380:	d405      	bmi.n	800e38e <_vfiprintf_r+0x32>
 800e382:	89ab      	ldrh	r3, [r5, #12]
 800e384:	059a      	lsls	r2, r3, #22
 800e386:	d402      	bmi.n	800e38e <_vfiprintf_r+0x32>
 800e388:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e38a:	f000 fba5 	bl	800ead8 <__retarget_lock_acquire_recursive>
 800e38e:	89ab      	ldrh	r3, [r5, #12]
 800e390:	071b      	lsls	r3, r3, #28
 800e392:	d501      	bpl.n	800e398 <_vfiprintf_r+0x3c>
 800e394:	692b      	ldr	r3, [r5, #16]
 800e396:	b9eb      	cbnz	r3, 800e3d4 <_vfiprintf_r+0x78>
 800e398:	4629      	mov	r1, r5
 800e39a:	4630      	mov	r0, r6
 800e39c:	f000 f96e 	bl	800e67c <__swsetup_r>
 800e3a0:	b1c0      	cbz	r0, 800e3d4 <_vfiprintf_r+0x78>
 800e3a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e3a4:	07dc      	lsls	r4, r3, #31
 800e3a6:	d50e      	bpl.n	800e3c6 <_vfiprintf_r+0x6a>
 800e3a8:	f04f 30ff 	mov.w	r0, #4294967295
 800e3ac:	b01d      	add	sp, #116	; 0x74
 800e3ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3b2:	4b7b      	ldr	r3, [pc, #492]	; (800e5a0 <_vfiprintf_r+0x244>)
 800e3b4:	429d      	cmp	r5, r3
 800e3b6:	d101      	bne.n	800e3bc <_vfiprintf_r+0x60>
 800e3b8:	68b5      	ldr	r5, [r6, #8]
 800e3ba:	e7df      	b.n	800e37c <_vfiprintf_r+0x20>
 800e3bc:	4b79      	ldr	r3, [pc, #484]	; (800e5a4 <_vfiprintf_r+0x248>)
 800e3be:	429d      	cmp	r5, r3
 800e3c0:	bf08      	it	eq
 800e3c2:	68f5      	ldreq	r5, [r6, #12]
 800e3c4:	e7da      	b.n	800e37c <_vfiprintf_r+0x20>
 800e3c6:	89ab      	ldrh	r3, [r5, #12]
 800e3c8:	0598      	lsls	r0, r3, #22
 800e3ca:	d4ed      	bmi.n	800e3a8 <_vfiprintf_r+0x4c>
 800e3cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e3ce:	f000 fb84 	bl	800eada <__retarget_lock_release_recursive>
 800e3d2:	e7e9      	b.n	800e3a8 <_vfiprintf_r+0x4c>
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	9309      	str	r3, [sp, #36]	; 0x24
 800e3d8:	2320      	movs	r3, #32
 800e3da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e3de:	f8cd 800c 	str.w	r8, [sp, #12]
 800e3e2:	2330      	movs	r3, #48	; 0x30
 800e3e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e5a8 <_vfiprintf_r+0x24c>
 800e3e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e3ec:	f04f 0901 	mov.w	r9, #1
 800e3f0:	4623      	mov	r3, r4
 800e3f2:	469a      	mov	sl, r3
 800e3f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e3f8:	b10a      	cbz	r2, 800e3fe <_vfiprintf_r+0xa2>
 800e3fa:	2a25      	cmp	r2, #37	; 0x25
 800e3fc:	d1f9      	bne.n	800e3f2 <_vfiprintf_r+0x96>
 800e3fe:	ebba 0b04 	subs.w	fp, sl, r4
 800e402:	d00b      	beq.n	800e41c <_vfiprintf_r+0xc0>
 800e404:	465b      	mov	r3, fp
 800e406:	4622      	mov	r2, r4
 800e408:	4629      	mov	r1, r5
 800e40a:	4630      	mov	r0, r6
 800e40c:	f7ff ff93 	bl	800e336 <__sfputs_r>
 800e410:	3001      	adds	r0, #1
 800e412:	f000 80aa 	beq.w	800e56a <_vfiprintf_r+0x20e>
 800e416:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e418:	445a      	add	r2, fp
 800e41a:	9209      	str	r2, [sp, #36]	; 0x24
 800e41c:	f89a 3000 	ldrb.w	r3, [sl]
 800e420:	2b00      	cmp	r3, #0
 800e422:	f000 80a2 	beq.w	800e56a <_vfiprintf_r+0x20e>
 800e426:	2300      	movs	r3, #0
 800e428:	f04f 32ff 	mov.w	r2, #4294967295
 800e42c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e430:	f10a 0a01 	add.w	sl, sl, #1
 800e434:	9304      	str	r3, [sp, #16]
 800e436:	9307      	str	r3, [sp, #28]
 800e438:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e43c:	931a      	str	r3, [sp, #104]	; 0x68
 800e43e:	4654      	mov	r4, sl
 800e440:	2205      	movs	r2, #5
 800e442:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e446:	4858      	ldr	r0, [pc, #352]	; (800e5a8 <_vfiprintf_r+0x24c>)
 800e448:	f7f1 fef2 	bl	8000230 <memchr>
 800e44c:	9a04      	ldr	r2, [sp, #16]
 800e44e:	b9d8      	cbnz	r0, 800e488 <_vfiprintf_r+0x12c>
 800e450:	06d1      	lsls	r1, r2, #27
 800e452:	bf44      	itt	mi
 800e454:	2320      	movmi	r3, #32
 800e456:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e45a:	0713      	lsls	r3, r2, #28
 800e45c:	bf44      	itt	mi
 800e45e:	232b      	movmi	r3, #43	; 0x2b
 800e460:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e464:	f89a 3000 	ldrb.w	r3, [sl]
 800e468:	2b2a      	cmp	r3, #42	; 0x2a
 800e46a:	d015      	beq.n	800e498 <_vfiprintf_r+0x13c>
 800e46c:	9a07      	ldr	r2, [sp, #28]
 800e46e:	4654      	mov	r4, sl
 800e470:	2000      	movs	r0, #0
 800e472:	f04f 0c0a 	mov.w	ip, #10
 800e476:	4621      	mov	r1, r4
 800e478:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e47c:	3b30      	subs	r3, #48	; 0x30
 800e47e:	2b09      	cmp	r3, #9
 800e480:	d94e      	bls.n	800e520 <_vfiprintf_r+0x1c4>
 800e482:	b1b0      	cbz	r0, 800e4b2 <_vfiprintf_r+0x156>
 800e484:	9207      	str	r2, [sp, #28]
 800e486:	e014      	b.n	800e4b2 <_vfiprintf_r+0x156>
 800e488:	eba0 0308 	sub.w	r3, r0, r8
 800e48c:	fa09 f303 	lsl.w	r3, r9, r3
 800e490:	4313      	orrs	r3, r2
 800e492:	9304      	str	r3, [sp, #16]
 800e494:	46a2      	mov	sl, r4
 800e496:	e7d2      	b.n	800e43e <_vfiprintf_r+0xe2>
 800e498:	9b03      	ldr	r3, [sp, #12]
 800e49a:	1d19      	adds	r1, r3, #4
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	9103      	str	r1, [sp, #12]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	bfbb      	ittet	lt
 800e4a4:	425b      	neglt	r3, r3
 800e4a6:	f042 0202 	orrlt.w	r2, r2, #2
 800e4aa:	9307      	strge	r3, [sp, #28]
 800e4ac:	9307      	strlt	r3, [sp, #28]
 800e4ae:	bfb8      	it	lt
 800e4b0:	9204      	strlt	r2, [sp, #16]
 800e4b2:	7823      	ldrb	r3, [r4, #0]
 800e4b4:	2b2e      	cmp	r3, #46	; 0x2e
 800e4b6:	d10c      	bne.n	800e4d2 <_vfiprintf_r+0x176>
 800e4b8:	7863      	ldrb	r3, [r4, #1]
 800e4ba:	2b2a      	cmp	r3, #42	; 0x2a
 800e4bc:	d135      	bne.n	800e52a <_vfiprintf_r+0x1ce>
 800e4be:	9b03      	ldr	r3, [sp, #12]
 800e4c0:	1d1a      	adds	r2, r3, #4
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	9203      	str	r2, [sp, #12]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	bfb8      	it	lt
 800e4ca:	f04f 33ff 	movlt.w	r3, #4294967295
 800e4ce:	3402      	adds	r4, #2
 800e4d0:	9305      	str	r3, [sp, #20]
 800e4d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e5b8 <_vfiprintf_r+0x25c>
 800e4d6:	7821      	ldrb	r1, [r4, #0]
 800e4d8:	2203      	movs	r2, #3
 800e4da:	4650      	mov	r0, sl
 800e4dc:	f7f1 fea8 	bl	8000230 <memchr>
 800e4e0:	b140      	cbz	r0, 800e4f4 <_vfiprintf_r+0x198>
 800e4e2:	2340      	movs	r3, #64	; 0x40
 800e4e4:	eba0 000a 	sub.w	r0, r0, sl
 800e4e8:	fa03 f000 	lsl.w	r0, r3, r0
 800e4ec:	9b04      	ldr	r3, [sp, #16]
 800e4ee:	4303      	orrs	r3, r0
 800e4f0:	3401      	adds	r4, #1
 800e4f2:	9304      	str	r3, [sp, #16]
 800e4f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4f8:	482c      	ldr	r0, [pc, #176]	; (800e5ac <_vfiprintf_r+0x250>)
 800e4fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e4fe:	2206      	movs	r2, #6
 800e500:	f7f1 fe96 	bl	8000230 <memchr>
 800e504:	2800      	cmp	r0, #0
 800e506:	d03f      	beq.n	800e588 <_vfiprintf_r+0x22c>
 800e508:	4b29      	ldr	r3, [pc, #164]	; (800e5b0 <_vfiprintf_r+0x254>)
 800e50a:	bb1b      	cbnz	r3, 800e554 <_vfiprintf_r+0x1f8>
 800e50c:	9b03      	ldr	r3, [sp, #12]
 800e50e:	3307      	adds	r3, #7
 800e510:	f023 0307 	bic.w	r3, r3, #7
 800e514:	3308      	adds	r3, #8
 800e516:	9303      	str	r3, [sp, #12]
 800e518:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e51a:	443b      	add	r3, r7
 800e51c:	9309      	str	r3, [sp, #36]	; 0x24
 800e51e:	e767      	b.n	800e3f0 <_vfiprintf_r+0x94>
 800e520:	fb0c 3202 	mla	r2, ip, r2, r3
 800e524:	460c      	mov	r4, r1
 800e526:	2001      	movs	r0, #1
 800e528:	e7a5      	b.n	800e476 <_vfiprintf_r+0x11a>
 800e52a:	2300      	movs	r3, #0
 800e52c:	3401      	adds	r4, #1
 800e52e:	9305      	str	r3, [sp, #20]
 800e530:	4619      	mov	r1, r3
 800e532:	f04f 0c0a 	mov.w	ip, #10
 800e536:	4620      	mov	r0, r4
 800e538:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e53c:	3a30      	subs	r2, #48	; 0x30
 800e53e:	2a09      	cmp	r2, #9
 800e540:	d903      	bls.n	800e54a <_vfiprintf_r+0x1ee>
 800e542:	2b00      	cmp	r3, #0
 800e544:	d0c5      	beq.n	800e4d2 <_vfiprintf_r+0x176>
 800e546:	9105      	str	r1, [sp, #20]
 800e548:	e7c3      	b.n	800e4d2 <_vfiprintf_r+0x176>
 800e54a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e54e:	4604      	mov	r4, r0
 800e550:	2301      	movs	r3, #1
 800e552:	e7f0      	b.n	800e536 <_vfiprintf_r+0x1da>
 800e554:	ab03      	add	r3, sp, #12
 800e556:	9300      	str	r3, [sp, #0]
 800e558:	462a      	mov	r2, r5
 800e55a:	4b16      	ldr	r3, [pc, #88]	; (800e5b4 <_vfiprintf_r+0x258>)
 800e55c:	a904      	add	r1, sp, #16
 800e55e:	4630      	mov	r0, r6
 800e560:	f7fd fe22 	bl	800c1a8 <_printf_float>
 800e564:	4607      	mov	r7, r0
 800e566:	1c78      	adds	r0, r7, #1
 800e568:	d1d6      	bne.n	800e518 <_vfiprintf_r+0x1bc>
 800e56a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e56c:	07d9      	lsls	r1, r3, #31
 800e56e:	d405      	bmi.n	800e57c <_vfiprintf_r+0x220>
 800e570:	89ab      	ldrh	r3, [r5, #12]
 800e572:	059a      	lsls	r2, r3, #22
 800e574:	d402      	bmi.n	800e57c <_vfiprintf_r+0x220>
 800e576:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e578:	f000 faaf 	bl	800eada <__retarget_lock_release_recursive>
 800e57c:	89ab      	ldrh	r3, [r5, #12]
 800e57e:	065b      	lsls	r3, r3, #25
 800e580:	f53f af12 	bmi.w	800e3a8 <_vfiprintf_r+0x4c>
 800e584:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e586:	e711      	b.n	800e3ac <_vfiprintf_r+0x50>
 800e588:	ab03      	add	r3, sp, #12
 800e58a:	9300      	str	r3, [sp, #0]
 800e58c:	462a      	mov	r2, r5
 800e58e:	4b09      	ldr	r3, [pc, #36]	; (800e5b4 <_vfiprintf_r+0x258>)
 800e590:	a904      	add	r1, sp, #16
 800e592:	4630      	mov	r0, r6
 800e594:	f7fe f8ac 	bl	800c6f0 <_printf_i>
 800e598:	e7e4      	b.n	800e564 <_vfiprintf_r+0x208>
 800e59a:	bf00      	nop
 800e59c:	0800f25c 	.word	0x0800f25c
 800e5a0:	0800f27c 	.word	0x0800f27c
 800e5a4:	0800f23c 	.word	0x0800f23c
 800e5a8:	0800f0e4 	.word	0x0800f0e4
 800e5ac:	0800f0ee 	.word	0x0800f0ee
 800e5b0:	0800c1a9 	.word	0x0800c1a9
 800e5b4:	0800e337 	.word	0x0800e337
 800e5b8:	0800f0ea 	.word	0x0800f0ea

0800e5bc <__swbuf_r>:
 800e5bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5be:	460e      	mov	r6, r1
 800e5c0:	4614      	mov	r4, r2
 800e5c2:	4605      	mov	r5, r0
 800e5c4:	b118      	cbz	r0, 800e5ce <__swbuf_r+0x12>
 800e5c6:	6983      	ldr	r3, [r0, #24]
 800e5c8:	b90b      	cbnz	r3, 800e5ce <__swbuf_r+0x12>
 800e5ca:	f000 f9e7 	bl	800e99c <__sinit>
 800e5ce:	4b21      	ldr	r3, [pc, #132]	; (800e654 <__swbuf_r+0x98>)
 800e5d0:	429c      	cmp	r4, r3
 800e5d2:	d12b      	bne.n	800e62c <__swbuf_r+0x70>
 800e5d4:	686c      	ldr	r4, [r5, #4]
 800e5d6:	69a3      	ldr	r3, [r4, #24]
 800e5d8:	60a3      	str	r3, [r4, #8]
 800e5da:	89a3      	ldrh	r3, [r4, #12]
 800e5dc:	071a      	lsls	r2, r3, #28
 800e5de:	d52f      	bpl.n	800e640 <__swbuf_r+0x84>
 800e5e0:	6923      	ldr	r3, [r4, #16]
 800e5e2:	b36b      	cbz	r3, 800e640 <__swbuf_r+0x84>
 800e5e4:	6923      	ldr	r3, [r4, #16]
 800e5e6:	6820      	ldr	r0, [r4, #0]
 800e5e8:	1ac0      	subs	r0, r0, r3
 800e5ea:	6963      	ldr	r3, [r4, #20]
 800e5ec:	b2f6      	uxtb	r6, r6
 800e5ee:	4283      	cmp	r3, r0
 800e5f0:	4637      	mov	r7, r6
 800e5f2:	dc04      	bgt.n	800e5fe <__swbuf_r+0x42>
 800e5f4:	4621      	mov	r1, r4
 800e5f6:	4628      	mov	r0, r5
 800e5f8:	f000 f93c 	bl	800e874 <_fflush_r>
 800e5fc:	bb30      	cbnz	r0, 800e64c <__swbuf_r+0x90>
 800e5fe:	68a3      	ldr	r3, [r4, #8]
 800e600:	3b01      	subs	r3, #1
 800e602:	60a3      	str	r3, [r4, #8]
 800e604:	6823      	ldr	r3, [r4, #0]
 800e606:	1c5a      	adds	r2, r3, #1
 800e608:	6022      	str	r2, [r4, #0]
 800e60a:	701e      	strb	r6, [r3, #0]
 800e60c:	6963      	ldr	r3, [r4, #20]
 800e60e:	3001      	adds	r0, #1
 800e610:	4283      	cmp	r3, r0
 800e612:	d004      	beq.n	800e61e <__swbuf_r+0x62>
 800e614:	89a3      	ldrh	r3, [r4, #12]
 800e616:	07db      	lsls	r3, r3, #31
 800e618:	d506      	bpl.n	800e628 <__swbuf_r+0x6c>
 800e61a:	2e0a      	cmp	r6, #10
 800e61c:	d104      	bne.n	800e628 <__swbuf_r+0x6c>
 800e61e:	4621      	mov	r1, r4
 800e620:	4628      	mov	r0, r5
 800e622:	f000 f927 	bl	800e874 <_fflush_r>
 800e626:	b988      	cbnz	r0, 800e64c <__swbuf_r+0x90>
 800e628:	4638      	mov	r0, r7
 800e62a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e62c:	4b0a      	ldr	r3, [pc, #40]	; (800e658 <__swbuf_r+0x9c>)
 800e62e:	429c      	cmp	r4, r3
 800e630:	d101      	bne.n	800e636 <__swbuf_r+0x7a>
 800e632:	68ac      	ldr	r4, [r5, #8]
 800e634:	e7cf      	b.n	800e5d6 <__swbuf_r+0x1a>
 800e636:	4b09      	ldr	r3, [pc, #36]	; (800e65c <__swbuf_r+0xa0>)
 800e638:	429c      	cmp	r4, r3
 800e63a:	bf08      	it	eq
 800e63c:	68ec      	ldreq	r4, [r5, #12]
 800e63e:	e7ca      	b.n	800e5d6 <__swbuf_r+0x1a>
 800e640:	4621      	mov	r1, r4
 800e642:	4628      	mov	r0, r5
 800e644:	f000 f81a 	bl	800e67c <__swsetup_r>
 800e648:	2800      	cmp	r0, #0
 800e64a:	d0cb      	beq.n	800e5e4 <__swbuf_r+0x28>
 800e64c:	f04f 37ff 	mov.w	r7, #4294967295
 800e650:	e7ea      	b.n	800e628 <__swbuf_r+0x6c>
 800e652:	bf00      	nop
 800e654:	0800f25c 	.word	0x0800f25c
 800e658:	0800f27c 	.word	0x0800f27c
 800e65c:	0800f23c 	.word	0x0800f23c

0800e660 <__ascii_wctomb>:
 800e660:	b149      	cbz	r1, 800e676 <__ascii_wctomb+0x16>
 800e662:	2aff      	cmp	r2, #255	; 0xff
 800e664:	bf85      	ittet	hi
 800e666:	238a      	movhi	r3, #138	; 0x8a
 800e668:	6003      	strhi	r3, [r0, #0]
 800e66a:	700a      	strbls	r2, [r1, #0]
 800e66c:	f04f 30ff 	movhi.w	r0, #4294967295
 800e670:	bf98      	it	ls
 800e672:	2001      	movls	r0, #1
 800e674:	4770      	bx	lr
 800e676:	4608      	mov	r0, r1
 800e678:	4770      	bx	lr
	...

0800e67c <__swsetup_r>:
 800e67c:	4b32      	ldr	r3, [pc, #200]	; (800e748 <__swsetup_r+0xcc>)
 800e67e:	b570      	push	{r4, r5, r6, lr}
 800e680:	681d      	ldr	r5, [r3, #0]
 800e682:	4606      	mov	r6, r0
 800e684:	460c      	mov	r4, r1
 800e686:	b125      	cbz	r5, 800e692 <__swsetup_r+0x16>
 800e688:	69ab      	ldr	r3, [r5, #24]
 800e68a:	b913      	cbnz	r3, 800e692 <__swsetup_r+0x16>
 800e68c:	4628      	mov	r0, r5
 800e68e:	f000 f985 	bl	800e99c <__sinit>
 800e692:	4b2e      	ldr	r3, [pc, #184]	; (800e74c <__swsetup_r+0xd0>)
 800e694:	429c      	cmp	r4, r3
 800e696:	d10f      	bne.n	800e6b8 <__swsetup_r+0x3c>
 800e698:	686c      	ldr	r4, [r5, #4]
 800e69a:	89a3      	ldrh	r3, [r4, #12]
 800e69c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e6a0:	0719      	lsls	r1, r3, #28
 800e6a2:	d42c      	bmi.n	800e6fe <__swsetup_r+0x82>
 800e6a4:	06dd      	lsls	r5, r3, #27
 800e6a6:	d411      	bmi.n	800e6cc <__swsetup_r+0x50>
 800e6a8:	2309      	movs	r3, #9
 800e6aa:	6033      	str	r3, [r6, #0]
 800e6ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e6b0:	81a3      	strh	r3, [r4, #12]
 800e6b2:	f04f 30ff 	mov.w	r0, #4294967295
 800e6b6:	e03e      	b.n	800e736 <__swsetup_r+0xba>
 800e6b8:	4b25      	ldr	r3, [pc, #148]	; (800e750 <__swsetup_r+0xd4>)
 800e6ba:	429c      	cmp	r4, r3
 800e6bc:	d101      	bne.n	800e6c2 <__swsetup_r+0x46>
 800e6be:	68ac      	ldr	r4, [r5, #8]
 800e6c0:	e7eb      	b.n	800e69a <__swsetup_r+0x1e>
 800e6c2:	4b24      	ldr	r3, [pc, #144]	; (800e754 <__swsetup_r+0xd8>)
 800e6c4:	429c      	cmp	r4, r3
 800e6c6:	bf08      	it	eq
 800e6c8:	68ec      	ldreq	r4, [r5, #12]
 800e6ca:	e7e6      	b.n	800e69a <__swsetup_r+0x1e>
 800e6cc:	0758      	lsls	r0, r3, #29
 800e6ce:	d512      	bpl.n	800e6f6 <__swsetup_r+0x7a>
 800e6d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e6d2:	b141      	cbz	r1, 800e6e6 <__swsetup_r+0x6a>
 800e6d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e6d8:	4299      	cmp	r1, r3
 800e6da:	d002      	beq.n	800e6e2 <__swsetup_r+0x66>
 800e6dc:	4630      	mov	r0, r6
 800e6de:	f7ff fb6f 	bl	800ddc0 <_free_r>
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	6363      	str	r3, [r4, #52]	; 0x34
 800e6e6:	89a3      	ldrh	r3, [r4, #12]
 800e6e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e6ec:	81a3      	strh	r3, [r4, #12]
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	6063      	str	r3, [r4, #4]
 800e6f2:	6923      	ldr	r3, [r4, #16]
 800e6f4:	6023      	str	r3, [r4, #0]
 800e6f6:	89a3      	ldrh	r3, [r4, #12]
 800e6f8:	f043 0308 	orr.w	r3, r3, #8
 800e6fc:	81a3      	strh	r3, [r4, #12]
 800e6fe:	6923      	ldr	r3, [r4, #16]
 800e700:	b94b      	cbnz	r3, 800e716 <__swsetup_r+0x9a>
 800e702:	89a3      	ldrh	r3, [r4, #12]
 800e704:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e708:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e70c:	d003      	beq.n	800e716 <__swsetup_r+0x9a>
 800e70e:	4621      	mov	r1, r4
 800e710:	4630      	mov	r0, r6
 800e712:	f000 fa07 	bl	800eb24 <__smakebuf_r>
 800e716:	89a0      	ldrh	r0, [r4, #12]
 800e718:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e71c:	f010 0301 	ands.w	r3, r0, #1
 800e720:	d00a      	beq.n	800e738 <__swsetup_r+0xbc>
 800e722:	2300      	movs	r3, #0
 800e724:	60a3      	str	r3, [r4, #8]
 800e726:	6963      	ldr	r3, [r4, #20]
 800e728:	425b      	negs	r3, r3
 800e72a:	61a3      	str	r3, [r4, #24]
 800e72c:	6923      	ldr	r3, [r4, #16]
 800e72e:	b943      	cbnz	r3, 800e742 <__swsetup_r+0xc6>
 800e730:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e734:	d1ba      	bne.n	800e6ac <__swsetup_r+0x30>
 800e736:	bd70      	pop	{r4, r5, r6, pc}
 800e738:	0781      	lsls	r1, r0, #30
 800e73a:	bf58      	it	pl
 800e73c:	6963      	ldrpl	r3, [r4, #20]
 800e73e:	60a3      	str	r3, [r4, #8]
 800e740:	e7f4      	b.n	800e72c <__swsetup_r+0xb0>
 800e742:	2000      	movs	r0, #0
 800e744:	e7f7      	b.n	800e736 <__swsetup_r+0xba>
 800e746:	bf00      	nop
 800e748:	20000010 	.word	0x20000010
 800e74c:	0800f25c 	.word	0x0800f25c
 800e750:	0800f27c 	.word	0x0800f27c
 800e754:	0800f23c 	.word	0x0800f23c

0800e758 <abort>:
 800e758:	b508      	push	{r3, lr}
 800e75a:	2006      	movs	r0, #6
 800e75c:	f000 fa52 	bl	800ec04 <raise>
 800e760:	2001      	movs	r0, #1
 800e762:	f7f4 fea1 	bl	80034a8 <_exit>
	...

0800e768 <__sflush_r>:
 800e768:	898a      	ldrh	r2, [r1, #12]
 800e76a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e76e:	4605      	mov	r5, r0
 800e770:	0710      	lsls	r0, r2, #28
 800e772:	460c      	mov	r4, r1
 800e774:	d458      	bmi.n	800e828 <__sflush_r+0xc0>
 800e776:	684b      	ldr	r3, [r1, #4]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	dc05      	bgt.n	800e788 <__sflush_r+0x20>
 800e77c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e77e:	2b00      	cmp	r3, #0
 800e780:	dc02      	bgt.n	800e788 <__sflush_r+0x20>
 800e782:	2000      	movs	r0, #0
 800e784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e788:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e78a:	2e00      	cmp	r6, #0
 800e78c:	d0f9      	beq.n	800e782 <__sflush_r+0x1a>
 800e78e:	2300      	movs	r3, #0
 800e790:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e794:	682f      	ldr	r7, [r5, #0]
 800e796:	602b      	str	r3, [r5, #0]
 800e798:	d032      	beq.n	800e800 <__sflush_r+0x98>
 800e79a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e79c:	89a3      	ldrh	r3, [r4, #12]
 800e79e:	075a      	lsls	r2, r3, #29
 800e7a0:	d505      	bpl.n	800e7ae <__sflush_r+0x46>
 800e7a2:	6863      	ldr	r3, [r4, #4]
 800e7a4:	1ac0      	subs	r0, r0, r3
 800e7a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e7a8:	b10b      	cbz	r3, 800e7ae <__sflush_r+0x46>
 800e7aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e7ac:	1ac0      	subs	r0, r0, r3
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	4602      	mov	r2, r0
 800e7b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e7b4:	6a21      	ldr	r1, [r4, #32]
 800e7b6:	4628      	mov	r0, r5
 800e7b8:	47b0      	blx	r6
 800e7ba:	1c43      	adds	r3, r0, #1
 800e7bc:	89a3      	ldrh	r3, [r4, #12]
 800e7be:	d106      	bne.n	800e7ce <__sflush_r+0x66>
 800e7c0:	6829      	ldr	r1, [r5, #0]
 800e7c2:	291d      	cmp	r1, #29
 800e7c4:	d82c      	bhi.n	800e820 <__sflush_r+0xb8>
 800e7c6:	4a2a      	ldr	r2, [pc, #168]	; (800e870 <__sflush_r+0x108>)
 800e7c8:	40ca      	lsrs	r2, r1
 800e7ca:	07d6      	lsls	r6, r2, #31
 800e7cc:	d528      	bpl.n	800e820 <__sflush_r+0xb8>
 800e7ce:	2200      	movs	r2, #0
 800e7d0:	6062      	str	r2, [r4, #4]
 800e7d2:	04d9      	lsls	r1, r3, #19
 800e7d4:	6922      	ldr	r2, [r4, #16]
 800e7d6:	6022      	str	r2, [r4, #0]
 800e7d8:	d504      	bpl.n	800e7e4 <__sflush_r+0x7c>
 800e7da:	1c42      	adds	r2, r0, #1
 800e7dc:	d101      	bne.n	800e7e2 <__sflush_r+0x7a>
 800e7de:	682b      	ldr	r3, [r5, #0]
 800e7e0:	b903      	cbnz	r3, 800e7e4 <__sflush_r+0x7c>
 800e7e2:	6560      	str	r0, [r4, #84]	; 0x54
 800e7e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e7e6:	602f      	str	r7, [r5, #0]
 800e7e8:	2900      	cmp	r1, #0
 800e7ea:	d0ca      	beq.n	800e782 <__sflush_r+0x1a>
 800e7ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e7f0:	4299      	cmp	r1, r3
 800e7f2:	d002      	beq.n	800e7fa <__sflush_r+0x92>
 800e7f4:	4628      	mov	r0, r5
 800e7f6:	f7ff fae3 	bl	800ddc0 <_free_r>
 800e7fa:	2000      	movs	r0, #0
 800e7fc:	6360      	str	r0, [r4, #52]	; 0x34
 800e7fe:	e7c1      	b.n	800e784 <__sflush_r+0x1c>
 800e800:	6a21      	ldr	r1, [r4, #32]
 800e802:	2301      	movs	r3, #1
 800e804:	4628      	mov	r0, r5
 800e806:	47b0      	blx	r6
 800e808:	1c41      	adds	r1, r0, #1
 800e80a:	d1c7      	bne.n	800e79c <__sflush_r+0x34>
 800e80c:	682b      	ldr	r3, [r5, #0]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d0c4      	beq.n	800e79c <__sflush_r+0x34>
 800e812:	2b1d      	cmp	r3, #29
 800e814:	d001      	beq.n	800e81a <__sflush_r+0xb2>
 800e816:	2b16      	cmp	r3, #22
 800e818:	d101      	bne.n	800e81e <__sflush_r+0xb6>
 800e81a:	602f      	str	r7, [r5, #0]
 800e81c:	e7b1      	b.n	800e782 <__sflush_r+0x1a>
 800e81e:	89a3      	ldrh	r3, [r4, #12]
 800e820:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e824:	81a3      	strh	r3, [r4, #12]
 800e826:	e7ad      	b.n	800e784 <__sflush_r+0x1c>
 800e828:	690f      	ldr	r7, [r1, #16]
 800e82a:	2f00      	cmp	r7, #0
 800e82c:	d0a9      	beq.n	800e782 <__sflush_r+0x1a>
 800e82e:	0793      	lsls	r3, r2, #30
 800e830:	680e      	ldr	r6, [r1, #0]
 800e832:	bf08      	it	eq
 800e834:	694b      	ldreq	r3, [r1, #20]
 800e836:	600f      	str	r7, [r1, #0]
 800e838:	bf18      	it	ne
 800e83a:	2300      	movne	r3, #0
 800e83c:	eba6 0807 	sub.w	r8, r6, r7
 800e840:	608b      	str	r3, [r1, #8]
 800e842:	f1b8 0f00 	cmp.w	r8, #0
 800e846:	dd9c      	ble.n	800e782 <__sflush_r+0x1a>
 800e848:	6a21      	ldr	r1, [r4, #32]
 800e84a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e84c:	4643      	mov	r3, r8
 800e84e:	463a      	mov	r2, r7
 800e850:	4628      	mov	r0, r5
 800e852:	47b0      	blx	r6
 800e854:	2800      	cmp	r0, #0
 800e856:	dc06      	bgt.n	800e866 <__sflush_r+0xfe>
 800e858:	89a3      	ldrh	r3, [r4, #12]
 800e85a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e85e:	81a3      	strh	r3, [r4, #12]
 800e860:	f04f 30ff 	mov.w	r0, #4294967295
 800e864:	e78e      	b.n	800e784 <__sflush_r+0x1c>
 800e866:	4407      	add	r7, r0
 800e868:	eba8 0800 	sub.w	r8, r8, r0
 800e86c:	e7e9      	b.n	800e842 <__sflush_r+0xda>
 800e86e:	bf00      	nop
 800e870:	20400001 	.word	0x20400001

0800e874 <_fflush_r>:
 800e874:	b538      	push	{r3, r4, r5, lr}
 800e876:	690b      	ldr	r3, [r1, #16]
 800e878:	4605      	mov	r5, r0
 800e87a:	460c      	mov	r4, r1
 800e87c:	b913      	cbnz	r3, 800e884 <_fflush_r+0x10>
 800e87e:	2500      	movs	r5, #0
 800e880:	4628      	mov	r0, r5
 800e882:	bd38      	pop	{r3, r4, r5, pc}
 800e884:	b118      	cbz	r0, 800e88e <_fflush_r+0x1a>
 800e886:	6983      	ldr	r3, [r0, #24]
 800e888:	b90b      	cbnz	r3, 800e88e <_fflush_r+0x1a>
 800e88a:	f000 f887 	bl	800e99c <__sinit>
 800e88e:	4b14      	ldr	r3, [pc, #80]	; (800e8e0 <_fflush_r+0x6c>)
 800e890:	429c      	cmp	r4, r3
 800e892:	d11b      	bne.n	800e8cc <_fflush_r+0x58>
 800e894:	686c      	ldr	r4, [r5, #4]
 800e896:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d0ef      	beq.n	800e87e <_fflush_r+0xa>
 800e89e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e8a0:	07d0      	lsls	r0, r2, #31
 800e8a2:	d404      	bmi.n	800e8ae <_fflush_r+0x3a>
 800e8a4:	0599      	lsls	r1, r3, #22
 800e8a6:	d402      	bmi.n	800e8ae <_fflush_r+0x3a>
 800e8a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e8aa:	f000 f915 	bl	800ead8 <__retarget_lock_acquire_recursive>
 800e8ae:	4628      	mov	r0, r5
 800e8b0:	4621      	mov	r1, r4
 800e8b2:	f7ff ff59 	bl	800e768 <__sflush_r>
 800e8b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e8b8:	07da      	lsls	r2, r3, #31
 800e8ba:	4605      	mov	r5, r0
 800e8bc:	d4e0      	bmi.n	800e880 <_fflush_r+0xc>
 800e8be:	89a3      	ldrh	r3, [r4, #12]
 800e8c0:	059b      	lsls	r3, r3, #22
 800e8c2:	d4dd      	bmi.n	800e880 <_fflush_r+0xc>
 800e8c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e8c6:	f000 f908 	bl	800eada <__retarget_lock_release_recursive>
 800e8ca:	e7d9      	b.n	800e880 <_fflush_r+0xc>
 800e8cc:	4b05      	ldr	r3, [pc, #20]	; (800e8e4 <_fflush_r+0x70>)
 800e8ce:	429c      	cmp	r4, r3
 800e8d0:	d101      	bne.n	800e8d6 <_fflush_r+0x62>
 800e8d2:	68ac      	ldr	r4, [r5, #8]
 800e8d4:	e7df      	b.n	800e896 <_fflush_r+0x22>
 800e8d6:	4b04      	ldr	r3, [pc, #16]	; (800e8e8 <_fflush_r+0x74>)
 800e8d8:	429c      	cmp	r4, r3
 800e8da:	bf08      	it	eq
 800e8dc:	68ec      	ldreq	r4, [r5, #12]
 800e8de:	e7da      	b.n	800e896 <_fflush_r+0x22>
 800e8e0:	0800f25c 	.word	0x0800f25c
 800e8e4:	0800f27c 	.word	0x0800f27c
 800e8e8:	0800f23c 	.word	0x0800f23c

0800e8ec <std>:
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	b510      	push	{r4, lr}
 800e8f0:	4604      	mov	r4, r0
 800e8f2:	e9c0 3300 	strd	r3, r3, [r0]
 800e8f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e8fa:	6083      	str	r3, [r0, #8]
 800e8fc:	8181      	strh	r1, [r0, #12]
 800e8fe:	6643      	str	r3, [r0, #100]	; 0x64
 800e900:	81c2      	strh	r2, [r0, #14]
 800e902:	6183      	str	r3, [r0, #24]
 800e904:	4619      	mov	r1, r3
 800e906:	2208      	movs	r2, #8
 800e908:	305c      	adds	r0, #92	; 0x5c
 800e90a:	f7fd fba5 	bl	800c058 <memset>
 800e90e:	4b05      	ldr	r3, [pc, #20]	; (800e924 <std+0x38>)
 800e910:	6263      	str	r3, [r4, #36]	; 0x24
 800e912:	4b05      	ldr	r3, [pc, #20]	; (800e928 <std+0x3c>)
 800e914:	62a3      	str	r3, [r4, #40]	; 0x28
 800e916:	4b05      	ldr	r3, [pc, #20]	; (800e92c <std+0x40>)
 800e918:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e91a:	4b05      	ldr	r3, [pc, #20]	; (800e930 <std+0x44>)
 800e91c:	6224      	str	r4, [r4, #32]
 800e91e:	6323      	str	r3, [r4, #48]	; 0x30
 800e920:	bd10      	pop	{r4, pc}
 800e922:	bf00      	nop
 800e924:	0800ec3d 	.word	0x0800ec3d
 800e928:	0800ec5f 	.word	0x0800ec5f
 800e92c:	0800ec97 	.word	0x0800ec97
 800e930:	0800ecbb 	.word	0x0800ecbb

0800e934 <_cleanup_r>:
 800e934:	4901      	ldr	r1, [pc, #4]	; (800e93c <_cleanup_r+0x8>)
 800e936:	f000 b8af 	b.w	800ea98 <_fwalk_reent>
 800e93a:	bf00      	nop
 800e93c:	0800e875 	.word	0x0800e875

0800e940 <__sfmoreglue>:
 800e940:	b570      	push	{r4, r5, r6, lr}
 800e942:	1e4a      	subs	r2, r1, #1
 800e944:	2568      	movs	r5, #104	; 0x68
 800e946:	4355      	muls	r5, r2
 800e948:	460e      	mov	r6, r1
 800e94a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e94e:	f7ff fa87 	bl	800de60 <_malloc_r>
 800e952:	4604      	mov	r4, r0
 800e954:	b140      	cbz	r0, 800e968 <__sfmoreglue+0x28>
 800e956:	2100      	movs	r1, #0
 800e958:	e9c0 1600 	strd	r1, r6, [r0]
 800e95c:	300c      	adds	r0, #12
 800e95e:	60a0      	str	r0, [r4, #8]
 800e960:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e964:	f7fd fb78 	bl	800c058 <memset>
 800e968:	4620      	mov	r0, r4
 800e96a:	bd70      	pop	{r4, r5, r6, pc}

0800e96c <__sfp_lock_acquire>:
 800e96c:	4801      	ldr	r0, [pc, #4]	; (800e974 <__sfp_lock_acquire+0x8>)
 800e96e:	f000 b8b3 	b.w	800ead8 <__retarget_lock_acquire_recursive>
 800e972:	bf00      	nop
 800e974:	20000d10 	.word	0x20000d10

0800e978 <__sfp_lock_release>:
 800e978:	4801      	ldr	r0, [pc, #4]	; (800e980 <__sfp_lock_release+0x8>)
 800e97a:	f000 b8ae 	b.w	800eada <__retarget_lock_release_recursive>
 800e97e:	bf00      	nop
 800e980:	20000d10 	.word	0x20000d10

0800e984 <__sinit_lock_acquire>:
 800e984:	4801      	ldr	r0, [pc, #4]	; (800e98c <__sinit_lock_acquire+0x8>)
 800e986:	f000 b8a7 	b.w	800ead8 <__retarget_lock_acquire_recursive>
 800e98a:	bf00      	nop
 800e98c:	20000d0b 	.word	0x20000d0b

0800e990 <__sinit_lock_release>:
 800e990:	4801      	ldr	r0, [pc, #4]	; (800e998 <__sinit_lock_release+0x8>)
 800e992:	f000 b8a2 	b.w	800eada <__retarget_lock_release_recursive>
 800e996:	bf00      	nop
 800e998:	20000d0b 	.word	0x20000d0b

0800e99c <__sinit>:
 800e99c:	b510      	push	{r4, lr}
 800e99e:	4604      	mov	r4, r0
 800e9a0:	f7ff fff0 	bl	800e984 <__sinit_lock_acquire>
 800e9a4:	69a3      	ldr	r3, [r4, #24]
 800e9a6:	b11b      	cbz	r3, 800e9b0 <__sinit+0x14>
 800e9a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e9ac:	f7ff bff0 	b.w	800e990 <__sinit_lock_release>
 800e9b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e9b4:	6523      	str	r3, [r4, #80]	; 0x50
 800e9b6:	4b13      	ldr	r3, [pc, #76]	; (800ea04 <__sinit+0x68>)
 800e9b8:	4a13      	ldr	r2, [pc, #76]	; (800ea08 <__sinit+0x6c>)
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	62a2      	str	r2, [r4, #40]	; 0x28
 800e9be:	42a3      	cmp	r3, r4
 800e9c0:	bf04      	itt	eq
 800e9c2:	2301      	moveq	r3, #1
 800e9c4:	61a3      	streq	r3, [r4, #24]
 800e9c6:	4620      	mov	r0, r4
 800e9c8:	f000 f820 	bl	800ea0c <__sfp>
 800e9cc:	6060      	str	r0, [r4, #4]
 800e9ce:	4620      	mov	r0, r4
 800e9d0:	f000 f81c 	bl	800ea0c <__sfp>
 800e9d4:	60a0      	str	r0, [r4, #8]
 800e9d6:	4620      	mov	r0, r4
 800e9d8:	f000 f818 	bl	800ea0c <__sfp>
 800e9dc:	2200      	movs	r2, #0
 800e9de:	60e0      	str	r0, [r4, #12]
 800e9e0:	2104      	movs	r1, #4
 800e9e2:	6860      	ldr	r0, [r4, #4]
 800e9e4:	f7ff ff82 	bl	800e8ec <std>
 800e9e8:	68a0      	ldr	r0, [r4, #8]
 800e9ea:	2201      	movs	r2, #1
 800e9ec:	2109      	movs	r1, #9
 800e9ee:	f7ff ff7d 	bl	800e8ec <std>
 800e9f2:	68e0      	ldr	r0, [r4, #12]
 800e9f4:	2202      	movs	r2, #2
 800e9f6:	2112      	movs	r1, #18
 800e9f8:	f7ff ff78 	bl	800e8ec <std>
 800e9fc:	2301      	movs	r3, #1
 800e9fe:	61a3      	str	r3, [r4, #24]
 800ea00:	e7d2      	b.n	800e9a8 <__sinit+0xc>
 800ea02:	bf00      	nop
 800ea04:	0800eeb8 	.word	0x0800eeb8
 800ea08:	0800e935 	.word	0x0800e935

0800ea0c <__sfp>:
 800ea0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea0e:	4607      	mov	r7, r0
 800ea10:	f7ff ffac 	bl	800e96c <__sfp_lock_acquire>
 800ea14:	4b1e      	ldr	r3, [pc, #120]	; (800ea90 <__sfp+0x84>)
 800ea16:	681e      	ldr	r6, [r3, #0]
 800ea18:	69b3      	ldr	r3, [r6, #24]
 800ea1a:	b913      	cbnz	r3, 800ea22 <__sfp+0x16>
 800ea1c:	4630      	mov	r0, r6
 800ea1e:	f7ff ffbd 	bl	800e99c <__sinit>
 800ea22:	3648      	adds	r6, #72	; 0x48
 800ea24:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ea28:	3b01      	subs	r3, #1
 800ea2a:	d503      	bpl.n	800ea34 <__sfp+0x28>
 800ea2c:	6833      	ldr	r3, [r6, #0]
 800ea2e:	b30b      	cbz	r3, 800ea74 <__sfp+0x68>
 800ea30:	6836      	ldr	r6, [r6, #0]
 800ea32:	e7f7      	b.n	800ea24 <__sfp+0x18>
 800ea34:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ea38:	b9d5      	cbnz	r5, 800ea70 <__sfp+0x64>
 800ea3a:	4b16      	ldr	r3, [pc, #88]	; (800ea94 <__sfp+0x88>)
 800ea3c:	60e3      	str	r3, [r4, #12]
 800ea3e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ea42:	6665      	str	r5, [r4, #100]	; 0x64
 800ea44:	f000 f847 	bl	800ead6 <__retarget_lock_init_recursive>
 800ea48:	f7ff ff96 	bl	800e978 <__sfp_lock_release>
 800ea4c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ea50:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ea54:	6025      	str	r5, [r4, #0]
 800ea56:	61a5      	str	r5, [r4, #24]
 800ea58:	2208      	movs	r2, #8
 800ea5a:	4629      	mov	r1, r5
 800ea5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ea60:	f7fd fafa 	bl	800c058 <memset>
 800ea64:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ea68:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ea6c:	4620      	mov	r0, r4
 800ea6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea70:	3468      	adds	r4, #104	; 0x68
 800ea72:	e7d9      	b.n	800ea28 <__sfp+0x1c>
 800ea74:	2104      	movs	r1, #4
 800ea76:	4638      	mov	r0, r7
 800ea78:	f7ff ff62 	bl	800e940 <__sfmoreglue>
 800ea7c:	4604      	mov	r4, r0
 800ea7e:	6030      	str	r0, [r6, #0]
 800ea80:	2800      	cmp	r0, #0
 800ea82:	d1d5      	bne.n	800ea30 <__sfp+0x24>
 800ea84:	f7ff ff78 	bl	800e978 <__sfp_lock_release>
 800ea88:	230c      	movs	r3, #12
 800ea8a:	603b      	str	r3, [r7, #0]
 800ea8c:	e7ee      	b.n	800ea6c <__sfp+0x60>
 800ea8e:	bf00      	nop
 800ea90:	0800eeb8 	.word	0x0800eeb8
 800ea94:	ffff0001 	.word	0xffff0001

0800ea98 <_fwalk_reent>:
 800ea98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea9c:	4606      	mov	r6, r0
 800ea9e:	4688      	mov	r8, r1
 800eaa0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800eaa4:	2700      	movs	r7, #0
 800eaa6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800eaaa:	f1b9 0901 	subs.w	r9, r9, #1
 800eaae:	d505      	bpl.n	800eabc <_fwalk_reent+0x24>
 800eab0:	6824      	ldr	r4, [r4, #0]
 800eab2:	2c00      	cmp	r4, #0
 800eab4:	d1f7      	bne.n	800eaa6 <_fwalk_reent+0xe>
 800eab6:	4638      	mov	r0, r7
 800eab8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eabc:	89ab      	ldrh	r3, [r5, #12]
 800eabe:	2b01      	cmp	r3, #1
 800eac0:	d907      	bls.n	800ead2 <_fwalk_reent+0x3a>
 800eac2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800eac6:	3301      	adds	r3, #1
 800eac8:	d003      	beq.n	800ead2 <_fwalk_reent+0x3a>
 800eaca:	4629      	mov	r1, r5
 800eacc:	4630      	mov	r0, r6
 800eace:	47c0      	blx	r8
 800ead0:	4307      	orrs	r7, r0
 800ead2:	3568      	adds	r5, #104	; 0x68
 800ead4:	e7e9      	b.n	800eaaa <_fwalk_reent+0x12>

0800ead6 <__retarget_lock_init_recursive>:
 800ead6:	4770      	bx	lr

0800ead8 <__retarget_lock_acquire_recursive>:
 800ead8:	4770      	bx	lr

0800eada <__retarget_lock_release_recursive>:
 800eada:	4770      	bx	lr

0800eadc <__swhatbuf_r>:
 800eadc:	b570      	push	{r4, r5, r6, lr}
 800eade:	460e      	mov	r6, r1
 800eae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eae4:	2900      	cmp	r1, #0
 800eae6:	b096      	sub	sp, #88	; 0x58
 800eae8:	4614      	mov	r4, r2
 800eaea:	461d      	mov	r5, r3
 800eaec:	da07      	bge.n	800eafe <__swhatbuf_r+0x22>
 800eaee:	2300      	movs	r3, #0
 800eaf0:	602b      	str	r3, [r5, #0]
 800eaf2:	89b3      	ldrh	r3, [r6, #12]
 800eaf4:	061a      	lsls	r2, r3, #24
 800eaf6:	d410      	bmi.n	800eb1a <__swhatbuf_r+0x3e>
 800eaf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eafc:	e00e      	b.n	800eb1c <__swhatbuf_r+0x40>
 800eafe:	466a      	mov	r2, sp
 800eb00:	f000 f902 	bl	800ed08 <_fstat_r>
 800eb04:	2800      	cmp	r0, #0
 800eb06:	dbf2      	blt.n	800eaee <__swhatbuf_r+0x12>
 800eb08:	9a01      	ldr	r2, [sp, #4]
 800eb0a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800eb0e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800eb12:	425a      	negs	r2, r3
 800eb14:	415a      	adcs	r2, r3
 800eb16:	602a      	str	r2, [r5, #0]
 800eb18:	e7ee      	b.n	800eaf8 <__swhatbuf_r+0x1c>
 800eb1a:	2340      	movs	r3, #64	; 0x40
 800eb1c:	2000      	movs	r0, #0
 800eb1e:	6023      	str	r3, [r4, #0]
 800eb20:	b016      	add	sp, #88	; 0x58
 800eb22:	bd70      	pop	{r4, r5, r6, pc}

0800eb24 <__smakebuf_r>:
 800eb24:	898b      	ldrh	r3, [r1, #12]
 800eb26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800eb28:	079d      	lsls	r5, r3, #30
 800eb2a:	4606      	mov	r6, r0
 800eb2c:	460c      	mov	r4, r1
 800eb2e:	d507      	bpl.n	800eb40 <__smakebuf_r+0x1c>
 800eb30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800eb34:	6023      	str	r3, [r4, #0]
 800eb36:	6123      	str	r3, [r4, #16]
 800eb38:	2301      	movs	r3, #1
 800eb3a:	6163      	str	r3, [r4, #20]
 800eb3c:	b002      	add	sp, #8
 800eb3e:	bd70      	pop	{r4, r5, r6, pc}
 800eb40:	ab01      	add	r3, sp, #4
 800eb42:	466a      	mov	r2, sp
 800eb44:	f7ff ffca 	bl	800eadc <__swhatbuf_r>
 800eb48:	9900      	ldr	r1, [sp, #0]
 800eb4a:	4605      	mov	r5, r0
 800eb4c:	4630      	mov	r0, r6
 800eb4e:	f7ff f987 	bl	800de60 <_malloc_r>
 800eb52:	b948      	cbnz	r0, 800eb68 <__smakebuf_r+0x44>
 800eb54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb58:	059a      	lsls	r2, r3, #22
 800eb5a:	d4ef      	bmi.n	800eb3c <__smakebuf_r+0x18>
 800eb5c:	f023 0303 	bic.w	r3, r3, #3
 800eb60:	f043 0302 	orr.w	r3, r3, #2
 800eb64:	81a3      	strh	r3, [r4, #12]
 800eb66:	e7e3      	b.n	800eb30 <__smakebuf_r+0xc>
 800eb68:	4b0d      	ldr	r3, [pc, #52]	; (800eba0 <__smakebuf_r+0x7c>)
 800eb6a:	62b3      	str	r3, [r6, #40]	; 0x28
 800eb6c:	89a3      	ldrh	r3, [r4, #12]
 800eb6e:	6020      	str	r0, [r4, #0]
 800eb70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb74:	81a3      	strh	r3, [r4, #12]
 800eb76:	9b00      	ldr	r3, [sp, #0]
 800eb78:	6163      	str	r3, [r4, #20]
 800eb7a:	9b01      	ldr	r3, [sp, #4]
 800eb7c:	6120      	str	r0, [r4, #16]
 800eb7e:	b15b      	cbz	r3, 800eb98 <__smakebuf_r+0x74>
 800eb80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eb84:	4630      	mov	r0, r6
 800eb86:	f000 f8d1 	bl	800ed2c <_isatty_r>
 800eb8a:	b128      	cbz	r0, 800eb98 <__smakebuf_r+0x74>
 800eb8c:	89a3      	ldrh	r3, [r4, #12]
 800eb8e:	f023 0303 	bic.w	r3, r3, #3
 800eb92:	f043 0301 	orr.w	r3, r3, #1
 800eb96:	81a3      	strh	r3, [r4, #12]
 800eb98:	89a0      	ldrh	r0, [r4, #12]
 800eb9a:	4305      	orrs	r5, r0
 800eb9c:	81a5      	strh	r5, [r4, #12]
 800eb9e:	e7cd      	b.n	800eb3c <__smakebuf_r+0x18>
 800eba0:	0800e935 	.word	0x0800e935

0800eba4 <_malloc_usable_size_r>:
 800eba4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eba8:	1f18      	subs	r0, r3, #4
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	bfbc      	itt	lt
 800ebae:	580b      	ldrlt	r3, [r1, r0]
 800ebb0:	18c0      	addlt	r0, r0, r3
 800ebb2:	4770      	bx	lr

0800ebb4 <_raise_r>:
 800ebb4:	291f      	cmp	r1, #31
 800ebb6:	b538      	push	{r3, r4, r5, lr}
 800ebb8:	4604      	mov	r4, r0
 800ebba:	460d      	mov	r5, r1
 800ebbc:	d904      	bls.n	800ebc8 <_raise_r+0x14>
 800ebbe:	2316      	movs	r3, #22
 800ebc0:	6003      	str	r3, [r0, #0]
 800ebc2:	f04f 30ff 	mov.w	r0, #4294967295
 800ebc6:	bd38      	pop	{r3, r4, r5, pc}
 800ebc8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ebca:	b112      	cbz	r2, 800ebd2 <_raise_r+0x1e>
 800ebcc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ebd0:	b94b      	cbnz	r3, 800ebe6 <_raise_r+0x32>
 800ebd2:	4620      	mov	r0, r4
 800ebd4:	f000 f830 	bl	800ec38 <_getpid_r>
 800ebd8:	462a      	mov	r2, r5
 800ebda:	4601      	mov	r1, r0
 800ebdc:	4620      	mov	r0, r4
 800ebde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ebe2:	f000 b817 	b.w	800ec14 <_kill_r>
 800ebe6:	2b01      	cmp	r3, #1
 800ebe8:	d00a      	beq.n	800ec00 <_raise_r+0x4c>
 800ebea:	1c59      	adds	r1, r3, #1
 800ebec:	d103      	bne.n	800ebf6 <_raise_r+0x42>
 800ebee:	2316      	movs	r3, #22
 800ebf0:	6003      	str	r3, [r0, #0]
 800ebf2:	2001      	movs	r0, #1
 800ebf4:	e7e7      	b.n	800ebc6 <_raise_r+0x12>
 800ebf6:	2400      	movs	r4, #0
 800ebf8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ebfc:	4628      	mov	r0, r5
 800ebfe:	4798      	blx	r3
 800ec00:	2000      	movs	r0, #0
 800ec02:	e7e0      	b.n	800ebc6 <_raise_r+0x12>

0800ec04 <raise>:
 800ec04:	4b02      	ldr	r3, [pc, #8]	; (800ec10 <raise+0xc>)
 800ec06:	4601      	mov	r1, r0
 800ec08:	6818      	ldr	r0, [r3, #0]
 800ec0a:	f7ff bfd3 	b.w	800ebb4 <_raise_r>
 800ec0e:	bf00      	nop
 800ec10:	20000010 	.word	0x20000010

0800ec14 <_kill_r>:
 800ec14:	b538      	push	{r3, r4, r5, lr}
 800ec16:	4d07      	ldr	r5, [pc, #28]	; (800ec34 <_kill_r+0x20>)
 800ec18:	2300      	movs	r3, #0
 800ec1a:	4604      	mov	r4, r0
 800ec1c:	4608      	mov	r0, r1
 800ec1e:	4611      	mov	r1, r2
 800ec20:	602b      	str	r3, [r5, #0]
 800ec22:	f7f4 fc31 	bl	8003488 <_kill>
 800ec26:	1c43      	adds	r3, r0, #1
 800ec28:	d102      	bne.n	800ec30 <_kill_r+0x1c>
 800ec2a:	682b      	ldr	r3, [r5, #0]
 800ec2c:	b103      	cbz	r3, 800ec30 <_kill_r+0x1c>
 800ec2e:	6023      	str	r3, [r4, #0]
 800ec30:	bd38      	pop	{r3, r4, r5, pc}
 800ec32:	bf00      	nop
 800ec34:	20000d04 	.word	0x20000d04

0800ec38 <_getpid_r>:
 800ec38:	f7f4 bc1e 	b.w	8003478 <_getpid>

0800ec3c <__sread>:
 800ec3c:	b510      	push	{r4, lr}
 800ec3e:	460c      	mov	r4, r1
 800ec40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec44:	f000 f894 	bl	800ed70 <_read_r>
 800ec48:	2800      	cmp	r0, #0
 800ec4a:	bfab      	itete	ge
 800ec4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ec4e:	89a3      	ldrhlt	r3, [r4, #12]
 800ec50:	181b      	addge	r3, r3, r0
 800ec52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ec56:	bfac      	ite	ge
 800ec58:	6563      	strge	r3, [r4, #84]	; 0x54
 800ec5a:	81a3      	strhlt	r3, [r4, #12]
 800ec5c:	bd10      	pop	{r4, pc}

0800ec5e <__swrite>:
 800ec5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec62:	461f      	mov	r7, r3
 800ec64:	898b      	ldrh	r3, [r1, #12]
 800ec66:	05db      	lsls	r3, r3, #23
 800ec68:	4605      	mov	r5, r0
 800ec6a:	460c      	mov	r4, r1
 800ec6c:	4616      	mov	r6, r2
 800ec6e:	d505      	bpl.n	800ec7c <__swrite+0x1e>
 800ec70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec74:	2302      	movs	r3, #2
 800ec76:	2200      	movs	r2, #0
 800ec78:	f000 f868 	bl	800ed4c <_lseek_r>
 800ec7c:	89a3      	ldrh	r3, [r4, #12]
 800ec7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ec82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ec86:	81a3      	strh	r3, [r4, #12]
 800ec88:	4632      	mov	r2, r6
 800ec8a:	463b      	mov	r3, r7
 800ec8c:	4628      	mov	r0, r5
 800ec8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ec92:	f000 b817 	b.w	800ecc4 <_write_r>

0800ec96 <__sseek>:
 800ec96:	b510      	push	{r4, lr}
 800ec98:	460c      	mov	r4, r1
 800ec9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec9e:	f000 f855 	bl	800ed4c <_lseek_r>
 800eca2:	1c43      	adds	r3, r0, #1
 800eca4:	89a3      	ldrh	r3, [r4, #12]
 800eca6:	bf15      	itete	ne
 800eca8:	6560      	strne	r0, [r4, #84]	; 0x54
 800ecaa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ecae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ecb2:	81a3      	strheq	r3, [r4, #12]
 800ecb4:	bf18      	it	ne
 800ecb6:	81a3      	strhne	r3, [r4, #12]
 800ecb8:	bd10      	pop	{r4, pc}

0800ecba <__sclose>:
 800ecba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ecbe:	f000 b813 	b.w	800ece8 <_close_r>
	...

0800ecc4 <_write_r>:
 800ecc4:	b538      	push	{r3, r4, r5, lr}
 800ecc6:	4d07      	ldr	r5, [pc, #28]	; (800ece4 <_write_r+0x20>)
 800ecc8:	4604      	mov	r4, r0
 800ecca:	4608      	mov	r0, r1
 800eccc:	4611      	mov	r1, r2
 800ecce:	2200      	movs	r2, #0
 800ecd0:	602a      	str	r2, [r5, #0]
 800ecd2:	461a      	mov	r2, r3
 800ecd4:	f7f4 fc0f 	bl	80034f6 <_write>
 800ecd8:	1c43      	adds	r3, r0, #1
 800ecda:	d102      	bne.n	800ece2 <_write_r+0x1e>
 800ecdc:	682b      	ldr	r3, [r5, #0]
 800ecde:	b103      	cbz	r3, 800ece2 <_write_r+0x1e>
 800ece0:	6023      	str	r3, [r4, #0]
 800ece2:	bd38      	pop	{r3, r4, r5, pc}
 800ece4:	20000d04 	.word	0x20000d04

0800ece8 <_close_r>:
 800ece8:	b538      	push	{r3, r4, r5, lr}
 800ecea:	4d06      	ldr	r5, [pc, #24]	; (800ed04 <_close_r+0x1c>)
 800ecec:	2300      	movs	r3, #0
 800ecee:	4604      	mov	r4, r0
 800ecf0:	4608      	mov	r0, r1
 800ecf2:	602b      	str	r3, [r5, #0]
 800ecf4:	f7f4 fc1b 	bl	800352e <_close>
 800ecf8:	1c43      	adds	r3, r0, #1
 800ecfa:	d102      	bne.n	800ed02 <_close_r+0x1a>
 800ecfc:	682b      	ldr	r3, [r5, #0]
 800ecfe:	b103      	cbz	r3, 800ed02 <_close_r+0x1a>
 800ed00:	6023      	str	r3, [r4, #0]
 800ed02:	bd38      	pop	{r3, r4, r5, pc}
 800ed04:	20000d04 	.word	0x20000d04

0800ed08 <_fstat_r>:
 800ed08:	b538      	push	{r3, r4, r5, lr}
 800ed0a:	4d07      	ldr	r5, [pc, #28]	; (800ed28 <_fstat_r+0x20>)
 800ed0c:	2300      	movs	r3, #0
 800ed0e:	4604      	mov	r4, r0
 800ed10:	4608      	mov	r0, r1
 800ed12:	4611      	mov	r1, r2
 800ed14:	602b      	str	r3, [r5, #0]
 800ed16:	f7f4 fc16 	bl	8003546 <_fstat>
 800ed1a:	1c43      	adds	r3, r0, #1
 800ed1c:	d102      	bne.n	800ed24 <_fstat_r+0x1c>
 800ed1e:	682b      	ldr	r3, [r5, #0]
 800ed20:	b103      	cbz	r3, 800ed24 <_fstat_r+0x1c>
 800ed22:	6023      	str	r3, [r4, #0]
 800ed24:	bd38      	pop	{r3, r4, r5, pc}
 800ed26:	bf00      	nop
 800ed28:	20000d04 	.word	0x20000d04

0800ed2c <_isatty_r>:
 800ed2c:	b538      	push	{r3, r4, r5, lr}
 800ed2e:	4d06      	ldr	r5, [pc, #24]	; (800ed48 <_isatty_r+0x1c>)
 800ed30:	2300      	movs	r3, #0
 800ed32:	4604      	mov	r4, r0
 800ed34:	4608      	mov	r0, r1
 800ed36:	602b      	str	r3, [r5, #0]
 800ed38:	f7f4 fc15 	bl	8003566 <_isatty>
 800ed3c:	1c43      	adds	r3, r0, #1
 800ed3e:	d102      	bne.n	800ed46 <_isatty_r+0x1a>
 800ed40:	682b      	ldr	r3, [r5, #0]
 800ed42:	b103      	cbz	r3, 800ed46 <_isatty_r+0x1a>
 800ed44:	6023      	str	r3, [r4, #0]
 800ed46:	bd38      	pop	{r3, r4, r5, pc}
 800ed48:	20000d04 	.word	0x20000d04

0800ed4c <_lseek_r>:
 800ed4c:	b538      	push	{r3, r4, r5, lr}
 800ed4e:	4d07      	ldr	r5, [pc, #28]	; (800ed6c <_lseek_r+0x20>)
 800ed50:	4604      	mov	r4, r0
 800ed52:	4608      	mov	r0, r1
 800ed54:	4611      	mov	r1, r2
 800ed56:	2200      	movs	r2, #0
 800ed58:	602a      	str	r2, [r5, #0]
 800ed5a:	461a      	mov	r2, r3
 800ed5c:	f7f4 fc0e 	bl	800357c <_lseek>
 800ed60:	1c43      	adds	r3, r0, #1
 800ed62:	d102      	bne.n	800ed6a <_lseek_r+0x1e>
 800ed64:	682b      	ldr	r3, [r5, #0]
 800ed66:	b103      	cbz	r3, 800ed6a <_lseek_r+0x1e>
 800ed68:	6023      	str	r3, [r4, #0]
 800ed6a:	bd38      	pop	{r3, r4, r5, pc}
 800ed6c:	20000d04 	.word	0x20000d04

0800ed70 <_read_r>:
 800ed70:	b538      	push	{r3, r4, r5, lr}
 800ed72:	4d07      	ldr	r5, [pc, #28]	; (800ed90 <_read_r+0x20>)
 800ed74:	4604      	mov	r4, r0
 800ed76:	4608      	mov	r0, r1
 800ed78:	4611      	mov	r1, r2
 800ed7a:	2200      	movs	r2, #0
 800ed7c:	602a      	str	r2, [r5, #0]
 800ed7e:	461a      	mov	r2, r3
 800ed80:	f7f4 fb9c 	bl	80034bc <_read>
 800ed84:	1c43      	adds	r3, r0, #1
 800ed86:	d102      	bne.n	800ed8e <_read_r+0x1e>
 800ed88:	682b      	ldr	r3, [r5, #0]
 800ed8a:	b103      	cbz	r3, 800ed8e <_read_r+0x1e>
 800ed8c:	6023      	str	r3, [r4, #0]
 800ed8e:	bd38      	pop	{r3, r4, r5, pc}
 800ed90:	20000d04 	.word	0x20000d04

0800ed94 <_init>:
 800ed94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed96:	bf00      	nop
 800ed98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed9a:	bc08      	pop	{r3}
 800ed9c:	469e      	mov	lr, r3
 800ed9e:	4770      	bx	lr

0800eda0 <_fini>:
 800eda0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eda2:	bf00      	nop
 800eda4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eda6:	bc08      	pop	{r3}
 800eda8:	469e      	mov	lr, r3
 800edaa:	4770      	bx	lr
